# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateGenre {
  _count: GenreCountAggregate
  _max: GenreMaxAggregate
  _min: GenreMinAggregate
}

type AggregateMovie {
  _count: MovieCountAggregate
  _max: MovieMaxAggregate
  _min: MovieMinAggregate
}

type AggregateMovieLikedByUser {
  _count: MovieLikedByUserCountAggregate
  _max: MovieLikedByUserMaxAggregate
  _min: MovieLikedByUserMinAggregate
}

type AggregateMovieList {
  _count: MovieListCountAggregate
  _max: MovieListMaxAggregate
  _min: MovieListMinAggregate
}

type AggregateMovieRating {
  _avg: MovieRatingAvgAggregate
  _count: MovieRatingCountAggregate
  _max: MovieRatingMaxAggregate
  _min: MovieRatingMinAggregate
  _sum: MovieRatingSumAggregate
}

type AggregateMovieReview {
  _count: MovieReviewCountAggregate
  _max: MovieReviewMaxAggregate
  _min: MovieReviewMinAggregate
}

type AggregateMovieReviewLikedByUser {
  _count: MovieReviewLikedByUserCountAggregate
  _max: MovieReviewLikedByUserMaxAggregate
  _min: MovieReviewLikedByUserMinAggregate
}

type AggregateMovieSpokenLanguage {
  _count: MovieSpokenLanguageCountAggregate
  _max: MovieSpokenLanguageMaxAggregate
  _min: MovieSpokenLanguageMinAggregate
}

type AggregateMovieWatchedByUser {
  _count: MovieWatchedByUserCountAggregate
  _max: MovieWatchedByUserMaxAggregate
  _min: MovieWatchedByUserMinAggregate
}

type AggregateUserMovieWatchlist {
  _count: UserMovieWatchlistCountAggregate
  _max: UserMovieWatchlistMaxAggregate
  _min: UserMovieWatchlistMinAggregate
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

type Decades {
  decades: [Float!]!
}

input EnumMoviefireAppUserRoleFieldUpdateOperationsInput {
  set: MoviefireAppUserRole
}

input EnumMoviefireAppUserRoleFilter {
  equals: MoviefireAppUserRole
  in: [MoviefireAppUserRole!]
  not: NestedEnumMoviefireAppUserRoleFilter
  notIn: [MoviefireAppUserRole!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

type Genre {
  _count: GenreCount
  createdAt: DateTimeISO!
  movies(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
  name: String!
  updatedAt: DateTimeISO!
}

type GenreCount {
  movies(where: MovieWhereInput): Int!
}

type GenreCountAggregate {
  _all: Int!
  createdAt: Int!
  name: Int!
  updatedAt: Int!
}

input GenreCountOrderByAggregateInput {
  createdAt: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GenreCreateInput {
  createdAt: DateTimeISO
  movies: MovieCreateNestedManyWithoutGenresInput
  name: String!
  updatedAt: DateTimeISO
}

input GenreCreateManyInput {
  createdAt: DateTimeISO
  name: String!
  updatedAt: DateTimeISO
}

input GenreCreateNestedManyWithoutMoviesInput {
  connect: [GenreWhereUniqueInput!]
  connectOrCreate: [GenreCreateOrConnectWithoutMoviesInput!]
  create: [GenreCreateWithoutMoviesInput!]
}

input GenreCreateOrConnectWithoutMoviesInput {
  create: GenreCreateWithoutMoviesInput!
  where: GenreWhereUniqueInput!
}

input GenreCreateWithoutMoviesInput {
  createdAt: DateTimeISO
  name: String!
  updatedAt: DateTimeISO
}

type GenreGroupBy {
  _count: GenreCountAggregate
  _max: GenreMaxAggregate
  _min: GenreMinAggregate
  createdAt: DateTimeISO!
  name: String!
  updatedAt: DateTimeISO!
}

input GenreListRelationFilter {
  every: GenreWhereInput
  none: GenreWhereInput
  some: GenreWhereInput
}

type GenreMaxAggregate {
  createdAt: DateTimeISO
  name: String
  updatedAt: DateTimeISO
}

input GenreMaxOrderByAggregateInput {
  createdAt: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type GenreMinAggregate {
  createdAt: DateTimeISO
  name: String
  updatedAt: DateTimeISO
}

input GenreMinOrderByAggregateInput {
  createdAt: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GenreOrderByRelationAggregateInput {
  _count: SortOrder
}

enum GenreOrderByRelevanceFieldEnum {
  name
}

input GenreOrderByRelevanceInput {
  fields: [GenreOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input GenreOrderByWithAggregationInput {
  _count: GenreCountOrderByAggregateInput
  _max: GenreMaxOrderByAggregateInput
  _min: GenreMinOrderByAggregateInput
  createdAt: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GenreOrderByWithRelationAndSearchRelevanceInput {
  _relevance: GenreOrderByRelevanceInput
  createdAt: SortOrder
  movies: MovieOrderByRelationAggregateInput
  name: SortOrder
  updatedAt: SortOrder
}

enum GenreScalarFieldEnum {
  createdAt
  name
  updatedAt
}

input GenreScalarWhereInput {
  AND: [GenreScalarWhereInput!]
  NOT: [GenreScalarWhereInput!]
  OR: [GenreScalarWhereInput!]
  createdAt: DateTimeFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input GenreScalarWhereWithAggregatesInput {
  AND: [GenreScalarWhereWithAggregatesInput!]
  NOT: [GenreScalarWhereWithAggregatesInput!]
  OR: [GenreScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input GenreUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  movies: MovieUpdateManyWithoutGenresNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpdateManyWithWhereWithoutMoviesInput {
  data: GenreUpdateManyMutationInput!
  where: GenreScalarWhereInput!
}

input GenreUpdateManyWithoutMoviesNestedInput {
  connect: [GenreWhereUniqueInput!]
  connectOrCreate: [GenreCreateOrConnectWithoutMoviesInput!]
  create: [GenreCreateWithoutMoviesInput!]
  delete: [GenreWhereUniqueInput!]
  deleteMany: [GenreScalarWhereInput!]
  disconnect: [GenreWhereUniqueInput!]
  set: [GenreWhereUniqueInput!]
  update: [GenreUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [GenreUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [GenreUpsertWithWhereUniqueWithoutMoviesInput!]
}

input GenreUpdateWithWhereUniqueWithoutMoviesInput {
  data: GenreUpdateWithoutMoviesInput!
  where: GenreWhereUniqueInput!
}

input GenreUpdateWithoutMoviesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpsertWithWhereUniqueWithoutMoviesInput {
  create: GenreCreateWithoutMoviesInput!
  update: GenreUpdateWithoutMoviesInput!
  where: GenreWhereUniqueInput!
}

input GenreWhereInput {
  AND: [GenreWhereInput!]
  NOT: [GenreWhereInput!]
  OR: [GenreWhereInput!]
  createdAt: DateTimeFilter
  movies: MovieListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input GenreWhereUniqueInput {
  AND: [GenreWhereInput!]
  NOT: [GenreWhereInput!]
  OR: [GenreWhereInput!]
  createdAt: DateTimeFilter
  movies: MovieListRelationFilter
  name: String
  updatedAt: DateTimeFilter
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Movie {
  _count: MovieCount
  createdAt: DateTimeISO!
  crewMembers(cursor: MovieCrewMemberOnMovieWhereUniqueInput, distinct: [MovieCrewMemberOnMovieScalarFieldEnum!], orderBy: [MovieCrewMemberOnMovieOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieCrewMemberOnMovieWhereInput): [MovieCrewMemberOnMovie!]!
  genres(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum!], orderBy: [GenreOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: GenreWhereInput): [Genre!]!
  id: String!
  inWatchlistByUsers(cursor: UserMovieWatchlistWhereUniqueInput, distinct: [UserMovieWatchlistScalarFieldEnum!], orderBy: [UserMovieWatchlistOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: UserMovieWatchlistWhereInput): [UserMovieWatchlist!]!
  keywordCategories(cursor: MovieKeywordCategoryWhereUniqueInput, distinct: [MovieKeywordCategoryScalarFieldEnum!], orderBy: [MovieKeywordCategoryOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieKeywordCategoryWhereInput): [MovieKeywordCategory!]!
  likedBy(cursor: MovieLikedByUserWhereUniqueInput, distinct: [MovieLikedByUserScalarFieldEnum!], orderBy: [MovieLikedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieLikedByUserWhereInput): [MovieLikedByUser!]!
  movieInfo(where: MovieInfoWhereInput): MovieInfo
  movieLists(cursor: MovieListWhereUniqueInput, distinct: [MovieListScalarFieldEnum!], orderBy: [MovieListOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieListWhereInput): [MovieList!]!
  movieStats(where: MovieStatsWhereInput): MovieStats
  ratedBy(cursor: MovieRatingWhereUniqueInput, distinct: [MovieRatingScalarFieldEnum!], orderBy: [MovieRatingOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieRatingWhereInput): [MovieRating!]!
  spokenLanguages(cursor: MovieSpokenLanguageWhereUniqueInput, distinct: [MovieSpokenLanguageScalarFieldEnum!], orderBy: [MovieSpokenLanguageOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieSpokenLanguageWhereInput): [MovieSpokenLanguage!]!
  studios(cursor: MovieStudioWhereUniqueInput, distinct: [MovieStudioScalarFieldEnum!], orderBy: [MovieStudioOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieStudioWhereInput): [MovieStudio!]!
  updatedAt: DateTimeISO!
  watchedBy(cursor: MovieWatchedByUserWhereUniqueInput, distinct: [MovieWatchedByUserScalarFieldEnum!], orderBy: [MovieWatchedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWatchedByUserWhereInput): [MovieWatchedByUser!]!
}

type MovieCount {
  crewMembers(where: MovieCrewMemberOnMovieWhereInput): Int!
  genres(where: GenreWhereInput): Int!
  inWatchlistByUsers(where: UserMovieWatchlistWhereInput): Int!
  keywordCategories(where: MovieKeywordCategoryWhereInput): Int!
  likedBy(where: MovieLikedByUserWhereInput): Int!
  movieLists(where: MovieListWhereInput): Int!
  ratedBy(where: MovieRatingWhereInput): Int!
  spokenLanguages(where: MovieSpokenLanguageWhereInput): Int!
  studios(where: MovieStudioWhereInput): Int!
  watchedBy(where: MovieWatchedByUserWhereInput): Int!
}

type MovieCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  updatedAt: Int!
}

input MovieCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input MovieCreateInput {
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberOnMovieCreateNestedManyWithoutMovieInput
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: UserMovieWatchlistCreateNestedManyWithoutMovieInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  likedBy: MovieLikedByUserCreateNestedManyWithoutMovieInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  movieStats: MovieStatsCreateNestedOneWithoutMovieInput
  ratedBy: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
  watchedBy: MovieWatchedByUserCreateNestedManyWithoutMovieInput
}

input MovieCreateManyInput {
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input MovieCreateNestedManyWithoutGenresInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutGenresInput!]
  create: [MovieCreateWithoutGenresInput!]
}

input MovieCreateNestedManyWithoutMovieListsInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutMovieListsInput!]
  create: [MovieCreateWithoutMovieListsInput!]
}

input MovieCreateNestedManyWithoutSpokenLanguagesInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutSpokenLanguagesInput!]
  create: [MovieCreateWithoutSpokenLanguagesInput!]
}

input MovieCreateNestedOneWithoutInWatchlistByUsersInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutInWatchlistByUsersInput
  create: MovieCreateWithoutInWatchlistByUsersInput
}

input MovieCreateNestedOneWithoutLikedByInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutLikedByInput
  create: MovieCreateWithoutLikedByInput
}

input MovieCreateNestedOneWithoutRatedByInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutRatedByInput
  create: MovieCreateWithoutRatedByInput
}

input MovieCreateNestedOneWithoutWatchedByInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutWatchedByInput
  create: MovieCreateWithoutWatchedByInput
}

input MovieCreateOrConnectWithoutGenresInput {
  create: MovieCreateWithoutGenresInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutInWatchlistByUsersInput {
  create: MovieCreateWithoutInWatchlistByUsersInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutLikedByInput {
  create: MovieCreateWithoutLikedByInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutMovieListsInput {
  create: MovieCreateWithoutMovieListsInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutRatedByInput {
  create: MovieCreateWithoutRatedByInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutSpokenLanguagesInput {
  create: MovieCreateWithoutSpokenLanguagesInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutWatchedByInput {
  create: MovieCreateWithoutWatchedByInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateWithoutGenresInput {
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberOnMovieCreateNestedManyWithoutMovieInput
  id: String
  inWatchlistByUsers: UserMovieWatchlistCreateNestedManyWithoutMovieInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  likedBy: MovieLikedByUserCreateNestedManyWithoutMovieInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  movieStats: MovieStatsCreateNestedOneWithoutMovieInput
  ratedBy: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
  watchedBy: MovieWatchedByUserCreateNestedManyWithoutMovieInput
}

input MovieCreateWithoutInWatchlistByUsersInput {
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberOnMovieCreateNestedManyWithoutMovieInput
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  likedBy: MovieLikedByUserCreateNestedManyWithoutMovieInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  movieStats: MovieStatsCreateNestedOneWithoutMovieInput
  ratedBy: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
  watchedBy: MovieWatchedByUserCreateNestedManyWithoutMovieInput
}

input MovieCreateWithoutLikedByInput {
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberOnMovieCreateNestedManyWithoutMovieInput
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: UserMovieWatchlistCreateNestedManyWithoutMovieInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  movieStats: MovieStatsCreateNestedOneWithoutMovieInput
  ratedBy: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
  watchedBy: MovieWatchedByUserCreateNestedManyWithoutMovieInput
}

input MovieCreateWithoutMovieListsInput {
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberOnMovieCreateNestedManyWithoutMovieInput
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: UserMovieWatchlistCreateNestedManyWithoutMovieInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  likedBy: MovieLikedByUserCreateNestedManyWithoutMovieInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieStats: MovieStatsCreateNestedOneWithoutMovieInput
  ratedBy: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
  watchedBy: MovieWatchedByUserCreateNestedManyWithoutMovieInput
}

input MovieCreateWithoutRatedByInput {
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberOnMovieCreateNestedManyWithoutMovieInput
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: UserMovieWatchlistCreateNestedManyWithoutMovieInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  likedBy: MovieLikedByUserCreateNestedManyWithoutMovieInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  movieStats: MovieStatsCreateNestedOneWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
  watchedBy: MovieWatchedByUserCreateNestedManyWithoutMovieInput
}

input MovieCreateWithoutSpokenLanguagesInput {
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberOnMovieCreateNestedManyWithoutMovieInput
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: UserMovieWatchlistCreateNestedManyWithoutMovieInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  likedBy: MovieLikedByUserCreateNestedManyWithoutMovieInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  movieStats: MovieStatsCreateNestedOneWithoutMovieInput
  ratedBy: MovieRatingCreateNestedManyWithoutMovieInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
  watchedBy: MovieWatchedByUserCreateNestedManyWithoutMovieInput
}

input MovieCreateWithoutWatchedByInput {
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberOnMovieCreateNestedManyWithoutMovieInput
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: UserMovieWatchlistCreateNestedManyWithoutMovieInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  likedBy: MovieLikedByUserCreateNestedManyWithoutMovieInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  movieStats: MovieStatsCreateNestedOneWithoutMovieInput
  ratedBy: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

type MovieCrewMember {
  _count: MovieCrewMemberCount
  createdAt: DateTimeISO!
  description: String!
  id: String!
  imdbId: String!
  name: String!
  photoUrl: String!
  popularity: Float!
  updatedAt: DateTimeISO!
}

type MovieCrewMemberCount {
  movies(where: MovieCrewMemberOnMovieWhereInput): Int!
}

input MovieCrewMemberCreateNestedOneWithoutMoviesInput {
  connect: MovieCrewMemberWhereUniqueInput
  connectOrCreate: MovieCrewMemberCreateOrConnectWithoutMoviesInput
  create: MovieCrewMemberCreateWithoutMoviesInput
}

input MovieCrewMemberCreateOrConnectWithoutMoviesInput {
  create: MovieCrewMemberCreateWithoutMoviesInput!
  where: MovieCrewMemberWhereUniqueInput!
}

input MovieCrewMemberCreateWithoutMoviesInput {
  createdAt: DateTimeISO
  description: String!
  id: String
  imdbId: String!
  name: String!
  photoUrl: String!
  popularity: Float
  updatedAt: DateTimeISO
}

type MovieCrewMemberOnMovie {
  createdAt: DateTimeISO!
  crewMember: MovieCrewMember!
  movie: Movie!
  movieCrewMemberId: String!
  movieCrewMemberType: MovieCrewMemberType!
  movieCrewMemberTypeId: String!
  movieId: String!
  order: Int!
  updatedAt: DateTimeISO!
}

input MovieCrewMemberOnMovieCreateManyMovieInput {
  createdAt: DateTimeISO
  movieCrewMemberId: String!
  movieCrewMemberTypeId: String!
  order: Int
  updatedAt: DateTimeISO
}

input MovieCrewMemberOnMovieCreateManyMovieInputEnvelope {
  data: [MovieCrewMemberOnMovieCreateManyMovieInput!]!
  skipDuplicates: Boolean
}

input MovieCrewMemberOnMovieCreateNestedManyWithoutMovieInput {
  connect: [MovieCrewMemberOnMovieWhereUniqueInput!]
  connectOrCreate: [MovieCrewMemberOnMovieCreateOrConnectWithoutMovieInput!]
  create: [MovieCrewMemberOnMovieCreateWithoutMovieInput!]
  createMany: MovieCrewMemberOnMovieCreateManyMovieInputEnvelope
}

input MovieCrewMemberOnMovieCreateOrConnectWithoutMovieInput {
  create: MovieCrewMemberOnMovieCreateWithoutMovieInput!
  where: MovieCrewMemberOnMovieWhereUniqueInput!
}

input MovieCrewMemberOnMovieCreateWithoutMovieInput {
  createdAt: DateTimeISO
  crewMember: MovieCrewMemberCreateNestedOneWithoutMoviesInput!
  movieCrewMemberType: MovieCrewMemberTypeCreateNestedOneWithoutMovieCrewMembersInput!
  order: Int
  updatedAt: DateTimeISO
}

input MovieCrewMemberOnMovieListRelationFilter {
  every: MovieCrewMemberOnMovieWhereInput
  none: MovieCrewMemberOnMovieWhereInput
  some: MovieCrewMemberOnMovieWhereInput
}

input MovieCrewMemberOnMovieMovieIdMovieCrewMemberIdMovieCrewMemberTypeIdCompoundUniqueInput {
  movieCrewMemberId: String!
  movieCrewMemberTypeId: String!
  movieId: String!
}

input MovieCrewMemberOnMovieOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieCrewMemberOnMovieOrderByRelevanceFieldEnum {
  movieCrewMemberId
  movieCrewMemberTypeId
  movieId
}

input MovieCrewMemberOnMovieOrderByRelevanceInput {
  fields: [MovieCrewMemberOnMovieOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieCrewMemberOnMovieOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieCrewMemberOnMovieOrderByRelevanceInput
  createdAt: SortOrder
  crewMember: MovieCrewMemberOrderByWithRelationAndSearchRelevanceInput
  movie: MovieOrderByWithRelationAndSearchRelevanceInput
  movieCrewMemberId: SortOrder
  movieCrewMemberType: MovieCrewMemberTypeOrderByWithRelationAndSearchRelevanceInput
  movieCrewMemberTypeId: SortOrder
  movieId: SortOrder
  order: SortOrder
  updatedAt: SortOrder
}

enum MovieCrewMemberOnMovieScalarFieldEnum {
  createdAt
  movieCrewMemberId
  movieCrewMemberTypeId
  movieId
  order
  updatedAt
}

input MovieCrewMemberOnMovieScalarWhereInput {
  AND: [MovieCrewMemberOnMovieScalarWhereInput!]
  NOT: [MovieCrewMemberOnMovieScalarWhereInput!]
  OR: [MovieCrewMemberOnMovieScalarWhereInput!]
  createdAt: DateTimeFilter
  movieCrewMemberId: StringFilter
  movieCrewMemberTypeId: StringFilter
  movieId: StringFilter
  order: IntFilter
  updatedAt: DateTimeFilter
}

input MovieCrewMemberOnMovieUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  order: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieCrewMemberOnMovieUpdateManyWithWhereWithoutMovieInput {
  data: MovieCrewMemberOnMovieUpdateManyMutationInput!
  where: MovieCrewMemberOnMovieScalarWhereInput!
}

input MovieCrewMemberOnMovieUpdateManyWithoutMovieNestedInput {
  connect: [MovieCrewMemberOnMovieWhereUniqueInput!]
  connectOrCreate: [MovieCrewMemberOnMovieCreateOrConnectWithoutMovieInput!]
  create: [MovieCrewMemberOnMovieCreateWithoutMovieInput!]
  createMany: MovieCrewMemberOnMovieCreateManyMovieInputEnvelope
  delete: [MovieCrewMemberOnMovieWhereUniqueInput!]
  deleteMany: [MovieCrewMemberOnMovieScalarWhereInput!]
  disconnect: [MovieCrewMemberOnMovieWhereUniqueInput!]
  set: [MovieCrewMemberOnMovieWhereUniqueInput!]
  update: [MovieCrewMemberOnMovieUpdateWithWhereUniqueWithoutMovieInput!]
  updateMany: [MovieCrewMemberOnMovieUpdateManyWithWhereWithoutMovieInput!]
  upsert: [MovieCrewMemberOnMovieUpsertWithWhereUniqueWithoutMovieInput!]
}

input MovieCrewMemberOnMovieUpdateWithWhereUniqueWithoutMovieInput {
  data: MovieCrewMemberOnMovieUpdateWithoutMovieInput!
  where: MovieCrewMemberOnMovieWhereUniqueInput!
}

input MovieCrewMemberOnMovieUpdateWithoutMovieInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMember: MovieCrewMemberUpdateOneRequiredWithoutMoviesNestedInput
  movieCrewMemberType: MovieCrewMemberTypeUpdateOneRequiredWithoutMovieCrewMembersNestedInput
  order: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieCrewMemberOnMovieUpsertWithWhereUniqueWithoutMovieInput {
  create: MovieCrewMemberOnMovieCreateWithoutMovieInput!
  update: MovieCrewMemberOnMovieUpdateWithoutMovieInput!
  where: MovieCrewMemberOnMovieWhereUniqueInput!
}

input MovieCrewMemberOnMovieWhereInput {
  AND: [MovieCrewMemberOnMovieWhereInput!]
  NOT: [MovieCrewMemberOnMovieWhereInput!]
  OR: [MovieCrewMemberOnMovieWhereInput!]
  createdAt: DateTimeFilter
  crewMember: MovieCrewMemberRelationFilter
  movie: MovieRelationFilter
  movieCrewMemberId: StringFilter
  movieCrewMemberType: MovieCrewMemberTypeRelationFilter
  movieCrewMemberTypeId: StringFilter
  movieId: StringFilter
  order: IntFilter
  updatedAt: DateTimeFilter
}

input MovieCrewMemberOnMovieWhereUniqueInput {
  AND: [MovieCrewMemberOnMovieWhereInput!]
  NOT: [MovieCrewMemberOnMovieWhereInput!]
  OR: [MovieCrewMemberOnMovieWhereInput!]
  createdAt: DateTimeFilter
  crewMember: MovieCrewMemberRelationFilter
  movie: MovieRelationFilter
  movieCrewMemberId: StringFilter
  movieCrewMemberType: MovieCrewMemberTypeRelationFilter
  movieCrewMemberTypeId: StringFilter
  movieId: StringFilter
  movieId_movieCrewMemberId_movieCrewMemberTypeId: MovieCrewMemberOnMovieMovieIdMovieCrewMemberIdMovieCrewMemberTypeIdCompoundUniqueInput
  order: IntFilter
  updatedAt: DateTimeFilter
}

enum MovieCrewMemberOrderByRelevanceFieldEnum {
  description
  id
  imdbId
  name
  photoUrl
}

input MovieCrewMemberOrderByRelevanceInput {
  fields: [MovieCrewMemberOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieCrewMemberOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieCrewMemberOrderByRelevanceInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  imdbId: SortOrder
  movies: MovieCrewMemberOnMovieOrderByRelationAggregateInput
  name: SortOrder
  photoUrl: SortOrder
  popularity: SortOrder
  updatedAt: SortOrder
}

input MovieCrewMemberRelationFilter {
  is: MovieCrewMemberWhereInput
  isNot: MovieCrewMemberWhereInput
}

type MovieCrewMemberType {
  _count: MovieCrewMemberTypeCount
  id: String!
  name: String!
}

type MovieCrewMemberTypeCount {
  movieCrewMembers(where: MovieCrewMemberOnMovieWhereInput): Int!
}

input MovieCrewMemberTypeCreateNestedOneWithoutMovieCrewMembersInput {
  connect: MovieCrewMemberTypeWhereUniqueInput
  connectOrCreate: MovieCrewMemberTypeCreateOrConnectWithoutMovieCrewMembersInput
  create: MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput
}

input MovieCrewMemberTypeCreateOrConnectWithoutMovieCrewMembersInput {
  create: MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput!
  where: MovieCrewMemberTypeWhereUniqueInput!
}

input MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput {
  id: String
  name: String!
}

enum MovieCrewMemberTypeOrderByRelevanceFieldEnum {
  id
  name
}

input MovieCrewMemberTypeOrderByRelevanceInput {
  fields: [MovieCrewMemberTypeOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieCrewMemberTypeOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieCrewMemberTypeOrderByRelevanceInput
  id: SortOrder
  movieCrewMembers: MovieCrewMemberOnMovieOrderByRelationAggregateInput
  name: SortOrder
}

input MovieCrewMemberTypeRelationFilter {
  is: MovieCrewMemberTypeWhereInput
  isNot: MovieCrewMemberTypeWhereInput
}

input MovieCrewMemberTypeUpdateOneRequiredWithoutMovieCrewMembersNestedInput {
  connect: MovieCrewMemberTypeWhereUniqueInput
  connectOrCreate: MovieCrewMemberTypeCreateOrConnectWithoutMovieCrewMembersInput
  create: MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput
  update: MovieCrewMemberTypeUpdateToOneWithWhereWithoutMovieCrewMembersInput
  upsert: MovieCrewMemberTypeUpsertWithoutMovieCrewMembersInput
}

input MovieCrewMemberTypeUpdateToOneWithWhereWithoutMovieCrewMembersInput {
  data: MovieCrewMemberTypeUpdateWithoutMovieCrewMembersInput!
  where: MovieCrewMemberTypeWhereInput
}

input MovieCrewMemberTypeUpdateWithoutMovieCrewMembersInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input MovieCrewMemberTypeUpsertWithoutMovieCrewMembersInput {
  create: MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput!
  update: MovieCrewMemberTypeUpdateWithoutMovieCrewMembersInput!
  where: MovieCrewMemberTypeWhereInput
}

input MovieCrewMemberTypeWhereInput {
  AND: [MovieCrewMemberTypeWhereInput!]
  NOT: [MovieCrewMemberTypeWhereInput!]
  OR: [MovieCrewMemberTypeWhereInput!]
  id: StringFilter
  movieCrewMembers: MovieCrewMemberOnMovieListRelationFilter
  name: StringFilter
}

input MovieCrewMemberTypeWhereUniqueInput {
  AND: [MovieCrewMemberTypeWhereInput!]
  NOT: [MovieCrewMemberTypeWhereInput!]
  OR: [MovieCrewMemberTypeWhereInput!]
  id: String
  movieCrewMembers: MovieCrewMemberOnMovieListRelationFilter
  name: String
}

input MovieCrewMemberUpdateOneRequiredWithoutMoviesNestedInput {
  connect: MovieCrewMemberWhereUniqueInput
  connectOrCreate: MovieCrewMemberCreateOrConnectWithoutMoviesInput
  create: MovieCrewMemberCreateWithoutMoviesInput
  update: MovieCrewMemberUpdateToOneWithWhereWithoutMoviesInput
  upsert: MovieCrewMemberUpsertWithoutMoviesInput
}

input MovieCrewMemberUpdateToOneWithWhereWithoutMoviesInput {
  data: MovieCrewMemberUpdateWithoutMoviesInput!
  where: MovieCrewMemberWhereInput
}

input MovieCrewMemberUpdateWithoutMoviesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imdbId: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  photoUrl: StringFieldUpdateOperationsInput
  popularity: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieCrewMemberUpsertWithoutMoviesInput {
  create: MovieCrewMemberCreateWithoutMoviesInput!
  update: MovieCrewMemberUpdateWithoutMoviesInput!
  where: MovieCrewMemberWhereInput
}

input MovieCrewMemberWhereInput {
  AND: [MovieCrewMemberWhereInput!]
  NOT: [MovieCrewMemberWhereInput!]
  OR: [MovieCrewMemberWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  imdbId: StringFilter
  movies: MovieCrewMemberOnMovieListRelationFilter
  name: StringFilter
  photoUrl: StringFilter
  popularity: FloatFilter
  updatedAt: DateTimeFilter
}

input MovieCrewMemberWhereUniqueInput {
  AND: [MovieCrewMemberWhereInput!]
  NOT: [MovieCrewMemberWhereInput!]
  OR: [MovieCrewMemberWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: String
  imdbId: String
  movies: MovieCrewMemberOnMovieListRelationFilter
  name: StringFilter
  photoUrl: StringFilter
  popularity: FloatFilter
  updatedAt: DateTimeFilter
}

type MovieGroupBy {
  _count: MovieCountAggregate
  _max: MovieMaxAggregate
  _min: MovieMinAggregate
  createdAt: DateTimeISO!
  id: String!
  updatedAt: DateTimeISO!
}

type MovieInfo {
  alternativeTitles: [String!]!
  createdAt: DateTimeISO!
  description: String!
  durationInMinutes: Int!
  id: String!
  imdbId: String!
  movieId: String!
  posterUrl: String!
  releaseDate: DateTimeISO!
  title: String!
  updatedAt: DateTimeISO!
}

input MovieInfoCreateNestedOneWithoutMovieInput {
  connect: MovieInfoWhereUniqueInput
  connectOrCreate: MovieInfoCreateOrConnectWithoutMovieInput
  create: MovieInfoCreateWithoutMovieInput
}

input MovieInfoCreateOrConnectWithoutMovieInput {
  create: MovieInfoCreateWithoutMovieInput!
  where: MovieInfoWhereUniqueInput!
}

input MovieInfoCreateWithoutMovieInput {
  alternativeTitles: MovieInfoCreatealternativeTitlesInput
  createdAt: DateTimeISO
  description: String!
  durationInMinutes: Int!
  id: String
  imdbId: String!
  posterUrl: String!
  releaseDate: DateTimeISO!
  title: String!
  updatedAt: DateTimeISO
}

input MovieInfoCreatealternativeTitlesInput {
  set: [String!]!
}

input MovieInfoNullableRelationFilter {
  is: MovieInfoWhereInput
  isNot: MovieInfoWhereInput
}

enum MovieInfoOrderByRelevanceFieldEnum {
  alternativeTitles
  description
  id
  imdbId
  movieId
  posterUrl
  title
}

input MovieInfoOrderByRelevanceInput {
  fields: [MovieInfoOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieInfoOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieInfoOrderByRelevanceInput
  alternativeTitles: SortOrder
  createdAt: SortOrder
  description: SortOrder
  durationInMinutes: SortOrder
  id: SortOrder
  imdbId: SortOrder
  movie: MovieOrderByWithRelationAndSearchRelevanceInput
  movieId: SortOrder
  posterUrl: SortOrder
  releaseDate: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input MovieInfoUpdateOneWithoutMovieNestedInput {
  connect: MovieInfoWhereUniqueInput
  connectOrCreate: MovieInfoCreateOrConnectWithoutMovieInput
  create: MovieInfoCreateWithoutMovieInput
  delete: MovieInfoWhereInput
  disconnect: MovieInfoWhereInput
  update: MovieInfoUpdateToOneWithWhereWithoutMovieInput
  upsert: MovieInfoUpsertWithoutMovieInput
}

input MovieInfoUpdateToOneWithWhereWithoutMovieInput {
  data: MovieInfoUpdateWithoutMovieInput!
  where: MovieInfoWhereInput
}

input MovieInfoUpdateWithoutMovieInput {
  alternativeTitles: MovieInfoUpdatealternativeTitlesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  durationInMinutes: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imdbId: StringFieldUpdateOperationsInput
  posterUrl: StringFieldUpdateOperationsInput
  releaseDate: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieInfoUpdatealternativeTitlesInput {
  push: [String!]
  set: [String!]
}

input MovieInfoUpsertWithoutMovieInput {
  create: MovieInfoCreateWithoutMovieInput!
  update: MovieInfoUpdateWithoutMovieInput!
  where: MovieInfoWhereInput
}

input MovieInfoWhereInput {
  AND: [MovieInfoWhereInput!]
  NOT: [MovieInfoWhereInput!]
  OR: [MovieInfoWhereInput!]
  alternativeTitles: StringNullableListFilter
  createdAt: DateTimeFilter
  description: StringFilter
  durationInMinutes: IntFilter
  id: StringFilter
  imdbId: StringFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  posterUrl: StringFilter
  releaseDate: DateTimeFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input MovieInfoWhereUniqueInput {
  AND: [MovieInfoWhereInput!]
  NOT: [MovieInfoWhereInput!]
  OR: [MovieInfoWhereInput!]
  alternativeTitles: StringNullableListFilter
  createdAt: DateTimeFilter
  description: StringFilter
  durationInMinutes: IntFilter
  id: String
  imdbId: String
  movie: MovieRelationFilter
  movieId: String
  posterUrl: StringFilter
  releaseDate: DateTimeFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

type MovieKeywordCategory {
  _count: MovieKeywordCategoryCount
  id: String!
  name: String!
}

type MovieKeywordCategoryCount {
  movies(where: MovieWhereInput): Int!
}

input MovieKeywordCategoryCreateNestedManyWithoutMoviesInput {
  connect: [MovieKeywordCategoryWhereUniqueInput!]
  connectOrCreate: [MovieKeywordCategoryCreateOrConnectWithoutMoviesInput!]
  create: [MovieKeywordCategoryCreateWithoutMoviesInput!]
}

input MovieKeywordCategoryCreateOrConnectWithoutMoviesInput {
  create: MovieKeywordCategoryCreateWithoutMoviesInput!
  where: MovieKeywordCategoryWhereUniqueInput!
}

input MovieKeywordCategoryCreateWithoutMoviesInput {
  id: String
  name: String!
}

input MovieKeywordCategoryListRelationFilter {
  every: MovieKeywordCategoryWhereInput
  none: MovieKeywordCategoryWhereInput
  some: MovieKeywordCategoryWhereInput
}

input MovieKeywordCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieKeywordCategoryOrderByRelevanceFieldEnum {
  id
  name
}

input MovieKeywordCategoryOrderByRelevanceInput {
  fields: [MovieKeywordCategoryOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieKeywordCategoryOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieKeywordCategoryOrderByRelevanceInput
  id: SortOrder
  movies: MovieOrderByRelationAggregateInput
  name: SortOrder
}

enum MovieKeywordCategoryScalarFieldEnum {
  id
  name
}

input MovieKeywordCategoryScalarWhereInput {
  AND: [MovieKeywordCategoryScalarWhereInput!]
  NOT: [MovieKeywordCategoryScalarWhereInput!]
  OR: [MovieKeywordCategoryScalarWhereInput!]
  id: StringFilter
  name: StringFilter
}

input MovieKeywordCategoryUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input MovieKeywordCategoryUpdateManyWithWhereWithoutMoviesInput {
  data: MovieKeywordCategoryUpdateManyMutationInput!
  where: MovieKeywordCategoryScalarWhereInput!
}

input MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput {
  connect: [MovieKeywordCategoryWhereUniqueInput!]
  connectOrCreate: [MovieKeywordCategoryCreateOrConnectWithoutMoviesInput!]
  create: [MovieKeywordCategoryCreateWithoutMoviesInput!]
  delete: [MovieKeywordCategoryWhereUniqueInput!]
  deleteMany: [MovieKeywordCategoryScalarWhereInput!]
  disconnect: [MovieKeywordCategoryWhereUniqueInput!]
  set: [MovieKeywordCategoryWhereUniqueInput!]
  update: [MovieKeywordCategoryUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [MovieKeywordCategoryUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [MovieKeywordCategoryUpsertWithWhereUniqueWithoutMoviesInput!]
}

input MovieKeywordCategoryUpdateWithWhereUniqueWithoutMoviesInput {
  data: MovieKeywordCategoryUpdateWithoutMoviesInput!
  where: MovieKeywordCategoryWhereUniqueInput!
}

input MovieKeywordCategoryUpdateWithoutMoviesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input MovieKeywordCategoryUpsertWithWhereUniqueWithoutMoviesInput {
  create: MovieKeywordCategoryCreateWithoutMoviesInput!
  update: MovieKeywordCategoryUpdateWithoutMoviesInput!
  where: MovieKeywordCategoryWhereUniqueInput!
}

input MovieKeywordCategoryWhereInput {
  AND: [MovieKeywordCategoryWhereInput!]
  NOT: [MovieKeywordCategoryWhereInput!]
  OR: [MovieKeywordCategoryWhereInput!]
  id: StringFilter
  movies: MovieListRelationFilter
  name: StringFilter
}

input MovieKeywordCategoryWhereUniqueInput {
  AND: [MovieKeywordCategoryWhereInput!]
  NOT: [MovieKeywordCategoryWhereInput!]
  OR: [MovieKeywordCategoryWhereInput!]
  id: String
  movies: MovieListRelationFilter
  name: String
}

type MovieLikedByUser {
  createdAt: DateTimeISO!
  movie: Movie!
  movieId: String!
  user: MovifierAppUser!
  userId: String!
}

type MovieLikedByUserCountAggregate {
  _all: Int!
  createdAt: Int!
  movieId: Int!
  userId: Int!
}

input MovieLikedByUserCountOrderByAggregateInput {
  createdAt: SortOrder
  movieId: SortOrder
  userId: SortOrder
}

input MovieLikedByUserCreateInput {
  createdAt: DateTimeISO
  movie: MovieCreateNestedOneWithoutLikedByInput!
  user: MovifierAppUserCreateNestedOneWithoutLikedMoviesInput!
}

input MovieLikedByUserCreateManyInput {
  createdAt: DateTimeISO
  movieId: String!
  userId: String!
}

input MovieLikedByUserCreateManyMovieInput {
  createdAt: DateTimeISO
  userId: String!
}

input MovieLikedByUserCreateManyMovieInputEnvelope {
  data: [MovieLikedByUserCreateManyMovieInput!]!
  skipDuplicates: Boolean
}

input MovieLikedByUserCreateManyUserInput {
  createdAt: DateTimeISO
  movieId: String!
}

input MovieLikedByUserCreateManyUserInputEnvelope {
  data: [MovieLikedByUserCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MovieLikedByUserCreateNestedManyWithoutMovieInput {
  connect: [MovieLikedByUserWhereUniqueInput!]
  connectOrCreate: [MovieLikedByUserCreateOrConnectWithoutMovieInput!]
  create: [MovieLikedByUserCreateWithoutMovieInput!]
  createMany: MovieLikedByUserCreateManyMovieInputEnvelope
}

input MovieLikedByUserCreateNestedManyWithoutUserInput {
  connect: [MovieLikedByUserWhereUniqueInput!]
  connectOrCreate: [MovieLikedByUserCreateOrConnectWithoutUserInput!]
  create: [MovieLikedByUserCreateWithoutUserInput!]
  createMany: MovieLikedByUserCreateManyUserInputEnvelope
}

input MovieLikedByUserCreateOrConnectWithoutMovieInput {
  create: MovieLikedByUserCreateWithoutMovieInput!
  where: MovieLikedByUserWhereUniqueInput!
}

input MovieLikedByUserCreateOrConnectWithoutUserInput {
  create: MovieLikedByUserCreateWithoutUserInput!
  where: MovieLikedByUserWhereUniqueInput!
}

input MovieLikedByUserCreateWithoutMovieInput {
  createdAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutLikedMoviesInput!
}

input MovieLikedByUserCreateWithoutUserInput {
  createdAt: DateTimeISO
  movie: MovieCreateNestedOneWithoutLikedByInput!
}

type MovieLikedByUserGroupBy {
  _count: MovieLikedByUserCountAggregate
  _max: MovieLikedByUserMaxAggregate
  _min: MovieLikedByUserMinAggregate
  createdAt: DateTimeISO!
  movieId: String!
  userId: String!
}

input MovieLikedByUserListRelationFilter {
  every: MovieLikedByUserWhereInput
  none: MovieLikedByUserWhereInput
  some: MovieLikedByUserWhereInput
}

type MovieLikedByUserMaxAggregate {
  createdAt: DateTimeISO
  movieId: String
  userId: String
}

input MovieLikedByUserMaxOrderByAggregateInput {
  createdAt: SortOrder
  movieId: SortOrder
  userId: SortOrder
}

type MovieLikedByUserMinAggregate {
  createdAt: DateTimeISO
  movieId: String
  userId: String
}

input MovieLikedByUserMinOrderByAggregateInput {
  createdAt: SortOrder
  movieId: SortOrder
  userId: SortOrder
}

input MovieLikedByUserOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieLikedByUserOrderByRelevanceFieldEnum {
  movieId
  userId
}

input MovieLikedByUserOrderByRelevanceInput {
  fields: [MovieLikedByUserOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieLikedByUserOrderByWithAggregationInput {
  _count: MovieLikedByUserCountOrderByAggregateInput
  _max: MovieLikedByUserMaxOrderByAggregateInput
  _min: MovieLikedByUserMinOrderByAggregateInput
  createdAt: SortOrder
  movieId: SortOrder
  userId: SortOrder
}

input MovieLikedByUserOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieLikedByUserOrderByRelevanceInput
  createdAt: SortOrder
  movie: MovieOrderByWithRelationAndSearchRelevanceInput
  movieId: SortOrder
  user: MovifierAppUserOrderByWithRelationAndSearchRelevanceInput
  userId: SortOrder
}

enum MovieLikedByUserScalarFieldEnum {
  createdAt
  movieId
  userId
}

input MovieLikedByUserScalarWhereInput {
  AND: [MovieLikedByUserScalarWhereInput!]
  NOT: [MovieLikedByUserScalarWhereInput!]
  OR: [MovieLikedByUserScalarWhereInput!]
  createdAt: DateTimeFilter
  movieId: StringFilter
  userId: StringFilter
}

input MovieLikedByUserScalarWhereWithAggregatesInput {
  AND: [MovieLikedByUserScalarWhereWithAggregatesInput!]
  NOT: [MovieLikedByUserScalarWhereWithAggregatesInput!]
  OR: [MovieLikedByUserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  movieId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input MovieLikedByUserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutLikedByNestedInput
  user: MovifierAppUserUpdateOneRequiredWithoutLikedMoviesNestedInput
}

input MovieLikedByUserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input MovieLikedByUserUpdateManyWithWhereWithoutMovieInput {
  data: MovieLikedByUserUpdateManyMutationInput!
  where: MovieLikedByUserScalarWhereInput!
}

input MovieLikedByUserUpdateManyWithWhereWithoutUserInput {
  data: MovieLikedByUserUpdateManyMutationInput!
  where: MovieLikedByUserScalarWhereInput!
}

input MovieLikedByUserUpdateManyWithoutMovieNestedInput {
  connect: [MovieLikedByUserWhereUniqueInput!]
  connectOrCreate: [MovieLikedByUserCreateOrConnectWithoutMovieInput!]
  create: [MovieLikedByUserCreateWithoutMovieInput!]
  createMany: MovieLikedByUserCreateManyMovieInputEnvelope
  delete: [MovieLikedByUserWhereUniqueInput!]
  deleteMany: [MovieLikedByUserScalarWhereInput!]
  disconnect: [MovieLikedByUserWhereUniqueInput!]
  set: [MovieLikedByUserWhereUniqueInput!]
  update: [MovieLikedByUserUpdateWithWhereUniqueWithoutMovieInput!]
  updateMany: [MovieLikedByUserUpdateManyWithWhereWithoutMovieInput!]
  upsert: [MovieLikedByUserUpsertWithWhereUniqueWithoutMovieInput!]
}

input MovieLikedByUserUpdateManyWithoutUserNestedInput {
  connect: [MovieLikedByUserWhereUniqueInput!]
  connectOrCreate: [MovieLikedByUserCreateOrConnectWithoutUserInput!]
  create: [MovieLikedByUserCreateWithoutUserInput!]
  createMany: MovieLikedByUserCreateManyUserInputEnvelope
  delete: [MovieLikedByUserWhereUniqueInput!]
  deleteMany: [MovieLikedByUserScalarWhereInput!]
  disconnect: [MovieLikedByUserWhereUniqueInput!]
  set: [MovieLikedByUserWhereUniqueInput!]
  update: [MovieLikedByUserUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MovieLikedByUserUpdateManyWithWhereWithoutUserInput!]
  upsert: [MovieLikedByUserUpsertWithWhereUniqueWithoutUserInput!]
}

input MovieLikedByUserUpdateWithWhereUniqueWithoutMovieInput {
  data: MovieLikedByUserUpdateWithoutMovieInput!
  where: MovieLikedByUserWhereUniqueInput!
}

input MovieLikedByUserUpdateWithWhereUniqueWithoutUserInput {
  data: MovieLikedByUserUpdateWithoutUserInput!
  where: MovieLikedByUserWhereUniqueInput!
}

input MovieLikedByUserUpdateWithoutMovieInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutLikedMoviesNestedInput
}

input MovieLikedByUserUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutLikedByNestedInput
}

input MovieLikedByUserUpsertWithWhereUniqueWithoutMovieInput {
  create: MovieLikedByUserCreateWithoutMovieInput!
  update: MovieLikedByUserUpdateWithoutMovieInput!
  where: MovieLikedByUserWhereUniqueInput!
}

input MovieLikedByUserUpsertWithWhereUniqueWithoutUserInput {
  create: MovieLikedByUserCreateWithoutUserInput!
  update: MovieLikedByUserUpdateWithoutUserInput!
  where: MovieLikedByUserWhereUniqueInput!
}

input MovieLikedByUserUserIdMovieIdCompoundUniqueInput {
  movieId: String!
  userId: String!
}

input MovieLikedByUserWhereInput {
  AND: [MovieLikedByUserWhereInput!]
  NOT: [MovieLikedByUserWhereInput!]
  OR: [MovieLikedByUserWhereInput!]
  createdAt: DateTimeFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

input MovieLikedByUserWhereUniqueInput {
  AND: [MovieLikedByUserWhereInput!]
  NOT: [MovieLikedByUserWhereInput!]
  OR: [MovieLikedByUserWhereInput!]
  createdAt: DateTimeFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
  userId_movieId: MovieLikedByUserUserIdMovieIdCompoundUniqueInput
}

type MovieList {
  _count: MovieListCount
  comments(cursor: MovieListCommentWhereUniqueInput, distinct: [MovieListCommentScalarFieldEnum!], orderBy: [MovieListCommentOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieListCommentWhereInput): [MovieListComment!]!
  createdAt: DateTimeISO!
  description: String!
  id: String!
  likedBy(cursor: MovieListLikedByUserWhereUniqueInput, distinct: [MovieListLikedByUserScalarFieldEnum!], orderBy: [MovieListLikedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieListLikedByUserWhereInput): [MovieListLikedByUser!]!
  movieListAuthor: MovifierAppUser!
  movies(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
  name: String!
  stats(where: MovieListStatsWhereInput): MovieListStats
  tags: [String!]!
  updatedAt: DateTimeISO!
  userId: String!
}

type MovieListComment {
  content: String!
  createdAt: DateTimeISO!
  id: String!
  movieListId: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input MovieListCommentCreateManyMovieListInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
  userId: String!
}

input MovieListCommentCreateManyMovieListInputEnvelope {
  data: [MovieListCommentCreateManyMovieListInput!]!
  skipDuplicates: Boolean
}

input MovieListCommentCreateManyUserInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  movieListId: String!
  updatedAt: DateTimeISO
}

input MovieListCommentCreateManyUserInputEnvelope {
  data: [MovieListCommentCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MovieListCommentCreateNestedManyWithoutMovieListInput {
  connect: [MovieListCommentWhereUniqueInput!]
  connectOrCreate: [MovieListCommentCreateOrConnectWithoutMovieListInput!]
  create: [MovieListCommentCreateWithoutMovieListInput!]
  createMany: MovieListCommentCreateManyMovieListInputEnvelope
}

input MovieListCommentCreateNestedManyWithoutUserInput {
  connect: [MovieListCommentWhereUniqueInput!]
  connectOrCreate: [MovieListCommentCreateOrConnectWithoutUserInput!]
  create: [MovieListCommentCreateWithoutUserInput!]
  createMany: MovieListCommentCreateManyUserInputEnvelope
}

input MovieListCommentCreateOrConnectWithoutMovieListInput {
  create: MovieListCommentCreateWithoutMovieListInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentCreateOrConnectWithoutUserInput {
  create: MovieListCommentCreateWithoutUserInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentCreateWithoutMovieListInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutMovieListsCommentsInput!
}

input MovieListCommentCreateWithoutUserInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  movieList: MovieListCreateNestedOneWithoutCommentsInput!
  updatedAt: DateTimeISO
}

input MovieListCommentListRelationFilter {
  every: MovieListCommentWhereInput
  none: MovieListCommentWhereInput
  some: MovieListCommentWhereInput
}

input MovieListCommentOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieListCommentOrderByRelevanceFieldEnum {
  content
  id
  movieListId
  userId
}

input MovieListCommentOrderByRelevanceInput {
  fields: [MovieListCommentOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieListCommentOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieListCommentOrderByRelevanceInput
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  movieList: MovieListOrderByWithRelationAndSearchRelevanceInput
  movieListId: SortOrder
  updatedAt: SortOrder
  user: MovifierAppUserOrderByWithRelationAndSearchRelevanceInput
  userId: SortOrder
}

enum MovieListCommentScalarFieldEnum {
  content
  createdAt
  id
  movieListId
  updatedAt
  userId
}

input MovieListCommentScalarWhereInput {
  AND: [MovieListCommentScalarWhereInput!]
  NOT: [MovieListCommentScalarWhereInput!]
  OR: [MovieListCommentScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  movieListId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MovieListCommentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListCommentUpdateManyWithWhereWithoutMovieListInput {
  data: MovieListCommentUpdateManyMutationInput!
  where: MovieListCommentScalarWhereInput!
}

input MovieListCommentUpdateManyWithWhereWithoutUserInput {
  data: MovieListCommentUpdateManyMutationInput!
  where: MovieListCommentScalarWhereInput!
}

input MovieListCommentUpdateManyWithoutMovieListNestedInput {
  connect: [MovieListCommentWhereUniqueInput!]
  connectOrCreate: [MovieListCommentCreateOrConnectWithoutMovieListInput!]
  create: [MovieListCommentCreateWithoutMovieListInput!]
  createMany: MovieListCommentCreateManyMovieListInputEnvelope
  delete: [MovieListCommentWhereUniqueInput!]
  deleteMany: [MovieListCommentScalarWhereInput!]
  disconnect: [MovieListCommentWhereUniqueInput!]
  set: [MovieListCommentWhereUniqueInput!]
  update: [MovieListCommentUpdateWithWhereUniqueWithoutMovieListInput!]
  updateMany: [MovieListCommentUpdateManyWithWhereWithoutMovieListInput!]
  upsert: [MovieListCommentUpsertWithWhereUniqueWithoutMovieListInput!]
}

input MovieListCommentUpdateManyWithoutUserNestedInput {
  connect: [MovieListCommentWhereUniqueInput!]
  connectOrCreate: [MovieListCommentCreateOrConnectWithoutUserInput!]
  create: [MovieListCommentCreateWithoutUserInput!]
  createMany: MovieListCommentCreateManyUserInputEnvelope
  delete: [MovieListCommentWhereUniqueInput!]
  deleteMany: [MovieListCommentScalarWhereInput!]
  disconnect: [MovieListCommentWhereUniqueInput!]
  set: [MovieListCommentWhereUniqueInput!]
  update: [MovieListCommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MovieListCommentUpdateManyWithWhereWithoutUserInput!]
  upsert: [MovieListCommentUpsertWithWhereUniqueWithoutUserInput!]
}

input MovieListCommentUpdateWithWhereUniqueWithoutMovieListInput {
  data: MovieListCommentUpdateWithoutMovieListInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentUpdateWithWhereUniqueWithoutUserInput {
  data: MovieListCommentUpdateWithoutUserInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentUpdateWithoutMovieListInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutMovieListsCommentsNestedInput
}

input MovieListCommentUpdateWithoutUserInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieList: MovieListUpdateOneRequiredWithoutCommentsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListCommentUpsertWithWhereUniqueWithoutMovieListInput {
  create: MovieListCommentCreateWithoutMovieListInput!
  update: MovieListCommentUpdateWithoutMovieListInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentUpsertWithWhereUniqueWithoutUserInput {
  create: MovieListCommentCreateWithoutUserInput!
  update: MovieListCommentUpdateWithoutUserInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentWhereInput {
  AND: [MovieListCommentWhereInput!]
  NOT: [MovieListCommentWhereInput!]
  OR: [MovieListCommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  movieList: MovieListRelationFilter
  movieListId: StringFilter
  updatedAt: DateTimeFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

input MovieListCommentWhereUniqueInput {
  AND: [MovieListCommentWhereInput!]
  NOT: [MovieListCommentWhereInput!]
  OR: [MovieListCommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: String
  movieList: MovieListRelationFilter
  movieListId: StringFilter
  updatedAt: DateTimeFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

type MovieListCount {
  comments(where: MovieListCommentWhereInput): Int!
  likedBy(where: MovieListLikedByUserWhereInput): Int!
  movies(where: MovieWhereInput): Int!
}

type MovieListCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  name: Int!
  tags: Int!
  updatedAt: Int!
  userId: Int!
}

input MovieListCountOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  tags: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieListCreateInput {
  comments: MovieListCommentCreateNestedManyWithoutMovieListInput
  createdAt: DateTimeISO
  description: String!
  id: String
  likedBy: MovieListLikedByUserCreateNestedManyWithoutMovieListInput
  movieListAuthor: MovifierAppUserCreateNestedOneWithoutMovieListsInput!
  movies: MovieCreateNestedManyWithoutMovieListsInput
  name: String!
  stats: MovieListStatsCreateNestedOneWithoutMovieListInput
  tags: MovieListCreatetagsInput
  updatedAt: DateTimeISO
}

input MovieListCreateManyInput {
  createdAt: DateTimeISO
  description: String!
  id: String
  name: String!
  tags: MovieListCreatetagsInput
  updatedAt: DateTimeISO
  userId: String!
}

input MovieListCreateManyMovieListAuthorInput {
  createdAt: DateTimeISO
  description: String!
  id: String
  name: String!
  tags: MovieListCreatetagsInput
  updatedAt: DateTimeISO
}

input MovieListCreateManyMovieListAuthorInputEnvelope {
  data: [MovieListCreateManyMovieListAuthorInput!]!
  skipDuplicates: Boolean
}

input MovieListCreateNestedManyWithoutMovieListAuthorInput {
  connect: [MovieListWhereUniqueInput!]
  connectOrCreate: [MovieListCreateOrConnectWithoutMovieListAuthorInput!]
  create: [MovieListCreateWithoutMovieListAuthorInput!]
  createMany: MovieListCreateManyMovieListAuthorInputEnvelope
}

input MovieListCreateNestedManyWithoutMoviesInput {
  connect: [MovieListWhereUniqueInput!]
  connectOrCreate: [MovieListCreateOrConnectWithoutMoviesInput!]
  create: [MovieListCreateWithoutMoviesInput!]
}

input MovieListCreateNestedOneWithoutCommentsInput {
  connect: MovieListWhereUniqueInput
  connectOrCreate: MovieListCreateOrConnectWithoutCommentsInput
  create: MovieListCreateWithoutCommentsInput
}

input MovieListCreateNestedOneWithoutLikedByInput {
  connect: MovieListWhereUniqueInput
  connectOrCreate: MovieListCreateOrConnectWithoutLikedByInput
  create: MovieListCreateWithoutLikedByInput
}

input MovieListCreateOrConnectWithoutCommentsInput {
  create: MovieListCreateWithoutCommentsInput!
  where: MovieListWhereUniqueInput!
}

input MovieListCreateOrConnectWithoutLikedByInput {
  create: MovieListCreateWithoutLikedByInput!
  where: MovieListWhereUniqueInput!
}

input MovieListCreateOrConnectWithoutMovieListAuthorInput {
  create: MovieListCreateWithoutMovieListAuthorInput!
  where: MovieListWhereUniqueInput!
}

input MovieListCreateOrConnectWithoutMoviesInput {
  create: MovieListCreateWithoutMoviesInput!
  where: MovieListWhereUniqueInput!
}

input MovieListCreateWithoutCommentsInput {
  createdAt: DateTimeISO
  description: String!
  id: String
  likedBy: MovieListLikedByUserCreateNestedManyWithoutMovieListInput
  movieListAuthor: MovifierAppUserCreateNestedOneWithoutMovieListsInput!
  movies: MovieCreateNestedManyWithoutMovieListsInput
  name: String!
  stats: MovieListStatsCreateNestedOneWithoutMovieListInput
  tags: MovieListCreatetagsInput
  updatedAt: DateTimeISO
}

input MovieListCreateWithoutLikedByInput {
  comments: MovieListCommentCreateNestedManyWithoutMovieListInput
  createdAt: DateTimeISO
  description: String!
  id: String
  movieListAuthor: MovifierAppUserCreateNestedOneWithoutMovieListsInput!
  movies: MovieCreateNestedManyWithoutMovieListsInput
  name: String!
  stats: MovieListStatsCreateNestedOneWithoutMovieListInput
  tags: MovieListCreatetagsInput
  updatedAt: DateTimeISO
}

input MovieListCreateWithoutMovieListAuthorInput {
  comments: MovieListCommentCreateNestedManyWithoutMovieListInput
  createdAt: DateTimeISO
  description: String!
  id: String
  likedBy: MovieListLikedByUserCreateNestedManyWithoutMovieListInput
  movies: MovieCreateNestedManyWithoutMovieListsInput
  name: String!
  stats: MovieListStatsCreateNestedOneWithoutMovieListInput
  tags: MovieListCreatetagsInput
  updatedAt: DateTimeISO
}

input MovieListCreateWithoutMoviesInput {
  comments: MovieListCommentCreateNestedManyWithoutMovieListInput
  createdAt: DateTimeISO
  description: String!
  id: String
  likedBy: MovieListLikedByUserCreateNestedManyWithoutMovieListInput
  movieListAuthor: MovifierAppUserCreateNestedOneWithoutMovieListsInput!
  name: String!
  stats: MovieListStatsCreateNestedOneWithoutMovieListInput
  tags: MovieListCreatetagsInput
  updatedAt: DateTimeISO
}

input MovieListCreatetagsInput {
  set: [String!]!
}

type MovieListGroupBy {
  _count: MovieListCountAggregate
  _max: MovieListMaxAggregate
  _min: MovieListMinAggregate
  createdAt: DateTimeISO!
  description: String!
  id: String!
  name: String!
  tags: [String!]
  updatedAt: DateTimeISO!
  userId: String!
}

type MovieListLikedByUser {
  createdAt: DateTimeISO!
  movieListId: String!
  userId: String!
}

input MovieListLikedByUserCreateManyMovieListInput {
  createdAt: DateTimeISO
  userId: String!
}

input MovieListLikedByUserCreateManyMovieListInputEnvelope {
  data: [MovieListLikedByUserCreateManyMovieListInput!]!
  skipDuplicates: Boolean
}

input MovieListLikedByUserCreateManyUserInput {
  createdAt: DateTimeISO
  movieListId: String!
}

input MovieListLikedByUserCreateManyUserInputEnvelope {
  data: [MovieListLikedByUserCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MovieListLikedByUserCreateNestedManyWithoutMovieListInput {
  connect: [MovieListLikedByUserWhereUniqueInput!]
  connectOrCreate: [MovieListLikedByUserCreateOrConnectWithoutMovieListInput!]
  create: [MovieListLikedByUserCreateWithoutMovieListInput!]
  createMany: MovieListLikedByUserCreateManyMovieListInputEnvelope
}

input MovieListLikedByUserCreateNestedManyWithoutUserInput {
  connect: [MovieListLikedByUserWhereUniqueInput!]
  connectOrCreate: [MovieListLikedByUserCreateOrConnectWithoutUserInput!]
  create: [MovieListLikedByUserCreateWithoutUserInput!]
  createMany: MovieListLikedByUserCreateManyUserInputEnvelope
}

input MovieListLikedByUserCreateOrConnectWithoutMovieListInput {
  create: MovieListLikedByUserCreateWithoutMovieListInput!
  where: MovieListLikedByUserWhereUniqueInput!
}

input MovieListLikedByUserCreateOrConnectWithoutUserInput {
  create: MovieListLikedByUserCreateWithoutUserInput!
  where: MovieListLikedByUserWhereUniqueInput!
}

input MovieListLikedByUserCreateWithoutMovieListInput {
  createdAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutMovieListLikedByUserInput!
}

input MovieListLikedByUserCreateWithoutUserInput {
  createdAt: DateTimeISO
  movieList: MovieListCreateNestedOneWithoutLikedByInput!
}

input MovieListLikedByUserListRelationFilter {
  every: MovieListLikedByUserWhereInput
  none: MovieListLikedByUserWhereInput
  some: MovieListLikedByUserWhereInput
}

input MovieListLikedByUserOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieListLikedByUserOrderByRelevanceFieldEnum {
  movieListId
  userId
}

input MovieListLikedByUserOrderByRelevanceInput {
  fields: [MovieListLikedByUserOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieListLikedByUserOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieListLikedByUserOrderByRelevanceInput
  createdAt: SortOrder
  movieList: MovieListOrderByWithRelationAndSearchRelevanceInput
  movieListId: SortOrder
  user: MovifierAppUserOrderByWithRelationAndSearchRelevanceInput
  userId: SortOrder
}

enum MovieListLikedByUserScalarFieldEnum {
  createdAt
  movieListId
  userId
}

input MovieListLikedByUserScalarWhereInput {
  AND: [MovieListLikedByUserScalarWhereInput!]
  NOT: [MovieListLikedByUserScalarWhereInput!]
  OR: [MovieListLikedByUserScalarWhereInput!]
  createdAt: DateTimeFilter
  movieListId: StringFilter
  userId: StringFilter
}

input MovieListLikedByUserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input MovieListLikedByUserUpdateManyWithWhereWithoutMovieListInput {
  data: MovieListLikedByUserUpdateManyMutationInput!
  where: MovieListLikedByUserScalarWhereInput!
}

input MovieListLikedByUserUpdateManyWithWhereWithoutUserInput {
  data: MovieListLikedByUserUpdateManyMutationInput!
  where: MovieListLikedByUserScalarWhereInput!
}

input MovieListLikedByUserUpdateManyWithoutMovieListNestedInput {
  connect: [MovieListLikedByUserWhereUniqueInput!]
  connectOrCreate: [MovieListLikedByUserCreateOrConnectWithoutMovieListInput!]
  create: [MovieListLikedByUserCreateWithoutMovieListInput!]
  createMany: MovieListLikedByUserCreateManyMovieListInputEnvelope
  delete: [MovieListLikedByUserWhereUniqueInput!]
  deleteMany: [MovieListLikedByUserScalarWhereInput!]
  disconnect: [MovieListLikedByUserWhereUniqueInput!]
  set: [MovieListLikedByUserWhereUniqueInput!]
  update: [MovieListLikedByUserUpdateWithWhereUniqueWithoutMovieListInput!]
  updateMany: [MovieListLikedByUserUpdateManyWithWhereWithoutMovieListInput!]
  upsert: [MovieListLikedByUserUpsertWithWhereUniqueWithoutMovieListInput!]
}

input MovieListLikedByUserUpdateManyWithoutUserNestedInput {
  connect: [MovieListLikedByUserWhereUniqueInput!]
  connectOrCreate: [MovieListLikedByUserCreateOrConnectWithoutUserInput!]
  create: [MovieListLikedByUserCreateWithoutUserInput!]
  createMany: MovieListLikedByUserCreateManyUserInputEnvelope
  delete: [MovieListLikedByUserWhereUniqueInput!]
  deleteMany: [MovieListLikedByUserScalarWhereInput!]
  disconnect: [MovieListLikedByUserWhereUniqueInput!]
  set: [MovieListLikedByUserWhereUniqueInput!]
  update: [MovieListLikedByUserUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MovieListLikedByUserUpdateManyWithWhereWithoutUserInput!]
  upsert: [MovieListLikedByUserUpsertWithWhereUniqueWithoutUserInput!]
}

input MovieListLikedByUserUpdateWithWhereUniqueWithoutMovieListInput {
  data: MovieListLikedByUserUpdateWithoutMovieListInput!
  where: MovieListLikedByUserWhereUniqueInput!
}

input MovieListLikedByUserUpdateWithWhereUniqueWithoutUserInput {
  data: MovieListLikedByUserUpdateWithoutUserInput!
  where: MovieListLikedByUserWhereUniqueInput!
}

input MovieListLikedByUserUpdateWithoutMovieListInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutMovieListLikedByUserNestedInput
}

input MovieListLikedByUserUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  movieList: MovieListUpdateOneRequiredWithoutLikedByNestedInput
}

input MovieListLikedByUserUpsertWithWhereUniqueWithoutMovieListInput {
  create: MovieListLikedByUserCreateWithoutMovieListInput!
  update: MovieListLikedByUserUpdateWithoutMovieListInput!
  where: MovieListLikedByUserWhereUniqueInput!
}

input MovieListLikedByUserUpsertWithWhereUniqueWithoutUserInput {
  create: MovieListLikedByUserCreateWithoutUserInput!
  update: MovieListLikedByUserUpdateWithoutUserInput!
  where: MovieListLikedByUserWhereUniqueInput!
}

input MovieListLikedByUserUserIdMovieListIdCompoundUniqueInput {
  movieListId: String!
  userId: String!
}

input MovieListLikedByUserWhereInput {
  AND: [MovieListLikedByUserWhereInput!]
  NOT: [MovieListLikedByUserWhereInput!]
  OR: [MovieListLikedByUserWhereInput!]
  createdAt: DateTimeFilter
  movieList: MovieListRelationFilter
  movieListId: StringFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

input MovieListLikedByUserWhereUniqueInput {
  AND: [MovieListLikedByUserWhereInput!]
  NOT: [MovieListLikedByUserWhereInput!]
  OR: [MovieListLikedByUserWhereInput!]
  createdAt: DateTimeFilter
  movieList: MovieListRelationFilter
  movieListId: StringFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
  userId_movieListId: MovieListLikedByUserUserIdMovieListIdCompoundUniqueInput
}

input MovieListListRelationFilter {
  every: MovieListWhereInput
  none: MovieListWhereInput
  some: MovieListWhereInput
}

type MovieListMaxAggregate {
  createdAt: DateTimeISO
  description: String
  id: String
  name: String
  updatedAt: DateTimeISO
  userId: String
}

input MovieListMaxOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type MovieListMinAggregate {
  createdAt: DateTimeISO
  description: String
  id: String
  name: String
  updatedAt: DateTimeISO
  userId: String
}

input MovieListMinOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieListOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieListOrderByRelevanceFieldEnum {
  description
  id
  name
  tags
  userId
}

input MovieListOrderByRelevanceInput {
  fields: [MovieListOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieListOrderByWithAggregationInput {
  _count: MovieListCountOrderByAggregateInput
  _max: MovieListMaxOrderByAggregateInput
  _min: MovieListMinOrderByAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  tags: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieListOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieListOrderByRelevanceInput
  comments: MovieListCommentOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  likedBy: MovieListLikedByUserOrderByRelationAggregateInput
  movieListAuthor: MovifierAppUserOrderByWithRelationAndSearchRelevanceInput
  movies: MovieOrderByRelationAggregateInput
  name: SortOrder
  stats: MovieListStatsOrderByWithRelationAndSearchRelevanceInput
  tags: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieListRelationFilter {
  is: MovieListWhereInput
  isNot: MovieListWhereInput
}

enum MovieListScalarFieldEnum {
  createdAt
  description
  id
  name
  tags
  updatedAt
  userId
}

input MovieListScalarWhereInput {
  AND: [MovieListScalarWhereInput!]
  NOT: [MovieListScalarWhereInput!]
  OR: [MovieListScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  name: StringFilter
  tags: StringNullableListFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MovieListScalarWhereWithAggregatesInput {
  AND: [MovieListScalarWhereWithAggregatesInput!]
  NOT: [MovieListScalarWhereWithAggregatesInput!]
  OR: [MovieListScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  description: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  tags: StringNullableListFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input MovieListSearchCriteriaInput {
  search: String
}

type MovieListStats {
  createdAt: DateTimeISO!
  id: String!
  likes: Int!
  movieListId: String!
  updatedAt: DateTimeISO!
  views: Int!
}

input MovieListStatsCreateNestedOneWithoutMovieListInput {
  connect: MovieListStatsWhereUniqueInput
  connectOrCreate: MovieListStatsCreateOrConnectWithoutMovieListInput
  create: MovieListStatsCreateWithoutMovieListInput
}

input MovieListStatsCreateOrConnectWithoutMovieListInput {
  create: MovieListStatsCreateWithoutMovieListInput!
  where: MovieListStatsWhereUniqueInput!
}

input MovieListStatsCreateWithoutMovieListInput {
  createdAt: DateTimeISO
  id: String
  likes: Int!
  updatedAt: DateTimeISO
  views: Int!
}

input MovieListStatsNullableRelationFilter {
  is: MovieListStatsWhereInput
  isNot: MovieListStatsWhereInput
}

enum MovieListStatsOrderByRelevanceFieldEnum {
  id
  movieListId
}

input MovieListStatsOrderByRelevanceInput {
  fields: [MovieListStatsOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieListStatsOrderByWithRelationAndSearchRelevanceInput {
  MovieList: MovieListOrderByWithRelationAndSearchRelevanceInput
  _relevance: MovieListStatsOrderByRelevanceInput
  createdAt: SortOrder
  id: SortOrder
  likes: SortOrder
  movieListId: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

input MovieListStatsUpdateOneWithoutMovieListNestedInput {
  connect: MovieListStatsWhereUniqueInput
  connectOrCreate: MovieListStatsCreateOrConnectWithoutMovieListInput
  create: MovieListStatsCreateWithoutMovieListInput
  delete: MovieListStatsWhereInput
  disconnect: MovieListStatsWhereInput
  update: MovieListStatsUpdateToOneWithWhereWithoutMovieListInput
  upsert: MovieListStatsUpsertWithoutMovieListInput
}

input MovieListStatsUpdateToOneWithWhereWithoutMovieListInput {
  data: MovieListStatsUpdateWithoutMovieListInput!
  where: MovieListStatsWhereInput
}

input MovieListStatsUpdateWithoutMovieListInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input MovieListStatsUpsertWithoutMovieListInput {
  create: MovieListStatsCreateWithoutMovieListInput!
  update: MovieListStatsUpdateWithoutMovieListInput!
  where: MovieListStatsWhereInput
}

input MovieListStatsWhereInput {
  AND: [MovieListStatsWhereInput!]
  MovieList: MovieListRelationFilter
  NOT: [MovieListStatsWhereInput!]
  OR: [MovieListStatsWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  likes: IntFilter
  movieListId: StringFilter
  updatedAt: DateTimeFilter
  views: IntFilter
}

input MovieListStatsWhereUniqueInput {
  AND: [MovieListStatsWhereInput!]
  MovieList: MovieListRelationFilter
  NOT: [MovieListStatsWhereInput!]
  OR: [MovieListStatsWhereInput!]
  createdAt: DateTimeFilter
  id: String
  likes: IntFilter
  movieListId: String
  updatedAt: DateTimeFilter
  views: IntFilter
}

input MovieListUpdateInput {
  comments: MovieListCommentUpdateManyWithoutMovieListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likedBy: MovieListLikedByUserUpdateManyWithoutMovieListNestedInput
  movieListAuthor: MovifierAppUserUpdateOneRequiredWithoutMovieListsNestedInput
  movies: MovieUpdateManyWithoutMovieListsNestedInput
  name: StringFieldUpdateOperationsInput
  stats: MovieListStatsUpdateOneWithoutMovieListNestedInput
  tags: MovieListUpdatetagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  tags: MovieListUpdatetagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpdateManyWithWhereWithoutMovieListAuthorInput {
  data: MovieListUpdateManyMutationInput!
  where: MovieListScalarWhereInput!
}

input MovieListUpdateManyWithWhereWithoutMoviesInput {
  data: MovieListUpdateManyMutationInput!
  where: MovieListScalarWhereInput!
}

input MovieListUpdateManyWithoutMovieListAuthorNestedInput {
  connect: [MovieListWhereUniqueInput!]
  connectOrCreate: [MovieListCreateOrConnectWithoutMovieListAuthorInput!]
  create: [MovieListCreateWithoutMovieListAuthorInput!]
  createMany: MovieListCreateManyMovieListAuthorInputEnvelope
  delete: [MovieListWhereUniqueInput!]
  deleteMany: [MovieListScalarWhereInput!]
  disconnect: [MovieListWhereUniqueInput!]
  set: [MovieListWhereUniqueInput!]
  update: [MovieListUpdateWithWhereUniqueWithoutMovieListAuthorInput!]
  updateMany: [MovieListUpdateManyWithWhereWithoutMovieListAuthorInput!]
  upsert: [MovieListUpsertWithWhereUniqueWithoutMovieListAuthorInput!]
}

input MovieListUpdateManyWithoutMoviesNestedInput {
  connect: [MovieListWhereUniqueInput!]
  connectOrCreate: [MovieListCreateOrConnectWithoutMoviesInput!]
  create: [MovieListCreateWithoutMoviesInput!]
  delete: [MovieListWhereUniqueInput!]
  deleteMany: [MovieListScalarWhereInput!]
  disconnect: [MovieListWhereUniqueInput!]
  set: [MovieListWhereUniqueInput!]
  update: [MovieListUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [MovieListUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [MovieListUpsertWithWhereUniqueWithoutMoviesInput!]
}

input MovieListUpdateOneRequiredWithoutCommentsNestedInput {
  connect: MovieListWhereUniqueInput
  connectOrCreate: MovieListCreateOrConnectWithoutCommentsInput
  create: MovieListCreateWithoutCommentsInput
  update: MovieListUpdateToOneWithWhereWithoutCommentsInput
  upsert: MovieListUpsertWithoutCommentsInput
}

input MovieListUpdateOneRequiredWithoutLikedByNestedInput {
  connect: MovieListWhereUniqueInput
  connectOrCreate: MovieListCreateOrConnectWithoutLikedByInput
  create: MovieListCreateWithoutLikedByInput
  update: MovieListUpdateToOneWithWhereWithoutLikedByInput
  upsert: MovieListUpsertWithoutLikedByInput
}

input MovieListUpdateToOneWithWhereWithoutCommentsInput {
  data: MovieListUpdateWithoutCommentsInput!
  where: MovieListWhereInput
}

input MovieListUpdateToOneWithWhereWithoutLikedByInput {
  data: MovieListUpdateWithoutLikedByInput!
  where: MovieListWhereInput
}

input MovieListUpdateWithWhereUniqueWithoutMovieListAuthorInput {
  data: MovieListUpdateWithoutMovieListAuthorInput!
  where: MovieListWhereUniqueInput!
}

input MovieListUpdateWithWhereUniqueWithoutMoviesInput {
  data: MovieListUpdateWithoutMoviesInput!
  where: MovieListWhereUniqueInput!
}

input MovieListUpdateWithoutCommentsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likedBy: MovieListLikedByUserUpdateManyWithoutMovieListNestedInput
  movieListAuthor: MovifierAppUserUpdateOneRequiredWithoutMovieListsNestedInput
  movies: MovieUpdateManyWithoutMovieListsNestedInput
  name: StringFieldUpdateOperationsInput
  stats: MovieListStatsUpdateOneWithoutMovieListNestedInput
  tags: MovieListUpdatetagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpdateWithoutLikedByInput {
  comments: MovieListCommentUpdateManyWithoutMovieListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieListAuthor: MovifierAppUserUpdateOneRequiredWithoutMovieListsNestedInput
  movies: MovieUpdateManyWithoutMovieListsNestedInput
  name: StringFieldUpdateOperationsInput
  stats: MovieListStatsUpdateOneWithoutMovieListNestedInput
  tags: MovieListUpdatetagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpdateWithoutMovieListAuthorInput {
  comments: MovieListCommentUpdateManyWithoutMovieListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likedBy: MovieListLikedByUserUpdateManyWithoutMovieListNestedInput
  movies: MovieUpdateManyWithoutMovieListsNestedInput
  name: StringFieldUpdateOperationsInput
  stats: MovieListStatsUpdateOneWithoutMovieListNestedInput
  tags: MovieListUpdatetagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpdateWithoutMoviesInput {
  comments: MovieListCommentUpdateManyWithoutMovieListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likedBy: MovieListLikedByUserUpdateManyWithoutMovieListNestedInput
  movieListAuthor: MovifierAppUserUpdateOneRequiredWithoutMovieListsNestedInput
  name: StringFieldUpdateOperationsInput
  stats: MovieListStatsUpdateOneWithoutMovieListNestedInput
  tags: MovieListUpdatetagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpdatetagsInput {
  push: [String!]
  set: [String!]
}

input MovieListUpsertWithWhereUniqueWithoutMovieListAuthorInput {
  create: MovieListCreateWithoutMovieListAuthorInput!
  update: MovieListUpdateWithoutMovieListAuthorInput!
  where: MovieListWhereUniqueInput!
}

input MovieListUpsertWithWhereUniqueWithoutMoviesInput {
  create: MovieListCreateWithoutMoviesInput!
  update: MovieListUpdateWithoutMoviesInput!
  where: MovieListWhereUniqueInput!
}

input MovieListUpsertWithoutCommentsInput {
  create: MovieListCreateWithoutCommentsInput!
  update: MovieListUpdateWithoutCommentsInput!
  where: MovieListWhereInput
}

input MovieListUpsertWithoutLikedByInput {
  create: MovieListCreateWithoutLikedByInput!
  update: MovieListUpdateWithoutLikedByInput!
  where: MovieListWhereInput
}

input MovieListWhereInput {
  AND: [MovieListWhereInput!]
  NOT: [MovieListWhereInput!]
  OR: [MovieListWhereInput!]
  comments: MovieListCommentListRelationFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  likedBy: MovieListLikedByUserListRelationFilter
  movieListAuthor: MovifierAppUserRelationFilter
  movies: MovieListRelationFilter
  name: StringFilter
  stats: MovieListStatsNullableRelationFilter
  tags: StringNullableListFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MovieListWhereUniqueInput {
  AND: [MovieListWhereInput!]
  NOT: [MovieListWhereInput!]
  OR: [MovieListWhereInput!]
  comments: MovieListCommentListRelationFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: String
  likedBy: MovieListLikedByUserListRelationFilter
  movieListAuthor: MovifierAppUserRelationFilter
  movies: MovieListRelationFilter
  name: StringFilter
  stats: MovieListStatsNullableRelationFilter
  tags: StringNullableListFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

type MovieMaxAggregate {
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input MovieMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type MovieMinAggregate {
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input MovieMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input MovieOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieOrderByRelevanceFieldEnum {
  id
}

input MovieOrderByRelevanceInput {
  fields: [MovieOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieOrderByWithAggregationInput {
  _count: MovieCountOrderByAggregateInput
  _max: MovieMaxOrderByAggregateInput
  _min: MovieMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input MovieOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieOrderByRelevanceInput
  createdAt: SortOrder
  crewMembers: MovieCrewMemberOnMovieOrderByRelationAggregateInput
  genres: GenreOrderByRelationAggregateInput
  id: SortOrder
  inWatchlistByUsers: UserMovieWatchlistOrderByRelationAggregateInput
  keywordCategories: MovieKeywordCategoryOrderByRelationAggregateInput
  likedBy: MovieLikedByUserOrderByRelationAggregateInput
  movieInfo: MovieInfoOrderByWithRelationAndSearchRelevanceInput
  movieLists: MovieListOrderByRelationAggregateInput
  movieStats: MovieStatsOrderByWithRelationAndSearchRelevanceInput
  ratedBy: MovieRatingOrderByRelationAggregateInput
  spokenLanguages: MovieSpokenLanguageOrderByRelationAggregateInput
  studios: MovieStudioOrderByRelationAggregateInput
  updatedAt: SortOrder
  watchedBy: MovieWatchedByUserOrderByRelationAggregateInput
}

type MovieRating {
  createdAt: DateTimeISO!
  id: String!
  movie: Movie!
  movieId: String!
  rating: Int!
  review(where: MovieReviewWhereInput): MovieReview
  updatedAt: DateTimeISO!
  user: MovifierAppUser!
  userId: String!
}

type MovieRatingAvgAggregate {
  rating: Float
}

input MovieRatingAvgOrderByAggregateInput {
  rating: SortOrder
}

type MovieRatingCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  movieId: Int!
  rating: Int!
  updatedAt: Int!
  userId: Int!
}

input MovieRatingCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  movieId: SortOrder
  rating: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieRatingCreateInput {
  createdAt: DateTimeISO
  id: String
  movie: MovieCreateNestedOneWithoutRatedByInput!
  rating: Int!
  review: MovieReviewCreateNestedOneWithoutRatingInput
  updatedAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutRatedMoviesInput!
}

input MovieRatingCreateManyInput {
  createdAt: DateTimeISO
  id: String
  movieId: String!
  rating: Int!
  updatedAt: DateTimeISO
  userId: String!
}

input MovieRatingCreateManyMovieInput {
  createdAt: DateTimeISO
  id: String
  rating: Int!
  updatedAt: DateTimeISO
  userId: String!
}

input MovieRatingCreateManyMovieInputEnvelope {
  data: [MovieRatingCreateManyMovieInput!]!
  skipDuplicates: Boolean
}

input MovieRatingCreateManyUserInput {
  createdAt: DateTimeISO
  id: String
  movieId: String!
  rating: Int!
  updatedAt: DateTimeISO
}

input MovieRatingCreateManyUserInputEnvelope {
  data: [MovieRatingCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MovieRatingCreateNestedManyWithoutMovieInput {
  connect: [MovieRatingWhereUniqueInput!]
  connectOrCreate: [MovieRatingCreateOrConnectWithoutMovieInput!]
  create: [MovieRatingCreateWithoutMovieInput!]
  createMany: MovieRatingCreateManyMovieInputEnvelope
}

input MovieRatingCreateNestedManyWithoutUserInput {
  connect: [MovieRatingWhereUniqueInput!]
  connectOrCreate: [MovieRatingCreateOrConnectWithoutUserInput!]
  create: [MovieRatingCreateWithoutUserInput!]
  createMany: MovieRatingCreateManyUserInputEnvelope
}

input MovieRatingCreateNestedOneWithoutReviewInput {
  connect: MovieRatingWhereUniqueInput
  connectOrCreate: MovieRatingCreateOrConnectWithoutReviewInput
  create: MovieRatingCreateWithoutReviewInput
}

input MovieRatingCreateOrConnectWithoutMovieInput {
  create: MovieRatingCreateWithoutMovieInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingCreateOrConnectWithoutReviewInput {
  create: MovieRatingCreateWithoutReviewInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingCreateOrConnectWithoutUserInput {
  create: MovieRatingCreateWithoutUserInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingCreateWithoutMovieInput {
  createdAt: DateTimeISO
  id: String
  rating: Int!
  review: MovieReviewCreateNestedOneWithoutRatingInput
  updatedAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutRatedMoviesInput!
}

input MovieRatingCreateWithoutReviewInput {
  createdAt: DateTimeISO
  id: String
  movie: MovieCreateNestedOneWithoutRatedByInput!
  rating: Int!
  updatedAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutRatedMoviesInput!
}

input MovieRatingCreateWithoutUserInput {
  createdAt: DateTimeISO
  id: String
  movie: MovieCreateNestedOneWithoutRatedByInput!
  rating: Int!
  review: MovieReviewCreateNestedOneWithoutRatingInput
  updatedAt: DateTimeISO
}

type MovieRatingGroupBy {
  _avg: MovieRatingAvgAggregate
  _count: MovieRatingCountAggregate
  _max: MovieRatingMaxAggregate
  _min: MovieRatingMinAggregate
  _sum: MovieRatingSumAggregate
  createdAt: DateTimeISO!
  id: String!
  movieId: String!
  rating: Int!
  updatedAt: DateTimeISO!
  userId: String!
}

input MovieRatingListRelationFilter {
  every: MovieRatingWhereInput
  none: MovieRatingWhereInput
  some: MovieRatingWhereInput
}

type MovieRatingMaxAggregate {
  createdAt: DateTimeISO
  id: String
  movieId: String
  rating: Int
  updatedAt: DateTimeISO
  userId: String
}

input MovieRatingMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  movieId: SortOrder
  rating: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type MovieRatingMinAggregate {
  createdAt: DateTimeISO
  id: String
  movieId: String
  rating: Int
  updatedAt: DateTimeISO
  userId: String
}

input MovieRatingMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  movieId: SortOrder
  rating: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieRatingOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieRatingOrderByRelevanceFieldEnum {
  id
  movieId
  userId
}

input MovieRatingOrderByRelevanceInput {
  fields: [MovieRatingOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieRatingOrderByWithAggregationInput {
  _avg: MovieRatingAvgOrderByAggregateInput
  _count: MovieRatingCountOrderByAggregateInput
  _max: MovieRatingMaxOrderByAggregateInput
  _min: MovieRatingMinOrderByAggregateInput
  _sum: MovieRatingSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  movieId: SortOrder
  rating: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieRatingOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieRatingOrderByRelevanceInput
  createdAt: SortOrder
  id: SortOrder
  movie: MovieOrderByWithRelationAndSearchRelevanceInput
  movieId: SortOrder
  rating: SortOrder
  review: MovieReviewOrderByWithRelationAndSearchRelevanceInput
  updatedAt: SortOrder
  user: MovifierAppUserOrderByWithRelationAndSearchRelevanceInput
  userId: SortOrder
}

input MovieRatingRelationFilter {
  is: MovieRatingWhereInput
  isNot: MovieRatingWhereInput
}

enum MovieRatingScalarFieldEnum {
  createdAt
  id
  movieId
  rating
  updatedAt
  userId
}

input MovieRatingScalarWhereInput {
  AND: [MovieRatingScalarWhereInput!]
  NOT: [MovieRatingScalarWhereInput!]
  OR: [MovieRatingScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  movieId: StringFilter
  rating: IntFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MovieRatingScalarWhereWithAggregatesInput {
  AND: [MovieRatingScalarWhereWithAggregatesInput!]
  NOT: [MovieRatingScalarWhereWithAggregatesInput!]
  OR: [MovieRatingScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  movieId: StringWithAggregatesFilter
  rating: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type MovieRatingSumAggregate {
  rating: Int
}

input MovieRatingSumOrderByAggregateInput {
  rating: SortOrder
}

input MovieRatingUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutRatedByNestedInput
  rating: IntFieldUpdateOperationsInput
  review: MovieReviewUpdateOneWithoutRatingNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutRatedMoviesNestedInput
}

input MovieRatingUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieRatingUpdateManyWithWhereWithoutMovieInput {
  data: MovieRatingUpdateManyMutationInput!
  where: MovieRatingScalarWhereInput!
}

input MovieRatingUpdateManyWithWhereWithoutUserInput {
  data: MovieRatingUpdateManyMutationInput!
  where: MovieRatingScalarWhereInput!
}

input MovieRatingUpdateManyWithoutMovieNestedInput {
  connect: [MovieRatingWhereUniqueInput!]
  connectOrCreate: [MovieRatingCreateOrConnectWithoutMovieInput!]
  create: [MovieRatingCreateWithoutMovieInput!]
  createMany: MovieRatingCreateManyMovieInputEnvelope
  delete: [MovieRatingWhereUniqueInput!]
  deleteMany: [MovieRatingScalarWhereInput!]
  disconnect: [MovieRatingWhereUniqueInput!]
  set: [MovieRatingWhereUniqueInput!]
  update: [MovieRatingUpdateWithWhereUniqueWithoutMovieInput!]
  updateMany: [MovieRatingUpdateManyWithWhereWithoutMovieInput!]
  upsert: [MovieRatingUpsertWithWhereUniqueWithoutMovieInput!]
}

input MovieRatingUpdateManyWithoutUserNestedInput {
  connect: [MovieRatingWhereUniqueInput!]
  connectOrCreate: [MovieRatingCreateOrConnectWithoutUserInput!]
  create: [MovieRatingCreateWithoutUserInput!]
  createMany: MovieRatingCreateManyUserInputEnvelope
  delete: [MovieRatingWhereUniqueInput!]
  deleteMany: [MovieRatingScalarWhereInput!]
  disconnect: [MovieRatingWhereUniqueInput!]
  set: [MovieRatingWhereUniqueInput!]
  update: [MovieRatingUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MovieRatingUpdateManyWithWhereWithoutUserInput!]
  upsert: [MovieRatingUpsertWithWhereUniqueWithoutUserInput!]
}

input MovieRatingUpdateOneRequiredWithoutReviewNestedInput {
  connect: MovieRatingWhereUniqueInput
  connectOrCreate: MovieRatingCreateOrConnectWithoutReviewInput
  create: MovieRatingCreateWithoutReviewInput
  update: MovieRatingUpdateToOneWithWhereWithoutReviewInput
  upsert: MovieRatingUpsertWithoutReviewInput
}

input MovieRatingUpdateToOneWithWhereWithoutReviewInput {
  data: MovieRatingUpdateWithoutReviewInput!
  where: MovieRatingWhereInput
}

input MovieRatingUpdateWithWhereUniqueWithoutMovieInput {
  data: MovieRatingUpdateWithoutMovieInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingUpdateWithWhereUniqueWithoutUserInput {
  data: MovieRatingUpdateWithoutUserInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingUpdateWithoutMovieInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  review: MovieReviewUpdateOneWithoutRatingNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutRatedMoviesNestedInput
}

input MovieRatingUpdateWithoutReviewInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutRatedByNestedInput
  rating: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutRatedMoviesNestedInput
}

input MovieRatingUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutRatedByNestedInput
  rating: IntFieldUpdateOperationsInput
  review: MovieReviewUpdateOneWithoutRatingNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieRatingUpsertWithWhereUniqueWithoutMovieInput {
  create: MovieRatingCreateWithoutMovieInput!
  update: MovieRatingUpdateWithoutMovieInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingUpsertWithWhereUniqueWithoutUserInput {
  create: MovieRatingCreateWithoutUserInput!
  update: MovieRatingUpdateWithoutUserInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingUpsertWithoutReviewInput {
  create: MovieRatingCreateWithoutReviewInput!
  update: MovieRatingUpdateWithoutReviewInput!
  where: MovieRatingWhereInput
}

input MovieRatingUserIdMovieIdCompoundUniqueInput {
  movieId: String!
  userId: String!
}

input MovieRatingWhereInput {
  AND: [MovieRatingWhereInput!]
  NOT: [MovieRatingWhereInput!]
  OR: [MovieRatingWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  rating: IntFilter
  review: MovieReviewNullableRelationFilter
  updatedAt: DateTimeFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

input MovieRatingWhereUniqueInput {
  AND: [MovieRatingWhereInput!]
  NOT: [MovieRatingWhereInput!]
  OR: [MovieRatingWhereInput!]
  createdAt: DateTimeFilter
  id: String
  movie: MovieRelationFilter
  movieId: StringFilter
  rating: IntFilter
  review: MovieReviewNullableRelationFilter
  updatedAt: DateTimeFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
  userId_movieId: MovieRatingUserIdMovieIdCompoundUniqueInput
}

input MovieRelationFilter {
  is: MovieWhereInput
  isNot: MovieWhereInput
}

type MovieReview {
  _count: MovieReviewCount
  content: String!
  createdAt: DateTimeISO!
  id: String!
  likedBy(cursor: MovieReviewLikedByUserWhereUniqueInput, distinct: [MovieReviewLikedByUserScalarFieldEnum!], orderBy: [MovieReviewLikedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieReviewLikedByUserWhereInput): [MovieReviewLikedByUser!]!
  rating: MovieRating!
  ratingId: String!
  updatedAt: DateTimeISO!
}

type MovieReviewCount {
  likedBy(where: MovieReviewLikedByUserWhereInput): Int!
}

type MovieReviewCountAggregate {
  _all: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  ratingId: Int!
  updatedAt: Int!
}

input MovieReviewCountOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ratingId: SortOrder
  updatedAt: SortOrder
}

input MovieReviewCreateInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  likedBy: MovieReviewLikedByUserCreateNestedManyWithoutMovieReviewInput
  rating: MovieRatingCreateNestedOneWithoutReviewInput!
  updatedAt: DateTimeISO
}

input MovieReviewCreateManyInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  ratingId: String!
  updatedAt: DateTimeISO
}

input MovieReviewCreateNestedOneWithoutLikedByInput {
  connect: MovieReviewWhereUniqueInput
  connectOrCreate: MovieReviewCreateOrConnectWithoutLikedByInput
  create: MovieReviewCreateWithoutLikedByInput
}

input MovieReviewCreateNestedOneWithoutRatingInput {
  connect: MovieReviewWhereUniqueInput
  connectOrCreate: MovieReviewCreateOrConnectWithoutRatingInput
  create: MovieReviewCreateWithoutRatingInput
}

input MovieReviewCreateOrConnectWithoutLikedByInput {
  create: MovieReviewCreateWithoutLikedByInput!
  where: MovieReviewWhereUniqueInput!
}

input MovieReviewCreateOrConnectWithoutRatingInput {
  create: MovieReviewCreateWithoutRatingInput!
  where: MovieReviewWhereUniqueInput!
}

input MovieReviewCreateWithoutLikedByInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  rating: MovieRatingCreateNestedOneWithoutReviewInput!
  updatedAt: DateTimeISO
}

input MovieReviewCreateWithoutRatingInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  likedBy: MovieReviewLikedByUserCreateNestedManyWithoutMovieReviewInput
  updatedAt: DateTimeISO
}

type MovieReviewGroupBy {
  _count: MovieReviewCountAggregate
  _max: MovieReviewMaxAggregate
  _min: MovieReviewMinAggregate
  content: String!
  createdAt: DateTimeISO!
  id: String!
  ratingId: String!
  updatedAt: DateTimeISO!
}

type MovieReviewLikedByUser {
  createdAt: DateTimeISO!
  movieReview: MovieReview!
  movieReviewId: String!
  user: MovifierAppUser!
  userId: String!
}

type MovieReviewLikedByUserCountAggregate {
  _all: Int!
  createdAt: Int!
  movieReviewId: Int!
  userId: Int!
}

input MovieReviewLikedByUserCountOrderByAggregateInput {
  createdAt: SortOrder
  movieReviewId: SortOrder
  userId: SortOrder
}

input MovieReviewLikedByUserCreateInput {
  createdAt: DateTimeISO
  movieReview: MovieReviewCreateNestedOneWithoutLikedByInput!
  user: MovifierAppUserCreateNestedOneWithoutLikedMovieReviewsInput!
}

input MovieReviewLikedByUserCreateManyInput {
  createdAt: DateTimeISO
  movieReviewId: String!
  userId: String!
}

input MovieReviewLikedByUserCreateManyMovieReviewInput {
  createdAt: DateTimeISO
  userId: String!
}

input MovieReviewLikedByUserCreateManyMovieReviewInputEnvelope {
  data: [MovieReviewLikedByUserCreateManyMovieReviewInput!]!
  skipDuplicates: Boolean
}

input MovieReviewLikedByUserCreateManyUserInput {
  createdAt: DateTimeISO
  movieReviewId: String!
}

input MovieReviewLikedByUserCreateManyUserInputEnvelope {
  data: [MovieReviewLikedByUserCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MovieReviewLikedByUserCreateNestedManyWithoutMovieReviewInput {
  connect: [MovieReviewLikedByUserWhereUniqueInput!]
  connectOrCreate: [MovieReviewLikedByUserCreateOrConnectWithoutMovieReviewInput!]
  create: [MovieReviewLikedByUserCreateWithoutMovieReviewInput!]
  createMany: MovieReviewLikedByUserCreateManyMovieReviewInputEnvelope
}

input MovieReviewLikedByUserCreateNestedManyWithoutUserInput {
  connect: [MovieReviewLikedByUserWhereUniqueInput!]
  connectOrCreate: [MovieReviewLikedByUserCreateOrConnectWithoutUserInput!]
  create: [MovieReviewLikedByUserCreateWithoutUserInput!]
  createMany: MovieReviewLikedByUserCreateManyUserInputEnvelope
}

input MovieReviewLikedByUserCreateOrConnectWithoutMovieReviewInput {
  create: MovieReviewLikedByUserCreateWithoutMovieReviewInput!
  where: MovieReviewLikedByUserWhereUniqueInput!
}

input MovieReviewLikedByUserCreateOrConnectWithoutUserInput {
  create: MovieReviewLikedByUserCreateWithoutUserInput!
  where: MovieReviewLikedByUserWhereUniqueInput!
}

input MovieReviewLikedByUserCreateWithoutMovieReviewInput {
  createdAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutLikedMovieReviewsInput!
}

input MovieReviewLikedByUserCreateWithoutUserInput {
  createdAt: DateTimeISO
  movieReview: MovieReviewCreateNestedOneWithoutLikedByInput!
}

type MovieReviewLikedByUserGroupBy {
  _count: MovieReviewLikedByUserCountAggregate
  _max: MovieReviewLikedByUserMaxAggregate
  _min: MovieReviewLikedByUserMinAggregate
  createdAt: DateTimeISO!
  movieReviewId: String!
  userId: String!
}

input MovieReviewLikedByUserListRelationFilter {
  every: MovieReviewLikedByUserWhereInput
  none: MovieReviewLikedByUserWhereInput
  some: MovieReviewLikedByUserWhereInput
}

type MovieReviewLikedByUserMaxAggregate {
  createdAt: DateTimeISO
  movieReviewId: String
  userId: String
}

input MovieReviewLikedByUserMaxOrderByAggregateInput {
  createdAt: SortOrder
  movieReviewId: SortOrder
  userId: SortOrder
}

type MovieReviewLikedByUserMinAggregate {
  createdAt: DateTimeISO
  movieReviewId: String
  userId: String
}

input MovieReviewLikedByUserMinOrderByAggregateInput {
  createdAt: SortOrder
  movieReviewId: SortOrder
  userId: SortOrder
}

input MovieReviewLikedByUserOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieReviewLikedByUserOrderByRelevanceFieldEnum {
  movieReviewId
  userId
}

input MovieReviewLikedByUserOrderByRelevanceInput {
  fields: [MovieReviewLikedByUserOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieReviewLikedByUserOrderByWithAggregationInput {
  _count: MovieReviewLikedByUserCountOrderByAggregateInput
  _max: MovieReviewLikedByUserMaxOrderByAggregateInput
  _min: MovieReviewLikedByUserMinOrderByAggregateInput
  createdAt: SortOrder
  movieReviewId: SortOrder
  userId: SortOrder
}

input MovieReviewLikedByUserOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieReviewLikedByUserOrderByRelevanceInput
  createdAt: SortOrder
  movieReview: MovieReviewOrderByWithRelationAndSearchRelevanceInput
  movieReviewId: SortOrder
  user: MovifierAppUserOrderByWithRelationAndSearchRelevanceInput
  userId: SortOrder
}

enum MovieReviewLikedByUserScalarFieldEnum {
  createdAt
  movieReviewId
  userId
}

input MovieReviewLikedByUserScalarWhereInput {
  AND: [MovieReviewLikedByUserScalarWhereInput!]
  NOT: [MovieReviewLikedByUserScalarWhereInput!]
  OR: [MovieReviewLikedByUserScalarWhereInput!]
  createdAt: DateTimeFilter
  movieReviewId: StringFilter
  userId: StringFilter
}

input MovieReviewLikedByUserScalarWhereWithAggregatesInput {
  AND: [MovieReviewLikedByUserScalarWhereWithAggregatesInput!]
  NOT: [MovieReviewLikedByUserScalarWhereWithAggregatesInput!]
  OR: [MovieReviewLikedByUserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  movieReviewId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input MovieReviewLikedByUserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  movieReview: MovieReviewUpdateOneRequiredWithoutLikedByNestedInput
  user: MovifierAppUserUpdateOneRequiredWithoutLikedMovieReviewsNestedInput
}

input MovieReviewLikedByUserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input MovieReviewLikedByUserUpdateManyWithWhereWithoutMovieReviewInput {
  data: MovieReviewLikedByUserUpdateManyMutationInput!
  where: MovieReviewLikedByUserScalarWhereInput!
}

input MovieReviewLikedByUserUpdateManyWithWhereWithoutUserInput {
  data: MovieReviewLikedByUserUpdateManyMutationInput!
  where: MovieReviewLikedByUserScalarWhereInput!
}

input MovieReviewLikedByUserUpdateManyWithoutMovieReviewNestedInput {
  connect: [MovieReviewLikedByUserWhereUniqueInput!]
  connectOrCreate: [MovieReviewLikedByUserCreateOrConnectWithoutMovieReviewInput!]
  create: [MovieReviewLikedByUserCreateWithoutMovieReviewInput!]
  createMany: MovieReviewLikedByUserCreateManyMovieReviewInputEnvelope
  delete: [MovieReviewLikedByUserWhereUniqueInput!]
  deleteMany: [MovieReviewLikedByUserScalarWhereInput!]
  disconnect: [MovieReviewLikedByUserWhereUniqueInput!]
  set: [MovieReviewLikedByUserWhereUniqueInput!]
  update: [MovieReviewLikedByUserUpdateWithWhereUniqueWithoutMovieReviewInput!]
  updateMany: [MovieReviewLikedByUserUpdateManyWithWhereWithoutMovieReviewInput!]
  upsert: [MovieReviewLikedByUserUpsertWithWhereUniqueWithoutMovieReviewInput!]
}

input MovieReviewLikedByUserUpdateManyWithoutUserNestedInput {
  connect: [MovieReviewLikedByUserWhereUniqueInput!]
  connectOrCreate: [MovieReviewLikedByUserCreateOrConnectWithoutUserInput!]
  create: [MovieReviewLikedByUserCreateWithoutUserInput!]
  createMany: MovieReviewLikedByUserCreateManyUserInputEnvelope
  delete: [MovieReviewLikedByUserWhereUniqueInput!]
  deleteMany: [MovieReviewLikedByUserScalarWhereInput!]
  disconnect: [MovieReviewLikedByUserWhereUniqueInput!]
  set: [MovieReviewLikedByUserWhereUniqueInput!]
  update: [MovieReviewLikedByUserUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MovieReviewLikedByUserUpdateManyWithWhereWithoutUserInput!]
  upsert: [MovieReviewLikedByUserUpsertWithWhereUniqueWithoutUserInput!]
}

input MovieReviewLikedByUserUpdateWithWhereUniqueWithoutMovieReviewInput {
  data: MovieReviewLikedByUserUpdateWithoutMovieReviewInput!
  where: MovieReviewLikedByUserWhereUniqueInput!
}

input MovieReviewLikedByUserUpdateWithWhereUniqueWithoutUserInput {
  data: MovieReviewLikedByUserUpdateWithoutUserInput!
  where: MovieReviewLikedByUserWhereUniqueInput!
}

input MovieReviewLikedByUserUpdateWithoutMovieReviewInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutLikedMovieReviewsNestedInput
}

input MovieReviewLikedByUserUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  movieReview: MovieReviewUpdateOneRequiredWithoutLikedByNestedInput
}

input MovieReviewLikedByUserUpsertWithWhereUniqueWithoutMovieReviewInput {
  create: MovieReviewLikedByUserCreateWithoutMovieReviewInput!
  update: MovieReviewLikedByUserUpdateWithoutMovieReviewInput!
  where: MovieReviewLikedByUserWhereUniqueInput!
}

input MovieReviewLikedByUserUpsertWithWhereUniqueWithoutUserInput {
  create: MovieReviewLikedByUserCreateWithoutUserInput!
  update: MovieReviewLikedByUserUpdateWithoutUserInput!
  where: MovieReviewLikedByUserWhereUniqueInput!
}

input MovieReviewLikedByUserUserIdMovieReviewIdCompoundUniqueInput {
  movieReviewId: String!
  userId: String!
}

input MovieReviewLikedByUserWhereInput {
  AND: [MovieReviewLikedByUserWhereInput!]
  NOT: [MovieReviewLikedByUserWhereInput!]
  OR: [MovieReviewLikedByUserWhereInput!]
  createdAt: DateTimeFilter
  movieReview: MovieReviewRelationFilter
  movieReviewId: StringFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

input MovieReviewLikedByUserWhereUniqueInput {
  AND: [MovieReviewLikedByUserWhereInput!]
  NOT: [MovieReviewLikedByUserWhereInput!]
  OR: [MovieReviewLikedByUserWhereInput!]
  createdAt: DateTimeFilter
  movieReview: MovieReviewRelationFilter
  movieReviewId: StringFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
  userId_movieReviewId: MovieReviewLikedByUserUserIdMovieReviewIdCompoundUniqueInput
}

type MovieReviewMaxAggregate {
  content: String
  createdAt: DateTimeISO
  id: String
  ratingId: String
  updatedAt: DateTimeISO
}

input MovieReviewMaxOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ratingId: SortOrder
  updatedAt: SortOrder
}

type MovieReviewMinAggregate {
  content: String
  createdAt: DateTimeISO
  id: String
  ratingId: String
  updatedAt: DateTimeISO
}

input MovieReviewMinOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ratingId: SortOrder
  updatedAt: SortOrder
}

input MovieReviewNullableRelationFilter {
  is: MovieReviewWhereInput
  isNot: MovieReviewWhereInput
}

enum MovieReviewOrderByRelevanceFieldEnum {
  content
  id
  ratingId
}

input MovieReviewOrderByRelevanceInput {
  fields: [MovieReviewOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieReviewOrderByWithAggregationInput {
  _count: MovieReviewCountOrderByAggregateInput
  _max: MovieReviewMaxOrderByAggregateInput
  _min: MovieReviewMinOrderByAggregateInput
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ratingId: SortOrder
  updatedAt: SortOrder
}

input MovieReviewOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieReviewOrderByRelevanceInput
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  likedBy: MovieReviewLikedByUserOrderByRelationAggregateInput
  rating: MovieRatingOrderByWithRelationAndSearchRelevanceInput
  ratingId: SortOrder
  updatedAt: SortOrder
}

input MovieReviewRelationFilter {
  is: MovieReviewWhereInput
  isNot: MovieReviewWhereInput
}

enum MovieReviewScalarFieldEnum {
  content
  createdAt
  id
  ratingId
  updatedAt
}

input MovieReviewScalarWhereWithAggregatesInput {
  AND: [MovieReviewScalarWhereWithAggregatesInput!]
  NOT: [MovieReviewScalarWhereWithAggregatesInput!]
  OR: [MovieReviewScalarWhereWithAggregatesInput!]
  content: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  ratingId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input MovieReviewUpdateInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likedBy: MovieReviewLikedByUserUpdateManyWithoutMovieReviewNestedInput
  rating: MovieRatingUpdateOneRequiredWithoutReviewNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieReviewUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieReviewUpdateOneRequiredWithoutLikedByNestedInput {
  connect: MovieReviewWhereUniqueInput
  connectOrCreate: MovieReviewCreateOrConnectWithoutLikedByInput
  create: MovieReviewCreateWithoutLikedByInput
  update: MovieReviewUpdateToOneWithWhereWithoutLikedByInput
  upsert: MovieReviewUpsertWithoutLikedByInput
}

input MovieReviewUpdateOneWithoutRatingNestedInput {
  connect: MovieReviewWhereUniqueInput
  connectOrCreate: MovieReviewCreateOrConnectWithoutRatingInput
  create: MovieReviewCreateWithoutRatingInput
  delete: MovieReviewWhereInput
  disconnect: MovieReviewWhereInput
  update: MovieReviewUpdateToOneWithWhereWithoutRatingInput
  upsert: MovieReviewUpsertWithoutRatingInput
}

input MovieReviewUpdateToOneWithWhereWithoutLikedByInput {
  data: MovieReviewUpdateWithoutLikedByInput!
  where: MovieReviewWhereInput
}

input MovieReviewUpdateToOneWithWhereWithoutRatingInput {
  data: MovieReviewUpdateWithoutRatingInput!
  where: MovieReviewWhereInput
}

input MovieReviewUpdateWithoutLikedByInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rating: MovieRatingUpdateOneRequiredWithoutReviewNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieReviewUpdateWithoutRatingInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likedBy: MovieReviewLikedByUserUpdateManyWithoutMovieReviewNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieReviewUpsertWithoutLikedByInput {
  create: MovieReviewCreateWithoutLikedByInput!
  update: MovieReviewUpdateWithoutLikedByInput!
  where: MovieReviewWhereInput
}

input MovieReviewUpsertWithoutRatingInput {
  create: MovieReviewCreateWithoutRatingInput!
  update: MovieReviewUpdateWithoutRatingInput!
  where: MovieReviewWhereInput
}

input MovieReviewWhereInput {
  AND: [MovieReviewWhereInput!]
  NOT: [MovieReviewWhereInput!]
  OR: [MovieReviewWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  likedBy: MovieReviewLikedByUserListRelationFilter
  rating: MovieRatingRelationFilter
  ratingId: StringFilter
  updatedAt: DateTimeFilter
}

input MovieReviewWhereUniqueInput {
  AND: [MovieReviewWhereInput!]
  NOT: [MovieReviewWhereInput!]
  OR: [MovieReviewWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: String
  likedBy: MovieReviewLikedByUserListRelationFilter
  rating: MovieRatingRelationFilter
  ratingId: String
  updatedAt: DateTimeFilter
}

enum MovieScalarFieldEnum {
  createdAt
  id
  updatedAt
}

input MovieScalarWhereInput {
  AND: [MovieScalarWhereInput!]
  NOT: [MovieScalarWhereInput!]
  OR: [MovieScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input MovieScalarWhereWithAggregatesInput {
  AND: [MovieScalarWhereWithAggregatesInput!]
  NOT: [MovieScalarWhereWithAggregatesInput!]
  OR: [MovieScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type MovieSpokenLanguage {
  _count: MovieSpokenLanguageCount
  createdAt: DateTimeISO!
  language: String!
  movies(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
  updatedAt: DateTimeISO!
}

type MovieSpokenLanguageCount {
  movies(where: MovieWhereInput): Int!
}

type MovieSpokenLanguageCountAggregate {
  _all: Int!
  createdAt: Int!
  language: Int!
  updatedAt: Int!
}

input MovieSpokenLanguageCountOrderByAggregateInput {
  createdAt: SortOrder
  language: SortOrder
  updatedAt: SortOrder
}

input MovieSpokenLanguageCreateInput {
  createdAt: DateTimeISO
  language: String!
  movies: MovieCreateNestedManyWithoutSpokenLanguagesInput
  updatedAt: DateTimeISO
}

input MovieSpokenLanguageCreateManyInput {
  createdAt: DateTimeISO
  language: String!
  updatedAt: DateTimeISO
}

input MovieSpokenLanguageCreateNestedManyWithoutMoviesInput {
  connect: [MovieSpokenLanguageWhereUniqueInput!]
  connectOrCreate: [MovieSpokenLanguageCreateOrConnectWithoutMoviesInput!]
  create: [MovieSpokenLanguageCreateWithoutMoviesInput!]
}

input MovieSpokenLanguageCreateOrConnectWithoutMoviesInput {
  create: MovieSpokenLanguageCreateWithoutMoviesInput!
  where: MovieSpokenLanguageWhereUniqueInput!
}

input MovieSpokenLanguageCreateWithoutMoviesInput {
  createdAt: DateTimeISO
  language: String!
  updatedAt: DateTimeISO
}

type MovieSpokenLanguageGroupBy {
  _count: MovieSpokenLanguageCountAggregate
  _max: MovieSpokenLanguageMaxAggregate
  _min: MovieSpokenLanguageMinAggregate
  createdAt: DateTimeISO!
  language: String!
  updatedAt: DateTimeISO!
}

input MovieSpokenLanguageListRelationFilter {
  every: MovieSpokenLanguageWhereInput
  none: MovieSpokenLanguageWhereInput
  some: MovieSpokenLanguageWhereInput
}

type MovieSpokenLanguageMaxAggregate {
  createdAt: DateTimeISO
  language: String
  updatedAt: DateTimeISO
}

input MovieSpokenLanguageMaxOrderByAggregateInput {
  createdAt: SortOrder
  language: SortOrder
  updatedAt: SortOrder
}

type MovieSpokenLanguageMinAggregate {
  createdAt: DateTimeISO
  language: String
  updatedAt: DateTimeISO
}

input MovieSpokenLanguageMinOrderByAggregateInput {
  createdAt: SortOrder
  language: SortOrder
  updatedAt: SortOrder
}

input MovieSpokenLanguageOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieSpokenLanguageOrderByRelevanceFieldEnum {
  language
}

input MovieSpokenLanguageOrderByRelevanceInput {
  fields: [MovieSpokenLanguageOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieSpokenLanguageOrderByWithAggregationInput {
  _count: MovieSpokenLanguageCountOrderByAggregateInput
  _max: MovieSpokenLanguageMaxOrderByAggregateInput
  _min: MovieSpokenLanguageMinOrderByAggregateInput
  createdAt: SortOrder
  language: SortOrder
  updatedAt: SortOrder
}

input MovieSpokenLanguageOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieSpokenLanguageOrderByRelevanceInput
  createdAt: SortOrder
  language: SortOrder
  movies: MovieOrderByRelationAggregateInput
  updatedAt: SortOrder
}

enum MovieSpokenLanguageScalarFieldEnum {
  createdAt
  language
  updatedAt
}

input MovieSpokenLanguageScalarWhereInput {
  AND: [MovieSpokenLanguageScalarWhereInput!]
  NOT: [MovieSpokenLanguageScalarWhereInput!]
  OR: [MovieSpokenLanguageScalarWhereInput!]
  createdAt: DateTimeFilter
  language: StringFilter
  updatedAt: DateTimeFilter
}

input MovieSpokenLanguageScalarWhereWithAggregatesInput {
  AND: [MovieSpokenLanguageScalarWhereWithAggregatesInput!]
  NOT: [MovieSpokenLanguageScalarWhereWithAggregatesInput!]
  OR: [MovieSpokenLanguageScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  language: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input MovieSpokenLanguageUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  movies: MovieUpdateManyWithoutSpokenLanguagesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieSpokenLanguageUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieSpokenLanguageUpdateManyWithWhereWithoutMoviesInput {
  data: MovieSpokenLanguageUpdateManyMutationInput!
  where: MovieSpokenLanguageScalarWhereInput!
}

input MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput {
  connect: [MovieSpokenLanguageWhereUniqueInput!]
  connectOrCreate: [MovieSpokenLanguageCreateOrConnectWithoutMoviesInput!]
  create: [MovieSpokenLanguageCreateWithoutMoviesInput!]
  delete: [MovieSpokenLanguageWhereUniqueInput!]
  deleteMany: [MovieSpokenLanguageScalarWhereInput!]
  disconnect: [MovieSpokenLanguageWhereUniqueInput!]
  set: [MovieSpokenLanguageWhereUniqueInput!]
  update: [MovieSpokenLanguageUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [MovieSpokenLanguageUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [MovieSpokenLanguageUpsertWithWhereUniqueWithoutMoviesInput!]
}

input MovieSpokenLanguageUpdateWithWhereUniqueWithoutMoviesInput {
  data: MovieSpokenLanguageUpdateWithoutMoviesInput!
  where: MovieSpokenLanguageWhereUniqueInput!
}

input MovieSpokenLanguageUpdateWithoutMoviesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieSpokenLanguageUpsertWithWhereUniqueWithoutMoviesInput {
  create: MovieSpokenLanguageCreateWithoutMoviesInput!
  update: MovieSpokenLanguageUpdateWithoutMoviesInput!
  where: MovieSpokenLanguageWhereUniqueInput!
}

input MovieSpokenLanguageWhereInput {
  AND: [MovieSpokenLanguageWhereInput!]
  NOT: [MovieSpokenLanguageWhereInput!]
  OR: [MovieSpokenLanguageWhereInput!]
  createdAt: DateTimeFilter
  language: StringFilter
  movies: MovieListRelationFilter
  updatedAt: DateTimeFilter
}

input MovieSpokenLanguageWhereUniqueInput {
  AND: [MovieSpokenLanguageWhereInput!]
  NOT: [MovieSpokenLanguageWhereInput!]
  OR: [MovieSpokenLanguageWhereInput!]
  createdAt: DateTimeFilter
  language: String
  movies: MovieListRelationFilter
  updatedAt: DateTimeFilter
}

type MovieStats {
  avgRating: Float!
  id: String!
  movieId: String!
  overallPlaceInTop: Int!
  timesWatchedCount: Int!
  totalLikesCount: Int!
  totalRatingsCount: Int!
}

input MovieStatsCreateNestedOneWithoutMovieInput {
  connect: MovieStatsWhereUniqueInput
  connectOrCreate: MovieStatsCreateOrConnectWithoutMovieInput
  create: MovieStatsCreateWithoutMovieInput
}

input MovieStatsCreateOrConnectWithoutMovieInput {
  create: MovieStatsCreateWithoutMovieInput!
  where: MovieStatsWhereUniqueInput!
}

input MovieStatsCreateWithoutMovieInput {
  avgRating: Float!
  id: String
  overallPlaceInTop: Int!
  timesWatchedCount: Int!
  totalLikesCount: Int!
  totalRatingsCount: Int!
}

input MovieStatsNullableRelationFilter {
  is: MovieStatsWhereInput
  isNot: MovieStatsWhereInput
}

enum MovieStatsOrderByRelevanceFieldEnum {
  id
  movieId
}

input MovieStatsOrderByRelevanceInput {
  fields: [MovieStatsOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieStatsOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieStatsOrderByRelevanceInput
  avgRating: SortOrder
  id: SortOrder
  movie: MovieOrderByWithRelationAndSearchRelevanceInput
  movieId: SortOrder
  overallPlaceInTop: SortOrder
  timesWatchedCount: SortOrder
  totalLikesCount: SortOrder
  totalRatingsCount: SortOrder
}

input MovieStatsUpdateOneWithoutMovieNestedInput {
  connect: MovieStatsWhereUniqueInput
  connectOrCreate: MovieStatsCreateOrConnectWithoutMovieInput
  create: MovieStatsCreateWithoutMovieInput
  delete: MovieStatsWhereInput
  disconnect: MovieStatsWhereInput
  update: MovieStatsUpdateToOneWithWhereWithoutMovieInput
  upsert: MovieStatsUpsertWithoutMovieInput
}

input MovieStatsUpdateToOneWithWhereWithoutMovieInput {
  data: MovieStatsUpdateWithoutMovieInput!
  where: MovieStatsWhereInput
}

input MovieStatsUpdateWithoutMovieInput {
  avgRating: FloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  overallPlaceInTop: IntFieldUpdateOperationsInput
  timesWatchedCount: IntFieldUpdateOperationsInput
  totalLikesCount: IntFieldUpdateOperationsInput
  totalRatingsCount: IntFieldUpdateOperationsInput
}

input MovieStatsUpsertWithoutMovieInput {
  create: MovieStatsCreateWithoutMovieInput!
  update: MovieStatsUpdateWithoutMovieInput!
  where: MovieStatsWhereInput
}

input MovieStatsWhereInput {
  AND: [MovieStatsWhereInput!]
  NOT: [MovieStatsWhereInput!]
  OR: [MovieStatsWhereInput!]
  avgRating: FloatFilter
  id: StringFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  overallPlaceInTop: IntFilter
  timesWatchedCount: IntFilter
  totalLikesCount: IntFilter
  totalRatingsCount: IntFilter
}

input MovieStatsWhereUniqueInput {
  AND: [MovieStatsWhereInput!]
  NOT: [MovieStatsWhereInput!]
  OR: [MovieStatsWhereInput!]
  avgRating: FloatFilter
  id: String
  movie: MovieRelationFilter
  movieId: String
  overallPlaceInTop: IntFilter
  timesWatchedCount: IntFilter
  totalLikesCount: IntFilter
  totalRatingsCount: IntFilter
}

type MovieStudio {
  _count: MovieStudioCount
  createdAt: DateTimeISO!
  id: String!
  name: String!
  updatedAt: DateTimeISO!
}

type MovieStudioCount {
  movies(where: MovieWhereInput): Int!
}

input MovieStudioCreateNestedManyWithoutMoviesInput {
  connect: [MovieStudioWhereUniqueInput!]
  connectOrCreate: [MovieStudioCreateOrConnectWithoutMoviesInput!]
  create: [MovieStudioCreateWithoutMoviesInput!]
}

input MovieStudioCreateOrConnectWithoutMoviesInput {
  create: MovieStudioCreateWithoutMoviesInput!
  where: MovieStudioWhereUniqueInput!
}

input MovieStudioCreateWithoutMoviesInput {
  createdAt: DateTimeISO
  id: String
  name: String!
  updatedAt: DateTimeISO
}

input MovieStudioListRelationFilter {
  every: MovieStudioWhereInput
  none: MovieStudioWhereInput
  some: MovieStudioWhereInput
}

input MovieStudioOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieStudioOrderByRelevanceFieldEnum {
  id
  name
}

input MovieStudioOrderByRelevanceInput {
  fields: [MovieStudioOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieStudioOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieStudioOrderByRelevanceInput
  createdAt: SortOrder
  id: SortOrder
  movies: MovieOrderByRelationAggregateInput
  name: SortOrder
  updatedAt: SortOrder
}

enum MovieStudioScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input MovieStudioScalarWhereInput {
  AND: [MovieStudioScalarWhereInput!]
  NOT: [MovieStudioScalarWhereInput!]
  OR: [MovieStudioScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input MovieStudioUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieStudioUpdateManyWithWhereWithoutMoviesInput {
  data: MovieStudioUpdateManyMutationInput!
  where: MovieStudioScalarWhereInput!
}

input MovieStudioUpdateManyWithoutMoviesNestedInput {
  connect: [MovieStudioWhereUniqueInput!]
  connectOrCreate: [MovieStudioCreateOrConnectWithoutMoviesInput!]
  create: [MovieStudioCreateWithoutMoviesInput!]
  delete: [MovieStudioWhereUniqueInput!]
  deleteMany: [MovieStudioScalarWhereInput!]
  disconnect: [MovieStudioWhereUniqueInput!]
  set: [MovieStudioWhereUniqueInput!]
  update: [MovieStudioUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [MovieStudioUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [MovieStudioUpsertWithWhereUniqueWithoutMoviesInput!]
}

input MovieStudioUpdateWithWhereUniqueWithoutMoviesInput {
  data: MovieStudioUpdateWithoutMoviesInput!
  where: MovieStudioWhereUniqueInput!
}

input MovieStudioUpdateWithoutMoviesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieStudioUpsertWithWhereUniqueWithoutMoviesInput {
  create: MovieStudioCreateWithoutMoviesInput!
  update: MovieStudioUpdateWithoutMoviesInput!
  where: MovieStudioWhereUniqueInput!
}

input MovieStudioWhereInput {
  AND: [MovieStudioWhereInput!]
  NOT: [MovieStudioWhereInput!]
  OR: [MovieStudioWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  movies: MovieListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input MovieStudioWhereUniqueInput {
  AND: [MovieStudioWhereInput!]
  NOT: [MovieStudioWhereInput!]
  OR: [MovieStudioWhereInput!]
  createdAt: DateTimeFilter
  id: String
  movies: MovieListRelationFilter
  name: String
  updatedAt: DateTimeFilter
}

input MovieUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberOnMovieUpdateManyWithoutMovieNestedInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: UserMovieWatchlistUpdateManyWithoutMovieNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  likedBy: MovieLikedByUserUpdateManyWithoutMovieNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  movieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  ratedBy: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  watchedBy: MovieWatchedByUserUpdateManyWithoutMovieNestedInput
}

input MovieUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateManyWithWhereWithoutGenresInput {
  data: MovieUpdateManyMutationInput!
  where: MovieScalarWhereInput!
}

input MovieUpdateManyWithWhereWithoutMovieListsInput {
  data: MovieUpdateManyMutationInput!
  where: MovieScalarWhereInput!
}

input MovieUpdateManyWithWhereWithoutSpokenLanguagesInput {
  data: MovieUpdateManyMutationInput!
  where: MovieScalarWhereInput!
}

input MovieUpdateManyWithoutGenresNestedInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutGenresInput!]
  create: [MovieCreateWithoutGenresInput!]
  delete: [MovieWhereUniqueInput!]
  deleteMany: [MovieScalarWhereInput!]
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutGenresInput!]
  updateMany: [MovieUpdateManyWithWhereWithoutGenresInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutGenresInput!]
}

input MovieUpdateManyWithoutMovieListsNestedInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutMovieListsInput!]
  create: [MovieCreateWithoutMovieListsInput!]
  delete: [MovieWhereUniqueInput!]
  deleteMany: [MovieScalarWhereInput!]
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutMovieListsInput!]
  updateMany: [MovieUpdateManyWithWhereWithoutMovieListsInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutMovieListsInput!]
}

input MovieUpdateManyWithoutSpokenLanguagesNestedInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutSpokenLanguagesInput!]
  create: [MovieCreateWithoutSpokenLanguagesInput!]
  delete: [MovieWhereUniqueInput!]
  deleteMany: [MovieScalarWhereInput!]
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutSpokenLanguagesInput!]
  updateMany: [MovieUpdateManyWithWhereWithoutSpokenLanguagesInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutSpokenLanguagesInput!]
}

input MovieUpdateOneRequiredWithoutInWatchlistByUsersNestedInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutInWatchlistByUsersInput
  create: MovieCreateWithoutInWatchlistByUsersInput
  update: MovieUpdateToOneWithWhereWithoutInWatchlistByUsersInput
  upsert: MovieUpsertWithoutInWatchlistByUsersInput
}

input MovieUpdateOneRequiredWithoutLikedByNestedInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutLikedByInput
  create: MovieCreateWithoutLikedByInput
  update: MovieUpdateToOneWithWhereWithoutLikedByInput
  upsert: MovieUpsertWithoutLikedByInput
}

input MovieUpdateOneRequiredWithoutRatedByNestedInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutRatedByInput
  create: MovieCreateWithoutRatedByInput
  update: MovieUpdateToOneWithWhereWithoutRatedByInput
  upsert: MovieUpsertWithoutRatedByInput
}

input MovieUpdateOneRequiredWithoutWatchedByNestedInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutWatchedByInput
  create: MovieCreateWithoutWatchedByInput
  update: MovieUpdateToOneWithWhereWithoutWatchedByInput
  upsert: MovieUpsertWithoutWatchedByInput
}

input MovieUpdateToOneWithWhereWithoutInWatchlistByUsersInput {
  data: MovieUpdateWithoutInWatchlistByUsersInput!
  where: MovieWhereInput
}

input MovieUpdateToOneWithWhereWithoutLikedByInput {
  data: MovieUpdateWithoutLikedByInput!
  where: MovieWhereInput
}

input MovieUpdateToOneWithWhereWithoutRatedByInput {
  data: MovieUpdateWithoutRatedByInput!
  where: MovieWhereInput
}

input MovieUpdateToOneWithWhereWithoutWatchedByInput {
  data: MovieUpdateWithoutWatchedByInput!
  where: MovieWhereInput
}

input MovieUpdateWithWhereUniqueWithoutGenresInput {
  data: MovieUpdateWithoutGenresInput!
  where: MovieWhereUniqueInput!
}

input MovieUpdateWithWhereUniqueWithoutMovieListsInput {
  data: MovieUpdateWithoutMovieListsInput!
  where: MovieWhereUniqueInput!
}

input MovieUpdateWithWhereUniqueWithoutSpokenLanguagesInput {
  data: MovieUpdateWithoutSpokenLanguagesInput!
  where: MovieWhereUniqueInput!
}

input MovieUpdateWithoutGenresInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberOnMovieUpdateManyWithoutMovieNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: UserMovieWatchlistUpdateManyWithoutMovieNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  likedBy: MovieLikedByUserUpdateManyWithoutMovieNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  movieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  ratedBy: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  watchedBy: MovieWatchedByUserUpdateManyWithoutMovieNestedInput
}

input MovieUpdateWithoutInWatchlistByUsersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberOnMovieUpdateManyWithoutMovieNestedInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  likedBy: MovieLikedByUserUpdateManyWithoutMovieNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  movieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  ratedBy: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  watchedBy: MovieWatchedByUserUpdateManyWithoutMovieNestedInput
}

input MovieUpdateWithoutLikedByInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberOnMovieUpdateManyWithoutMovieNestedInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: UserMovieWatchlistUpdateManyWithoutMovieNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  movieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  ratedBy: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  watchedBy: MovieWatchedByUserUpdateManyWithoutMovieNestedInput
}

input MovieUpdateWithoutMovieListsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberOnMovieUpdateManyWithoutMovieNestedInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: UserMovieWatchlistUpdateManyWithoutMovieNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  likedBy: MovieLikedByUserUpdateManyWithoutMovieNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  ratedBy: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  watchedBy: MovieWatchedByUserUpdateManyWithoutMovieNestedInput
}

input MovieUpdateWithoutRatedByInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberOnMovieUpdateManyWithoutMovieNestedInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: UserMovieWatchlistUpdateManyWithoutMovieNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  likedBy: MovieLikedByUserUpdateManyWithoutMovieNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  movieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  watchedBy: MovieWatchedByUserUpdateManyWithoutMovieNestedInput
}

input MovieUpdateWithoutSpokenLanguagesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberOnMovieUpdateManyWithoutMovieNestedInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: UserMovieWatchlistUpdateManyWithoutMovieNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  likedBy: MovieLikedByUserUpdateManyWithoutMovieNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  movieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  ratedBy: MovieRatingUpdateManyWithoutMovieNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  watchedBy: MovieWatchedByUserUpdateManyWithoutMovieNestedInput
}

input MovieUpdateWithoutWatchedByInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberOnMovieUpdateManyWithoutMovieNestedInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: UserMovieWatchlistUpdateManyWithoutMovieNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  likedBy: MovieLikedByUserUpdateManyWithoutMovieNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  movieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  ratedBy: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpsertWithWhereUniqueWithoutGenresInput {
  create: MovieCreateWithoutGenresInput!
  update: MovieUpdateWithoutGenresInput!
  where: MovieWhereUniqueInput!
}

input MovieUpsertWithWhereUniqueWithoutMovieListsInput {
  create: MovieCreateWithoutMovieListsInput!
  update: MovieUpdateWithoutMovieListsInput!
  where: MovieWhereUniqueInput!
}

input MovieUpsertWithWhereUniqueWithoutSpokenLanguagesInput {
  create: MovieCreateWithoutSpokenLanguagesInput!
  update: MovieUpdateWithoutSpokenLanguagesInput!
  where: MovieWhereUniqueInput!
}

input MovieUpsertWithoutInWatchlistByUsersInput {
  create: MovieCreateWithoutInWatchlistByUsersInput!
  update: MovieUpdateWithoutInWatchlistByUsersInput!
  where: MovieWhereInput
}

input MovieUpsertWithoutLikedByInput {
  create: MovieCreateWithoutLikedByInput!
  update: MovieUpdateWithoutLikedByInput!
  where: MovieWhereInput
}

input MovieUpsertWithoutRatedByInput {
  create: MovieCreateWithoutRatedByInput!
  update: MovieUpdateWithoutRatedByInput!
  where: MovieWhereInput
}

input MovieUpsertWithoutWatchedByInput {
  create: MovieCreateWithoutWatchedByInput!
  update: MovieUpdateWithoutWatchedByInput!
  where: MovieWhereInput
}

type MovieWatchedByUser {
  createdAt: DateTimeISO!
  movie: Movie!
  movieId: String!
  user: MovifierAppUser!
  userId: String!
}

type MovieWatchedByUserCountAggregate {
  _all: Int!
  createdAt: Int!
  movieId: Int!
  userId: Int!
}

input MovieWatchedByUserCountOrderByAggregateInput {
  createdAt: SortOrder
  movieId: SortOrder
  userId: SortOrder
}

input MovieWatchedByUserCreateInput {
  createdAt: DateTimeISO
  movie: MovieCreateNestedOneWithoutWatchedByInput!
  user: MovifierAppUserCreateNestedOneWithoutWatchedMoviesInput!
}

input MovieWatchedByUserCreateManyInput {
  createdAt: DateTimeISO
  movieId: String!
  userId: String!
}

input MovieWatchedByUserCreateManyMovieInput {
  createdAt: DateTimeISO
  userId: String!
}

input MovieWatchedByUserCreateManyMovieInputEnvelope {
  data: [MovieWatchedByUserCreateManyMovieInput!]!
  skipDuplicates: Boolean
}

input MovieWatchedByUserCreateManyUserInput {
  createdAt: DateTimeISO
  movieId: String!
}

input MovieWatchedByUserCreateManyUserInputEnvelope {
  data: [MovieWatchedByUserCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MovieWatchedByUserCreateNestedManyWithoutMovieInput {
  connect: [MovieWatchedByUserWhereUniqueInput!]
  connectOrCreate: [MovieWatchedByUserCreateOrConnectWithoutMovieInput!]
  create: [MovieWatchedByUserCreateWithoutMovieInput!]
  createMany: MovieWatchedByUserCreateManyMovieInputEnvelope
}

input MovieWatchedByUserCreateNestedManyWithoutUserInput {
  connect: [MovieWatchedByUserWhereUniqueInput!]
  connectOrCreate: [MovieWatchedByUserCreateOrConnectWithoutUserInput!]
  create: [MovieWatchedByUserCreateWithoutUserInput!]
  createMany: MovieWatchedByUserCreateManyUserInputEnvelope
}

input MovieWatchedByUserCreateOrConnectWithoutMovieInput {
  create: MovieWatchedByUserCreateWithoutMovieInput!
  where: MovieWatchedByUserWhereUniqueInput!
}

input MovieWatchedByUserCreateOrConnectWithoutUserInput {
  create: MovieWatchedByUserCreateWithoutUserInput!
  where: MovieWatchedByUserWhereUniqueInput!
}

input MovieWatchedByUserCreateWithoutMovieInput {
  createdAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutWatchedMoviesInput!
}

input MovieWatchedByUserCreateWithoutUserInput {
  createdAt: DateTimeISO
  movie: MovieCreateNestedOneWithoutWatchedByInput!
}

type MovieWatchedByUserGroupBy {
  _count: MovieWatchedByUserCountAggregate
  _max: MovieWatchedByUserMaxAggregate
  _min: MovieWatchedByUserMinAggregate
  createdAt: DateTimeISO!
  movieId: String!
  userId: String!
}

input MovieWatchedByUserListRelationFilter {
  every: MovieWatchedByUserWhereInput
  none: MovieWatchedByUserWhereInput
  some: MovieWatchedByUserWhereInput
}

type MovieWatchedByUserMaxAggregate {
  createdAt: DateTimeISO
  movieId: String
  userId: String
}

input MovieWatchedByUserMaxOrderByAggregateInput {
  createdAt: SortOrder
  movieId: SortOrder
  userId: SortOrder
}

type MovieWatchedByUserMinAggregate {
  createdAt: DateTimeISO
  movieId: String
  userId: String
}

input MovieWatchedByUserMinOrderByAggregateInput {
  createdAt: SortOrder
  movieId: SortOrder
  userId: SortOrder
}

input MovieWatchedByUserOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieWatchedByUserOrderByRelevanceFieldEnum {
  movieId
  userId
}

input MovieWatchedByUserOrderByRelevanceInput {
  fields: [MovieWatchedByUserOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieWatchedByUserOrderByWithAggregationInput {
  _count: MovieWatchedByUserCountOrderByAggregateInput
  _max: MovieWatchedByUserMaxOrderByAggregateInput
  _min: MovieWatchedByUserMinOrderByAggregateInput
  createdAt: SortOrder
  movieId: SortOrder
  userId: SortOrder
}

input MovieWatchedByUserOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieWatchedByUserOrderByRelevanceInput
  createdAt: SortOrder
  movie: MovieOrderByWithRelationAndSearchRelevanceInput
  movieId: SortOrder
  user: MovifierAppUserOrderByWithRelationAndSearchRelevanceInput
  userId: SortOrder
}

enum MovieWatchedByUserScalarFieldEnum {
  createdAt
  movieId
  userId
}

input MovieWatchedByUserScalarWhereInput {
  AND: [MovieWatchedByUserScalarWhereInput!]
  NOT: [MovieWatchedByUserScalarWhereInput!]
  OR: [MovieWatchedByUserScalarWhereInput!]
  createdAt: DateTimeFilter
  movieId: StringFilter
  userId: StringFilter
}

input MovieWatchedByUserScalarWhereWithAggregatesInput {
  AND: [MovieWatchedByUserScalarWhereWithAggregatesInput!]
  NOT: [MovieWatchedByUserScalarWhereWithAggregatesInput!]
  OR: [MovieWatchedByUserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  movieId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input MovieWatchedByUserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutWatchedByNestedInput
  user: MovifierAppUserUpdateOneRequiredWithoutWatchedMoviesNestedInput
}

input MovieWatchedByUserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input MovieWatchedByUserUpdateManyWithWhereWithoutMovieInput {
  data: MovieWatchedByUserUpdateManyMutationInput!
  where: MovieWatchedByUserScalarWhereInput!
}

input MovieWatchedByUserUpdateManyWithWhereWithoutUserInput {
  data: MovieWatchedByUserUpdateManyMutationInput!
  where: MovieWatchedByUserScalarWhereInput!
}

input MovieWatchedByUserUpdateManyWithoutMovieNestedInput {
  connect: [MovieWatchedByUserWhereUniqueInput!]
  connectOrCreate: [MovieWatchedByUserCreateOrConnectWithoutMovieInput!]
  create: [MovieWatchedByUserCreateWithoutMovieInput!]
  createMany: MovieWatchedByUserCreateManyMovieInputEnvelope
  delete: [MovieWatchedByUserWhereUniqueInput!]
  deleteMany: [MovieWatchedByUserScalarWhereInput!]
  disconnect: [MovieWatchedByUserWhereUniqueInput!]
  set: [MovieWatchedByUserWhereUniqueInput!]
  update: [MovieWatchedByUserUpdateWithWhereUniqueWithoutMovieInput!]
  updateMany: [MovieWatchedByUserUpdateManyWithWhereWithoutMovieInput!]
  upsert: [MovieWatchedByUserUpsertWithWhereUniqueWithoutMovieInput!]
}

input MovieWatchedByUserUpdateManyWithoutUserNestedInput {
  connect: [MovieWatchedByUserWhereUniqueInput!]
  connectOrCreate: [MovieWatchedByUserCreateOrConnectWithoutUserInput!]
  create: [MovieWatchedByUserCreateWithoutUserInput!]
  createMany: MovieWatchedByUserCreateManyUserInputEnvelope
  delete: [MovieWatchedByUserWhereUniqueInput!]
  deleteMany: [MovieWatchedByUserScalarWhereInput!]
  disconnect: [MovieWatchedByUserWhereUniqueInput!]
  set: [MovieWatchedByUserWhereUniqueInput!]
  update: [MovieWatchedByUserUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MovieWatchedByUserUpdateManyWithWhereWithoutUserInput!]
  upsert: [MovieWatchedByUserUpsertWithWhereUniqueWithoutUserInput!]
}

input MovieWatchedByUserUpdateWithWhereUniqueWithoutMovieInput {
  data: MovieWatchedByUserUpdateWithoutMovieInput!
  where: MovieWatchedByUserWhereUniqueInput!
}

input MovieWatchedByUserUpdateWithWhereUniqueWithoutUserInput {
  data: MovieWatchedByUserUpdateWithoutUserInput!
  where: MovieWatchedByUserWhereUniqueInput!
}

input MovieWatchedByUserUpdateWithoutMovieInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutWatchedMoviesNestedInput
}

input MovieWatchedByUserUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutWatchedByNestedInput
}

input MovieWatchedByUserUpsertWithWhereUniqueWithoutMovieInput {
  create: MovieWatchedByUserCreateWithoutMovieInput!
  update: MovieWatchedByUserUpdateWithoutMovieInput!
  where: MovieWatchedByUserWhereUniqueInput!
}

input MovieWatchedByUserUpsertWithWhereUniqueWithoutUserInput {
  create: MovieWatchedByUserCreateWithoutUserInput!
  update: MovieWatchedByUserUpdateWithoutUserInput!
  where: MovieWatchedByUserWhereUniqueInput!
}

input MovieWatchedByUserUserIdMovieIdCompoundUniqueInput {
  movieId: String!
  userId: String!
}

input MovieWatchedByUserWhereInput {
  AND: [MovieWatchedByUserWhereInput!]
  NOT: [MovieWatchedByUserWhereInput!]
  OR: [MovieWatchedByUserWhereInput!]
  createdAt: DateTimeFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

input MovieWatchedByUserWhereUniqueInput {
  AND: [MovieWatchedByUserWhereInput!]
  NOT: [MovieWatchedByUserWhereInput!]
  OR: [MovieWatchedByUserWhereInput!]
  createdAt: DateTimeFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
  userId_movieId: MovieWatchedByUserUserIdMovieIdCompoundUniqueInput
}

input MovieWhereInput {
  AND: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  createdAt: DateTimeFilter
  crewMembers: MovieCrewMemberOnMovieListRelationFilter
  genres: GenreListRelationFilter
  id: StringFilter
  inWatchlistByUsers: UserMovieWatchlistListRelationFilter
  keywordCategories: MovieKeywordCategoryListRelationFilter
  likedBy: MovieLikedByUserListRelationFilter
  movieInfo: MovieInfoNullableRelationFilter
  movieLists: MovieListListRelationFilter
  movieStats: MovieStatsNullableRelationFilter
  ratedBy: MovieRatingListRelationFilter
  spokenLanguages: MovieSpokenLanguageListRelationFilter
  studios: MovieStudioListRelationFilter
  updatedAt: DateTimeFilter
  watchedBy: MovieWatchedByUserListRelationFilter
}

input MovieWhereUniqueInput {
  AND: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  createdAt: DateTimeFilter
  crewMembers: MovieCrewMemberOnMovieListRelationFilter
  genres: GenreListRelationFilter
  id: String
  inWatchlistByUsers: UserMovieWatchlistListRelationFilter
  keywordCategories: MovieKeywordCategoryListRelationFilter
  likedBy: MovieLikedByUserListRelationFilter
  movieInfo: MovieInfoNullableRelationFilter
  movieLists: MovieListListRelationFilter
  movieStats: MovieStatsNullableRelationFilter
  ratedBy: MovieRatingListRelationFilter
  spokenLanguages: MovieSpokenLanguageListRelationFilter
  studios: MovieStudioListRelationFilter
  updatedAt: DateTimeFilter
  watchedBy: MovieWatchedByUserListRelationFilter
}

enum MoviefireAppUserRole {
  ADMIN
  USER
}

input MoviesSearchCriteriaInput {
  decade: Float
  genre: String
  keyword: String
  language: String
  search: String
  year: Float
}

type MovifierAppUser {
  _count: MovifierAppUserCount
  createdAt: DateTimeISO!
  email: String!
  id: String!
  name: String!
  role: MoviefireAppUserRole!
  updatedAt: DateTimeISO!
  username: String!
}

type MovifierAppUserCount {
  MovieListLikedByUser(where: MovieListLikedByUserWhereInput): Int!
  likedMovieReviews(where: MovieReviewLikedByUserWhereInput): Int!
  likedMovies(where: MovieLikedByUserWhereInput): Int!
  movieLists(where: MovieListWhereInput): Int!
  movieListsComments(where: MovieListCommentWhereInput): Int!
  ratedMovies(where: MovieRatingWhereInput): Int!
  watchedMovies(where: MovieWatchedByUserWhereInput): Int!
  watchlist(where: UserMovieWatchlistWhereInput): Int!
}

input MovifierAppUserCreateInput {
  MovieListLikedByUser: MovieListLikedByUserCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  id: String
  likedMovieReviews: MovieReviewLikedByUserCreateNestedManyWithoutUserInput
  likedMovies: MovieLikedByUserCreateNestedManyWithoutUserInput
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password: String!
  ratedMovies: MovieRatingCreateNestedManyWithoutUserInput
  role: MoviefireAppUserRole
  updatedAt: DateTimeISO
  username: String!
  watchedMovies: MovieWatchedByUserCreateNestedManyWithoutUserInput
  watchlist: UserMovieWatchlistCreateNestedManyWithoutUserInput
}

input MovifierAppUserCreateNestedOneWithoutLikedMovieReviewsInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutLikedMovieReviewsInput
  create: MovifierAppUserCreateWithoutLikedMovieReviewsInput
}

input MovifierAppUserCreateNestedOneWithoutLikedMoviesInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutLikedMoviesInput
  create: MovifierAppUserCreateWithoutLikedMoviesInput
}

input MovifierAppUserCreateNestedOneWithoutMovieListLikedByUserInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutMovieListLikedByUserInput
  create: MovifierAppUserCreateWithoutMovieListLikedByUserInput
}

input MovifierAppUserCreateNestedOneWithoutMovieListsCommentsInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutMovieListsCommentsInput
  create: MovifierAppUserCreateWithoutMovieListsCommentsInput
}

input MovifierAppUserCreateNestedOneWithoutMovieListsInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutMovieListsInput
  create: MovifierAppUserCreateWithoutMovieListsInput
}

input MovifierAppUserCreateNestedOneWithoutRatedMoviesInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutRatedMoviesInput
  create: MovifierAppUserCreateWithoutRatedMoviesInput
}

input MovifierAppUserCreateNestedOneWithoutWatchedMoviesInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutWatchedMoviesInput
  create: MovifierAppUserCreateWithoutWatchedMoviesInput
}

input MovifierAppUserCreateNestedOneWithoutWatchlistInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutWatchlistInput
  create: MovifierAppUserCreateWithoutWatchlistInput
}

input MovifierAppUserCreateOrConnectWithoutLikedMovieReviewsInput {
  create: MovifierAppUserCreateWithoutLikedMovieReviewsInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateOrConnectWithoutLikedMoviesInput {
  create: MovifierAppUserCreateWithoutLikedMoviesInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateOrConnectWithoutMovieListLikedByUserInput {
  create: MovifierAppUserCreateWithoutMovieListLikedByUserInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateOrConnectWithoutMovieListsCommentsInput {
  create: MovifierAppUserCreateWithoutMovieListsCommentsInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateOrConnectWithoutMovieListsInput {
  create: MovifierAppUserCreateWithoutMovieListsInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateOrConnectWithoutRatedMoviesInput {
  create: MovifierAppUserCreateWithoutRatedMoviesInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateOrConnectWithoutWatchedMoviesInput {
  create: MovifierAppUserCreateWithoutWatchedMoviesInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateOrConnectWithoutWatchlistInput {
  create: MovifierAppUserCreateWithoutWatchlistInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateWithoutLikedMovieReviewsInput {
  MovieListLikedByUser: MovieListLikedByUserCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  id: String
  likedMovies: MovieLikedByUserCreateNestedManyWithoutUserInput
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password: String!
  ratedMovies: MovieRatingCreateNestedManyWithoutUserInput
  role: MoviefireAppUserRole
  updatedAt: DateTimeISO
  username: String!
  watchedMovies: MovieWatchedByUserCreateNestedManyWithoutUserInput
  watchlist: UserMovieWatchlistCreateNestedManyWithoutUserInput
}

input MovifierAppUserCreateWithoutLikedMoviesInput {
  MovieListLikedByUser: MovieListLikedByUserCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  id: String
  likedMovieReviews: MovieReviewLikedByUserCreateNestedManyWithoutUserInput
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password: String!
  ratedMovies: MovieRatingCreateNestedManyWithoutUserInput
  role: MoviefireAppUserRole
  updatedAt: DateTimeISO
  username: String!
  watchedMovies: MovieWatchedByUserCreateNestedManyWithoutUserInput
  watchlist: UserMovieWatchlistCreateNestedManyWithoutUserInput
}

input MovifierAppUserCreateWithoutMovieListLikedByUserInput {
  createdAt: DateTimeISO
  email: String!
  id: String
  likedMovieReviews: MovieReviewLikedByUserCreateNestedManyWithoutUserInput
  likedMovies: MovieLikedByUserCreateNestedManyWithoutUserInput
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password: String!
  ratedMovies: MovieRatingCreateNestedManyWithoutUserInput
  role: MoviefireAppUserRole
  updatedAt: DateTimeISO
  username: String!
  watchedMovies: MovieWatchedByUserCreateNestedManyWithoutUserInput
  watchlist: UserMovieWatchlistCreateNestedManyWithoutUserInput
}

input MovifierAppUserCreateWithoutMovieListsCommentsInput {
  MovieListLikedByUser: MovieListLikedByUserCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  id: String
  likedMovieReviews: MovieReviewLikedByUserCreateNestedManyWithoutUserInput
  likedMovies: MovieLikedByUserCreateNestedManyWithoutUserInput
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  name: String!
  password: String!
  ratedMovies: MovieRatingCreateNestedManyWithoutUserInput
  role: MoviefireAppUserRole
  updatedAt: DateTimeISO
  username: String!
  watchedMovies: MovieWatchedByUserCreateNestedManyWithoutUserInput
  watchlist: UserMovieWatchlistCreateNestedManyWithoutUserInput
}

input MovifierAppUserCreateWithoutMovieListsInput {
  MovieListLikedByUser: MovieListLikedByUserCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  id: String
  likedMovieReviews: MovieReviewLikedByUserCreateNestedManyWithoutUserInput
  likedMovies: MovieLikedByUserCreateNestedManyWithoutUserInput
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password: String!
  ratedMovies: MovieRatingCreateNestedManyWithoutUserInput
  role: MoviefireAppUserRole
  updatedAt: DateTimeISO
  username: String!
  watchedMovies: MovieWatchedByUserCreateNestedManyWithoutUserInput
  watchlist: UserMovieWatchlistCreateNestedManyWithoutUserInput
}

input MovifierAppUserCreateWithoutRatedMoviesInput {
  MovieListLikedByUser: MovieListLikedByUserCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  id: String
  likedMovieReviews: MovieReviewLikedByUserCreateNestedManyWithoutUserInput
  likedMovies: MovieLikedByUserCreateNestedManyWithoutUserInput
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password: String!
  role: MoviefireAppUserRole
  updatedAt: DateTimeISO
  username: String!
  watchedMovies: MovieWatchedByUserCreateNestedManyWithoutUserInput
  watchlist: UserMovieWatchlistCreateNestedManyWithoutUserInput
}

input MovifierAppUserCreateWithoutWatchedMoviesInput {
  MovieListLikedByUser: MovieListLikedByUserCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  id: String
  likedMovieReviews: MovieReviewLikedByUserCreateNestedManyWithoutUserInput
  likedMovies: MovieLikedByUserCreateNestedManyWithoutUserInput
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password: String!
  ratedMovies: MovieRatingCreateNestedManyWithoutUserInput
  role: MoviefireAppUserRole
  updatedAt: DateTimeISO
  username: String!
  watchlist: UserMovieWatchlistCreateNestedManyWithoutUserInput
}

input MovifierAppUserCreateWithoutWatchlistInput {
  MovieListLikedByUser: MovieListLikedByUserCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  id: String
  likedMovieReviews: MovieReviewLikedByUserCreateNestedManyWithoutUserInput
  likedMovies: MovieLikedByUserCreateNestedManyWithoutUserInput
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password: String!
  ratedMovies: MovieRatingCreateNestedManyWithoutUserInput
  role: MoviefireAppUserRole
  updatedAt: DateTimeISO
  username: String!
  watchedMovies: MovieWatchedByUserCreateNestedManyWithoutUserInput
}

enum MovifierAppUserOrderByRelevanceFieldEnum {
  email
  id
  name
  password
  username
}

input MovifierAppUserOrderByRelevanceInput {
  fields: [MovifierAppUserOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovifierAppUserOrderByWithRelationAndSearchRelevanceInput {
  MovieListLikedByUser: MovieListLikedByUserOrderByRelationAggregateInput
  _relevance: MovifierAppUserOrderByRelevanceInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  likedMovieReviews: MovieReviewLikedByUserOrderByRelationAggregateInput
  likedMovies: MovieLikedByUserOrderByRelationAggregateInput
  movieLists: MovieListOrderByRelationAggregateInput
  movieListsComments: MovieListCommentOrderByRelationAggregateInput
  name: SortOrder
  password: SortOrder
  ratedMovies: MovieRatingOrderByRelationAggregateInput
  role: SortOrder
  updatedAt: SortOrder
  username: SortOrder
  watchedMovies: MovieWatchedByUserOrderByRelationAggregateInput
  watchlist: UserMovieWatchlistOrderByRelationAggregateInput
}

input MovifierAppUserRelationFilter {
  is: MovifierAppUserWhereInput
  isNot: MovifierAppUserWhereInput
}

enum MovifierAppUserScalarFieldEnum {
  createdAt
  email
  id
  name
  password
  role
  updatedAt
  username
}

input MovifierAppUserUpdateOneRequiredWithoutLikedMovieReviewsNestedInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutLikedMovieReviewsInput
  create: MovifierAppUserCreateWithoutLikedMovieReviewsInput
  update: MovifierAppUserUpdateToOneWithWhereWithoutLikedMovieReviewsInput
  upsert: MovifierAppUserUpsertWithoutLikedMovieReviewsInput
}

input MovifierAppUserUpdateOneRequiredWithoutLikedMoviesNestedInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutLikedMoviesInput
  create: MovifierAppUserCreateWithoutLikedMoviesInput
  update: MovifierAppUserUpdateToOneWithWhereWithoutLikedMoviesInput
  upsert: MovifierAppUserUpsertWithoutLikedMoviesInput
}

input MovifierAppUserUpdateOneRequiredWithoutMovieListLikedByUserNestedInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutMovieListLikedByUserInput
  create: MovifierAppUserCreateWithoutMovieListLikedByUserInput
  update: MovifierAppUserUpdateToOneWithWhereWithoutMovieListLikedByUserInput
  upsert: MovifierAppUserUpsertWithoutMovieListLikedByUserInput
}

input MovifierAppUserUpdateOneRequiredWithoutMovieListsCommentsNestedInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutMovieListsCommentsInput
  create: MovifierAppUserCreateWithoutMovieListsCommentsInput
  update: MovifierAppUserUpdateToOneWithWhereWithoutMovieListsCommentsInput
  upsert: MovifierAppUserUpsertWithoutMovieListsCommentsInput
}

input MovifierAppUserUpdateOneRequiredWithoutMovieListsNestedInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutMovieListsInput
  create: MovifierAppUserCreateWithoutMovieListsInput
  update: MovifierAppUserUpdateToOneWithWhereWithoutMovieListsInput
  upsert: MovifierAppUserUpsertWithoutMovieListsInput
}

input MovifierAppUserUpdateOneRequiredWithoutRatedMoviesNestedInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutRatedMoviesInput
  create: MovifierAppUserCreateWithoutRatedMoviesInput
  update: MovifierAppUserUpdateToOneWithWhereWithoutRatedMoviesInput
  upsert: MovifierAppUserUpsertWithoutRatedMoviesInput
}

input MovifierAppUserUpdateOneRequiredWithoutWatchedMoviesNestedInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutWatchedMoviesInput
  create: MovifierAppUserCreateWithoutWatchedMoviesInput
  update: MovifierAppUserUpdateToOneWithWhereWithoutWatchedMoviesInput
  upsert: MovifierAppUserUpsertWithoutWatchedMoviesInput
}

input MovifierAppUserUpdateOneRequiredWithoutWatchlistNestedInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutWatchlistInput
  create: MovifierAppUserCreateWithoutWatchlistInput
  update: MovifierAppUserUpdateToOneWithWhereWithoutWatchlistInput
  upsert: MovifierAppUserUpsertWithoutWatchlistInput
}

input MovifierAppUserUpdateToOneWithWhereWithoutLikedMovieReviewsInput {
  data: MovifierAppUserUpdateWithoutLikedMovieReviewsInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpdateToOneWithWhereWithoutLikedMoviesInput {
  data: MovifierAppUserUpdateWithoutLikedMoviesInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpdateToOneWithWhereWithoutMovieListLikedByUserInput {
  data: MovifierAppUserUpdateWithoutMovieListLikedByUserInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpdateToOneWithWhereWithoutMovieListsCommentsInput {
  data: MovifierAppUserUpdateWithoutMovieListsCommentsInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpdateToOneWithWhereWithoutMovieListsInput {
  data: MovifierAppUserUpdateWithoutMovieListsInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpdateToOneWithWhereWithoutRatedMoviesInput {
  data: MovifierAppUserUpdateWithoutRatedMoviesInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpdateToOneWithWhereWithoutWatchedMoviesInput {
  data: MovifierAppUserUpdateWithoutWatchedMoviesInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpdateToOneWithWhereWithoutWatchlistInput {
  data: MovifierAppUserUpdateWithoutWatchlistInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpdateWithoutLikedMovieReviewsInput {
  MovieListLikedByUser: MovieListLikedByUserUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likedMovies: MovieLikedByUserUpdateManyWithoutUserNestedInput
  movieLists: MovieListUpdateManyWithoutMovieListAuthorNestedInput
  movieListsComments: MovieListCommentUpdateManyWithoutUserNestedInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  ratedMovies: MovieRatingUpdateManyWithoutUserNestedInput
  role: EnumMoviefireAppUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchedMovies: MovieWatchedByUserUpdateManyWithoutUserNestedInput
  watchlist: UserMovieWatchlistUpdateManyWithoutUserNestedInput
}

input MovifierAppUserUpdateWithoutLikedMoviesInput {
  MovieListLikedByUser: MovieListLikedByUserUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likedMovieReviews: MovieReviewLikedByUserUpdateManyWithoutUserNestedInput
  movieLists: MovieListUpdateManyWithoutMovieListAuthorNestedInput
  movieListsComments: MovieListCommentUpdateManyWithoutUserNestedInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  ratedMovies: MovieRatingUpdateManyWithoutUserNestedInput
  role: EnumMoviefireAppUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchedMovies: MovieWatchedByUserUpdateManyWithoutUserNestedInput
  watchlist: UserMovieWatchlistUpdateManyWithoutUserNestedInput
}

input MovifierAppUserUpdateWithoutMovieListLikedByUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likedMovieReviews: MovieReviewLikedByUserUpdateManyWithoutUserNestedInput
  likedMovies: MovieLikedByUserUpdateManyWithoutUserNestedInput
  movieLists: MovieListUpdateManyWithoutMovieListAuthorNestedInput
  movieListsComments: MovieListCommentUpdateManyWithoutUserNestedInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  ratedMovies: MovieRatingUpdateManyWithoutUserNestedInput
  role: EnumMoviefireAppUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchedMovies: MovieWatchedByUserUpdateManyWithoutUserNestedInput
  watchlist: UserMovieWatchlistUpdateManyWithoutUserNestedInput
}

input MovifierAppUserUpdateWithoutMovieListsCommentsInput {
  MovieListLikedByUser: MovieListLikedByUserUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likedMovieReviews: MovieReviewLikedByUserUpdateManyWithoutUserNestedInput
  likedMovies: MovieLikedByUserUpdateManyWithoutUserNestedInput
  movieLists: MovieListUpdateManyWithoutMovieListAuthorNestedInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  ratedMovies: MovieRatingUpdateManyWithoutUserNestedInput
  role: EnumMoviefireAppUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchedMovies: MovieWatchedByUserUpdateManyWithoutUserNestedInput
  watchlist: UserMovieWatchlistUpdateManyWithoutUserNestedInput
}

input MovifierAppUserUpdateWithoutMovieListsInput {
  MovieListLikedByUser: MovieListLikedByUserUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likedMovieReviews: MovieReviewLikedByUserUpdateManyWithoutUserNestedInput
  likedMovies: MovieLikedByUserUpdateManyWithoutUserNestedInput
  movieListsComments: MovieListCommentUpdateManyWithoutUserNestedInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  ratedMovies: MovieRatingUpdateManyWithoutUserNestedInput
  role: EnumMoviefireAppUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchedMovies: MovieWatchedByUserUpdateManyWithoutUserNestedInput
  watchlist: UserMovieWatchlistUpdateManyWithoutUserNestedInput
}

input MovifierAppUserUpdateWithoutRatedMoviesInput {
  MovieListLikedByUser: MovieListLikedByUserUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likedMovieReviews: MovieReviewLikedByUserUpdateManyWithoutUserNestedInput
  likedMovies: MovieLikedByUserUpdateManyWithoutUserNestedInput
  movieLists: MovieListUpdateManyWithoutMovieListAuthorNestedInput
  movieListsComments: MovieListCommentUpdateManyWithoutUserNestedInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumMoviefireAppUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchedMovies: MovieWatchedByUserUpdateManyWithoutUserNestedInput
  watchlist: UserMovieWatchlistUpdateManyWithoutUserNestedInput
}

input MovifierAppUserUpdateWithoutWatchedMoviesInput {
  MovieListLikedByUser: MovieListLikedByUserUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likedMovieReviews: MovieReviewLikedByUserUpdateManyWithoutUserNestedInput
  likedMovies: MovieLikedByUserUpdateManyWithoutUserNestedInput
  movieLists: MovieListUpdateManyWithoutMovieListAuthorNestedInput
  movieListsComments: MovieListCommentUpdateManyWithoutUserNestedInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  ratedMovies: MovieRatingUpdateManyWithoutUserNestedInput
  role: EnumMoviefireAppUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchlist: UserMovieWatchlistUpdateManyWithoutUserNestedInput
}

input MovifierAppUserUpdateWithoutWatchlistInput {
  MovieListLikedByUser: MovieListLikedByUserUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likedMovieReviews: MovieReviewLikedByUserUpdateManyWithoutUserNestedInput
  likedMovies: MovieLikedByUserUpdateManyWithoutUserNestedInput
  movieLists: MovieListUpdateManyWithoutMovieListAuthorNestedInput
  movieListsComments: MovieListCommentUpdateManyWithoutUserNestedInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  ratedMovies: MovieRatingUpdateManyWithoutUserNestedInput
  role: EnumMoviefireAppUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchedMovies: MovieWatchedByUserUpdateManyWithoutUserNestedInput
}

input MovifierAppUserUpsertWithoutLikedMovieReviewsInput {
  create: MovifierAppUserCreateWithoutLikedMovieReviewsInput!
  update: MovifierAppUserUpdateWithoutLikedMovieReviewsInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpsertWithoutLikedMoviesInput {
  create: MovifierAppUserCreateWithoutLikedMoviesInput!
  update: MovifierAppUserUpdateWithoutLikedMoviesInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpsertWithoutMovieListLikedByUserInput {
  create: MovifierAppUserCreateWithoutMovieListLikedByUserInput!
  update: MovifierAppUserUpdateWithoutMovieListLikedByUserInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpsertWithoutMovieListsCommentsInput {
  create: MovifierAppUserCreateWithoutMovieListsCommentsInput!
  update: MovifierAppUserUpdateWithoutMovieListsCommentsInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpsertWithoutMovieListsInput {
  create: MovifierAppUserCreateWithoutMovieListsInput!
  update: MovifierAppUserUpdateWithoutMovieListsInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpsertWithoutRatedMoviesInput {
  create: MovifierAppUserCreateWithoutRatedMoviesInput!
  update: MovifierAppUserUpdateWithoutRatedMoviesInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpsertWithoutWatchedMoviesInput {
  create: MovifierAppUserCreateWithoutWatchedMoviesInput!
  update: MovifierAppUserUpdateWithoutWatchedMoviesInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpsertWithoutWatchlistInput {
  create: MovifierAppUserCreateWithoutWatchlistInput!
  update: MovifierAppUserUpdateWithoutWatchlistInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserWhereInput {
  AND: [MovifierAppUserWhereInput!]
  MovieListLikedByUser: MovieListLikedByUserListRelationFilter
  NOT: [MovifierAppUserWhereInput!]
  OR: [MovifierAppUserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  likedMovieReviews: MovieReviewLikedByUserListRelationFilter
  likedMovies: MovieLikedByUserListRelationFilter
  movieLists: MovieListListRelationFilter
  movieListsComments: MovieListCommentListRelationFilter
  name: StringFilter
  password: StringFilter
  ratedMovies: MovieRatingListRelationFilter
  role: EnumMoviefireAppUserRoleFilter
  updatedAt: DateTimeFilter
  username: StringFilter
  watchedMovies: MovieWatchedByUserListRelationFilter
  watchlist: UserMovieWatchlistListRelationFilter
}

input MovifierAppUserWhereUniqueInput {
  AND: [MovifierAppUserWhereInput!]
  MovieListLikedByUser: MovieListLikedByUserListRelationFilter
  NOT: [MovifierAppUserWhereInput!]
  OR: [MovifierAppUserWhereInput!]
  createdAt: DateTimeFilter
  email: String
  id: String
  likedMovieReviews: MovieReviewLikedByUserListRelationFilter
  likedMovies: MovieLikedByUserListRelationFilter
  movieLists: MovieListListRelationFilter
  movieListsComments: MovieListCommentListRelationFilter
  name: StringFilter
  password: StringFilter
  ratedMovies: MovieRatingListRelationFilter
  role: EnumMoviefireAppUserRoleFilter
  updatedAt: DateTimeFilter
  username: String
  watchedMovies: MovieWatchedByUserListRelationFilter
  watchlist: UserMovieWatchlistListRelationFilter
}

type Mutation {
  createManyGenre(data: [GenreCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovie(data: [MovieCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieLikedByUser(data: [MovieLikedByUserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieList(data: [MovieListCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieRating(data: [MovieRatingCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieReview(data: [MovieReviewCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieReviewLikedByUser(data: [MovieReviewLikedByUserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieSpokenLanguage(data: [MovieSpokenLanguageCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieWatchedByUser(data: [MovieWatchedByUserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserMovieWatchlist(data: [UserMovieWatchlistCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneGenre(data: GenreCreateInput!): Genre!
  createOneMovie(data: MovieCreateInput!): Movie!
  createOneMovieLikedByUser(data: MovieLikedByUserCreateInput!): MovieLikedByUser!
  createOneMovieList(data: MovieListCreateInput!): MovieList!
  createOneMovieRating(data: MovieRatingCreateInput!): MovieRating!
  createOneMovieReview(data: MovieReviewCreateInput!): MovieReview!
  createOneMovieReviewLikedByUser(data: MovieReviewLikedByUserCreateInput!): MovieReviewLikedByUser!
  createOneMovieSpokenLanguage(data: MovieSpokenLanguageCreateInput!): MovieSpokenLanguage!
  createOneMovieWatchedByUser(data: MovieWatchedByUserCreateInput!): MovieWatchedByUser!
  createOneMovifierAppUser(data: MovifierAppUserCreateInput!): UserRegisterOutput!
  createOneUserMovieWatchlist(data: UserMovieWatchlistCreateInput!): UserMovieWatchlist!
  deleteManyGenre(where: GenreWhereInput): AffectedRowsOutput!
  deleteManyMovie(where: MovieWhereInput): AffectedRowsOutput!
  deleteManyMovieLikedByUser(where: MovieLikedByUserWhereInput): AffectedRowsOutput!
  deleteManyMovieList(where: MovieListWhereInput): AffectedRowsOutput!
  deleteManyMovieRating(where: MovieRatingWhereInput): AffectedRowsOutput!
  deleteManyMovieReview(where: MovieReviewWhereInput): AffectedRowsOutput!
  deleteManyMovieReviewLikedByUser(where: MovieReviewLikedByUserWhereInput): AffectedRowsOutput!
  deleteManyMovieSpokenLanguage(where: MovieSpokenLanguageWhereInput): AffectedRowsOutput!
  deleteManyMovieWatchedByUser(where: MovieWatchedByUserWhereInput): AffectedRowsOutput!
  deleteManyUserMovieWatchlist(where: UserMovieWatchlistWhereInput): AffectedRowsOutput!
  deleteOneGenre(where: GenreWhereUniqueInput!): Genre
  deleteOneMovie(where: MovieWhereUniqueInput!): Movie
  deleteOneMovieLikedByUser(where: MovieLikedByUserWhereUniqueInput!): MovieLikedByUser
  deleteOneMovieList(where: MovieListWhereUniqueInput!): MovieList
  deleteOneMovieRating(where: MovieRatingWhereUniqueInput!): MovieRating
  deleteOneMovieReview(where: MovieReviewWhereUniqueInput!): MovieReview
  deleteOneMovieReviewLikedByUser(where: MovieReviewLikedByUserWhereUniqueInput!): MovieReviewLikedByUser
  deleteOneMovieSpokenLanguage(where: MovieSpokenLanguageWhereUniqueInput!): MovieSpokenLanguage
  deleteOneMovieWatchedByUser(where: MovieWatchedByUserWhereUniqueInput!): MovieWatchedByUser
  deleteOneUserMovieWatchlist(where: UserMovieWatchlistWhereUniqueInput!): UserMovieWatchlist
  fetchMovieFromTmdb(imdbId: String!): Movie
  loginUser(data: UserLoginInput!): UserLoginOutput!
  updateManyGenre(data: GenreUpdateManyMutationInput!, where: GenreWhereInput): AffectedRowsOutput!
  updateManyMovie(data: MovieUpdateManyMutationInput!, where: MovieWhereInput): AffectedRowsOutput!
  updateManyMovieLikedByUser(data: MovieLikedByUserUpdateManyMutationInput!, where: MovieLikedByUserWhereInput): AffectedRowsOutput!
  updateManyMovieList(data: MovieListUpdateManyMutationInput!, where: MovieListWhereInput): AffectedRowsOutput!
  updateManyMovieRating(data: MovieRatingUpdateManyMutationInput!, where: MovieRatingWhereInput): AffectedRowsOutput!
  updateManyMovieReview(data: MovieReviewUpdateManyMutationInput!, where: MovieReviewWhereInput): AffectedRowsOutput!
  updateManyMovieReviewLikedByUser(data: MovieReviewLikedByUserUpdateManyMutationInput!, where: MovieReviewLikedByUserWhereInput): AffectedRowsOutput!
  updateManyMovieSpokenLanguage(data: MovieSpokenLanguageUpdateManyMutationInput!, where: MovieSpokenLanguageWhereInput): AffectedRowsOutput!
  updateManyMovieWatchedByUser(data: MovieWatchedByUserUpdateManyMutationInput!, where: MovieWatchedByUserWhereInput): AffectedRowsOutput!
  updateManyUserMovieWatchlist(data: UserMovieWatchlistUpdateManyMutationInput!, where: UserMovieWatchlistWhereInput): AffectedRowsOutput!
  updateOneGenre(data: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre
  updateOneMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie
  updateOneMovieLikedByUser(data: MovieLikedByUserUpdateInput!, where: MovieLikedByUserWhereUniqueInput!): MovieLikedByUser
  updateOneMovieList(data: MovieListUpdateInput!, where: MovieListWhereUniqueInput!): MovieList
  updateOneMovieRating(data: MovieRatingUpdateInput!, where: MovieRatingWhereUniqueInput!): MovieRating
  updateOneMovieReview(data: MovieReviewUpdateInput!, where: MovieReviewWhereUniqueInput!): MovieReview
  updateOneMovieReviewLikedByUser(data: MovieReviewLikedByUserUpdateInput!, where: MovieReviewLikedByUserWhereUniqueInput!): MovieReviewLikedByUser
  updateOneMovieSpokenLanguage(data: MovieSpokenLanguageUpdateInput!, where: MovieSpokenLanguageWhereUniqueInput!): MovieSpokenLanguage
  updateOneMovieWatchedByUser(data: MovieWatchedByUserUpdateInput!, where: MovieWatchedByUserWhereUniqueInput!): MovieWatchedByUser
  updateOneUserMovieWatchlist(data: UserMovieWatchlistUpdateInput!, where: UserMovieWatchlistWhereUniqueInput!): UserMovieWatchlist
  upsertOneGenre(create: GenreCreateInput!, update: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre!
  upsertOneMovie(create: MovieCreateInput!, update: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie!
  upsertOneMovieLikedByUser(create: MovieLikedByUserCreateInput!, update: MovieLikedByUserUpdateInput!, where: MovieLikedByUserWhereUniqueInput!): MovieLikedByUser!
  upsertOneMovieList(create: MovieListCreateInput!, update: MovieListUpdateInput!, where: MovieListWhereUniqueInput!): MovieList!
  upsertOneMovieRating(create: MovieRatingCreateInput!, update: MovieRatingUpdateInput!, where: MovieRatingWhereUniqueInput!): MovieRating!
  upsertOneMovieReview(create: MovieReviewCreateInput!, update: MovieReviewUpdateInput!, where: MovieReviewWhereUniqueInput!): MovieReview!
  upsertOneMovieReviewLikedByUser(create: MovieReviewLikedByUserCreateInput!, update: MovieReviewLikedByUserUpdateInput!, where: MovieReviewLikedByUserWhereUniqueInput!): MovieReviewLikedByUser!
  upsertOneMovieSpokenLanguage(create: MovieSpokenLanguageCreateInput!, update: MovieSpokenLanguageUpdateInput!, where: MovieSpokenLanguageWhereUniqueInput!): MovieSpokenLanguage!
  upsertOneMovieWatchedByUser(create: MovieWatchedByUserCreateInput!, update: MovieWatchedByUserUpdateInput!, where: MovieWatchedByUserWhereUniqueInput!): MovieWatchedByUser!
  upsertOneUserMovieWatchlist(create: UserMovieWatchlistCreateInput!, update: UserMovieWatchlistUpdateInput!, where: UserMovieWatchlistWhereUniqueInput!): UserMovieWatchlist!
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedEnumMoviefireAppUserRoleFilter {
  equals: MoviefireAppUserRole
  in: [MoviefireAppUserRole!]
  not: NestedEnumMoviefireAppUserRoleFilter
  notIn: [MoviefireAppUserRole!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

type Query {
  aggregateGenre(cursor: GenreWhereUniqueInput, orderBy: [GenreOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: GenreWhereInput): AggregateGenre!
  aggregateMovie(cursor: MovieWhereUniqueInput, orderBy: [MovieOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWhereInput): AggregateMovie!
  aggregateMovieLikedByUser(cursor: MovieLikedByUserWhereUniqueInput, orderBy: [MovieLikedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieLikedByUserWhereInput): AggregateMovieLikedByUser!
  aggregateMovieList(cursor: MovieListWhereUniqueInput, orderBy: [MovieListOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieListWhereInput): AggregateMovieList!
  aggregateMovieRating(cursor: MovieRatingWhereUniqueInput, orderBy: [MovieRatingOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieRatingWhereInput): AggregateMovieRating!
  aggregateMovieReview(cursor: MovieReviewWhereUniqueInput, orderBy: [MovieReviewOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieReviewWhereInput): AggregateMovieReview!
  aggregateMovieReviewLikedByUser(cursor: MovieReviewLikedByUserWhereUniqueInput, orderBy: [MovieReviewLikedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieReviewLikedByUserWhereInput): AggregateMovieReviewLikedByUser!
  aggregateMovieSpokenLanguage(cursor: MovieSpokenLanguageWhereUniqueInput, orderBy: [MovieSpokenLanguageOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieSpokenLanguageWhereInput): AggregateMovieSpokenLanguage!
  aggregateMovieWatchedByUser(cursor: MovieWatchedByUserWhereUniqueInput, orderBy: [MovieWatchedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWatchedByUserWhereInput): AggregateMovieWatchedByUser!
  aggregateUserMovieWatchlist(cursor: UserMovieWatchlistWhereUniqueInput, orderBy: [UserMovieWatchlistOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: UserMovieWatchlistWhereInput): AggregateUserMovieWatchlist!
  findFirstGenre(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum!], orderBy: [GenreOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: GenreWhereInput): Genre
  findFirstGenreOrThrow(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum!], orderBy: [GenreOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: GenreWhereInput): Genre
  findFirstMovie(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWhereInput): Movie
  findFirstMovieLikedByUser(cursor: MovieLikedByUserWhereUniqueInput, distinct: [MovieLikedByUserScalarFieldEnum!], orderBy: [MovieLikedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieLikedByUserWhereInput): MovieLikedByUser
  findFirstMovieLikedByUserOrThrow(cursor: MovieLikedByUserWhereUniqueInput, distinct: [MovieLikedByUserScalarFieldEnum!], orderBy: [MovieLikedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieLikedByUserWhereInput): MovieLikedByUser
  findFirstMovieList(cursor: MovieListWhereUniqueInput, distinct: [MovieListScalarFieldEnum!], orderBy: [MovieListOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieListWhereInput): MovieList
  findFirstMovieListOrThrow(cursor: MovieListWhereUniqueInput, distinct: [MovieListScalarFieldEnum!], orderBy: [MovieListOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieListWhereInput): MovieList
  findFirstMovieOrThrow(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWhereInput): Movie
  findFirstMovieRating(cursor: MovieRatingWhereUniqueInput, distinct: [MovieRatingScalarFieldEnum!], orderBy: [MovieRatingOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieRatingWhereInput): MovieRating
  findFirstMovieRatingOrThrow(cursor: MovieRatingWhereUniqueInput, distinct: [MovieRatingScalarFieldEnum!], orderBy: [MovieRatingOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieRatingWhereInput): MovieRating
  findFirstMovieReview(cursor: MovieReviewWhereUniqueInput, distinct: [MovieReviewScalarFieldEnum!], orderBy: [MovieReviewOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieReviewWhereInput): MovieReview
  findFirstMovieReviewLikedByUser(cursor: MovieReviewLikedByUserWhereUniqueInput, distinct: [MovieReviewLikedByUserScalarFieldEnum!], orderBy: [MovieReviewLikedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieReviewLikedByUserWhereInput): MovieReviewLikedByUser
  findFirstMovieReviewLikedByUserOrThrow(cursor: MovieReviewLikedByUserWhereUniqueInput, distinct: [MovieReviewLikedByUserScalarFieldEnum!], orderBy: [MovieReviewLikedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieReviewLikedByUserWhereInput): MovieReviewLikedByUser
  findFirstMovieReviewOrThrow(cursor: MovieReviewWhereUniqueInput, distinct: [MovieReviewScalarFieldEnum!], orderBy: [MovieReviewOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieReviewWhereInput): MovieReview
  findFirstMovieSpokenLanguage(cursor: MovieSpokenLanguageWhereUniqueInput, distinct: [MovieSpokenLanguageScalarFieldEnum!], orderBy: [MovieSpokenLanguageOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieSpokenLanguageWhereInput): MovieSpokenLanguage
  findFirstMovieSpokenLanguageOrThrow(cursor: MovieSpokenLanguageWhereUniqueInput, distinct: [MovieSpokenLanguageScalarFieldEnum!], orderBy: [MovieSpokenLanguageOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieSpokenLanguageWhereInput): MovieSpokenLanguage
  findFirstMovieWatchedByUser(cursor: MovieWatchedByUserWhereUniqueInput, distinct: [MovieWatchedByUserScalarFieldEnum!], orderBy: [MovieWatchedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWatchedByUserWhereInput): MovieWatchedByUser
  findFirstMovieWatchedByUserOrThrow(cursor: MovieWatchedByUserWhereUniqueInput, distinct: [MovieWatchedByUserScalarFieldEnum!], orderBy: [MovieWatchedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWatchedByUserWhereInput): MovieWatchedByUser
  findFirstUserMovieWatchlist(cursor: UserMovieWatchlistWhereUniqueInput, distinct: [UserMovieWatchlistScalarFieldEnum!], orderBy: [UserMovieWatchlistOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: UserMovieWatchlistWhereInput): UserMovieWatchlist
  findFirstUserMovieWatchlistOrThrow(cursor: UserMovieWatchlistWhereUniqueInput, distinct: [UserMovieWatchlistScalarFieldEnum!], orderBy: [UserMovieWatchlistOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: UserMovieWatchlistWhereInput): UserMovieWatchlist
  genre(where: GenreWhereUniqueInput!): Genre
  genres(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum!], orderBy: [GenreOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: GenreWhereInput): [Genre!]!
  getGenre(where: GenreWhereUniqueInput!): Genre
  getMovie(where: MovieWhereUniqueInput!): Movie
  getMovieDecades: Decades!
  getMovieLikedByUser(where: MovieLikedByUserWhereUniqueInput!): MovieLikedByUser
  getMovieList(where: MovieListWhereUniqueInput!): MovieList
  getMovieRating(where: MovieRatingWhereUniqueInput!): MovieRating
  getMovieReview(where: MovieReviewWhereUniqueInput!): MovieReview
  getMovieReviewLikedByUser(where: MovieReviewLikedByUserWhereUniqueInput!): MovieReviewLikedByUser
  getMovieSpokenLanguage(where: MovieSpokenLanguageWhereUniqueInput!): MovieSpokenLanguage
  getMovieWatchedByUser(where: MovieWatchedByUserWhereUniqueInput!): MovieWatchedByUser
  getUserMovieWatchlist(where: UserMovieWatchlistWhereUniqueInput!): UserMovieWatchlist
  groupByGenre(by: [GenreScalarFieldEnum!]!, having: GenreScalarWhereWithAggregatesInput, orderBy: [GenreOrderByWithAggregationInput!], skip: Int, take: Int, where: GenreWhereInput): [GenreGroupBy!]!
  groupByMovie(by: [MovieScalarFieldEnum!]!, having: MovieScalarWhereWithAggregatesInput, orderBy: [MovieOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieWhereInput): [MovieGroupBy!]!
  groupByMovieLikedByUser(by: [MovieLikedByUserScalarFieldEnum!]!, having: MovieLikedByUserScalarWhereWithAggregatesInput, orderBy: [MovieLikedByUserOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieLikedByUserWhereInput): [MovieLikedByUserGroupBy!]!
  groupByMovieList(by: [MovieListScalarFieldEnum!]!, having: MovieListScalarWhereWithAggregatesInput, orderBy: [MovieListOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieListWhereInput): [MovieListGroupBy!]!
  groupByMovieRating(by: [MovieRatingScalarFieldEnum!]!, having: MovieRatingScalarWhereWithAggregatesInput, orderBy: [MovieRatingOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieRatingWhereInput): [MovieRatingGroupBy!]!
  groupByMovieReview(by: [MovieReviewScalarFieldEnum!]!, having: MovieReviewScalarWhereWithAggregatesInput, orderBy: [MovieReviewOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieReviewWhereInput): [MovieReviewGroupBy!]!
  groupByMovieReviewLikedByUser(by: [MovieReviewLikedByUserScalarFieldEnum!]!, having: MovieReviewLikedByUserScalarWhereWithAggregatesInput, orderBy: [MovieReviewLikedByUserOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieReviewLikedByUserWhereInput): [MovieReviewLikedByUserGroupBy!]!
  groupByMovieSpokenLanguage(by: [MovieSpokenLanguageScalarFieldEnum!]!, having: MovieSpokenLanguageScalarWhereWithAggregatesInput, orderBy: [MovieSpokenLanguageOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieSpokenLanguageWhereInput): [MovieSpokenLanguageGroupBy!]!
  groupByMovieWatchedByUser(by: [MovieWatchedByUserScalarFieldEnum!]!, having: MovieWatchedByUserScalarWhereWithAggregatesInput, orderBy: [MovieWatchedByUserOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieWatchedByUserWhereInput): [MovieWatchedByUserGroupBy!]!
  groupByUserMovieWatchlist(by: [UserMovieWatchlistScalarFieldEnum!]!, having: UserMovieWatchlistScalarWhereWithAggregatesInput, orderBy: [UserMovieWatchlistOrderByWithAggregationInput!], skip: Int, take: Int, where: UserMovieWatchlistWhereInput): [UserMovieWatchlistGroupBy!]!
  me: MovifierAppUser
  movie(where: MovieWhereUniqueInput!): Movie
  movieLikedByUser(where: MovieLikedByUserWhereUniqueInput!): MovieLikedByUser
  movieLikedByUsers(cursor: MovieLikedByUserWhereUniqueInput, distinct: [MovieLikedByUserScalarFieldEnum!], orderBy: [MovieLikedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieLikedByUserWhereInput): [MovieLikedByUser!]!
  movieList(where: MovieListWhereUniqueInput!): MovieList
  movieLists(cursor: MovieListWhereUniqueInput, distinct: [MovieListScalarFieldEnum!], orderBy: [MovieListOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieListWhereInput): [MovieList!]!
  movieRating(where: MovieRatingWhereUniqueInput!): MovieRating
  movieRatings(cursor: MovieRatingWhereUniqueInput, distinct: [MovieRatingScalarFieldEnum!], orderBy: [MovieRatingOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieRatingWhereInput): [MovieRating!]!
  movieReview(where: MovieReviewWhereUniqueInput!): MovieReview
  movieReviewLikedByUser(where: MovieReviewLikedByUserWhereUniqueInput!): MovieReviewLikedByUser
  movieReviewLikedByUsers(cursor: MovieReviewLikedByUserWhereUniqueInput, distinct: [MovieReviewLikedByUserScalarFieldEnum!], orderBy: [MovieReviewLikedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieReviewLikedByUserWhereInput): [MovieReviewLikedByUser!]!
  movieReviews(cursor: MovieReviewWhereUniqueInput, distinct: [MovieReviewScalarFieldEnum!], orderBy: [MovieReviewOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieReviewWhereInput): [MovieReview!]!
  movieSpokenLanguage(where: MovieSpokenLanguageWhereUniqueInput!): MovieSpokenLanguage
  movieSpokenLanguages(cursor: MovieSpokenLanguageWhereUniqueInput, distinct: [MovieSpokenLanguageScalarFieldEnum!], orderBy: [MovieSpokenLanguageOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieSpokenLanguageWhereInput): [MovieSpokenLanguage!]!
  movieWatchedByUser(where: MovieWatchedByUserWhereUniqueInput!): MovieWatchedByUser
  movieWatchedByUsers(cursor: MovieWatchedByUserWhereUniqueInput, distinct: [MovieWatchedByUserScalarFieldEnum!], orderBy: [MovieWatchedByUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWatchedByUserWhereInput): [MovieWatchedByUser!]!
  movies(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
  movifierAppUsers(cursor: MovifierAppUserWhereUniqueInput, distinct: [MovifierAppUserScalarFieldEnum!], orderBy: [MovifierAppUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovifierAppUserWhereInput): [MovifierAppUser!]!
  searchMovieLists(cursor: MovieListWhereUniqueInput, distinct: [MovieListScalarFieldEnum!], orderBy: [MovieListOrderByWithRelationAndSearchRelevanceInput!], searchCriteria: MovieListSearchCriteriaInput!, skip: Int, take: Int, where: MovieListWhereInput): [MovieList!]!
  searchMovies(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationAndSearchRelevanceInput!], searchCriteria: MoviesSearchCriteriaInput!, skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
  userMovieWatchlist(where: UserMovieWatchlistWhereUniqueInput!): UserMovieWatchlist
  userMovieWatchlists(cursor: UserMovieWatchlistWhereUniqueInput, distinct: [UserMovieWatchlistScalarFieldEnum!], orderBy: [UserMovieWatchlistOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: UserMovieWatchlistWhereInput): [UserMovieWatchlist!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input UserLoginInput {
  email: String!
  password: String!
}

type UserLoginOutput {
  token: String!
  user: MovifierAppUser!
}

type UserMovieWatchlist {
  createdAt: DateTimeISO!
  movie: Movie!
  movieId: String!
  user: MovifierAppUser!
  userId: String!
}

type UserMovieWatchlistCountAggregate {
  _all: Int!
  createdAt: Int!
  movieId: Int!
  userId: Int!
}

input UserMovieWatchlistCountOrderByAggregateInput {
  createdAt: SortOrder
  movieId: SortOrder
  userId: SortOrder
}

input UserMovieWatchlistCreateInput {
  createdAt: DateTimeISO
  movie: MovieCreateNestedOneWithoutInWatchlistByUsersInput!
  user: MovifierAppUserCreateNestedOneWithoutWatchlistInput!
}

input UserMovieWatchlistCreateManyInput {
  createdAt: DateTimeISO
  movieId: String!
  userId: String!
}

input UserMovieWatchlistCreateManyMovieInput {
  createdAt: DateTimeISO
  userId: String!
}

input UserMovieWatchlistCreateManyMovieInputEnvelope {
  data: [UserMovieWatchlistCreateManyMovieInput!]!
  skipDuplicates: Boolean
}

input UserMovieWatchlistCreateManyUserInput {
  createdAt: DateTimeISO
  movieId: String!
}

input UserMovieWatchlistCreateManyUserInputEnvelope {
  data: [UserMovieWatchlistCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserMovieWatchlistCreateNestedManyWithoutMovieInput {
  connect: [UserMovieWatchlistWhereUniqueInput!]
  connectOrCreate: [UserMovieWatchlistCreateOrConnectWithoutMovieInput!]
  create: [UserMovieWatchlistCreateWithoutMovieInput!]
  createMany: UserMovieWatchlistCreateManyMovieInputEnvelope
}

input UserMovieWatchlistCreateNestedManyWithoutUserInput {
  connect: [UserMovieWatchlistWhereUniqueInput!]
  connectOrCreate: [UserMovieWatchlistCreateOrConnectWithoutUserInput!]
  create: [UserMovieWatchlistCreateWithoutUserInput!]
  createMany: UserMovieWatchlistCreateManyUserInputEnvelope
}

input UserMovieWatchlistCreateOrConnectWithoutMovieInput {
  create: UserMovieWatchlistCreateWithoutMovieInput!
  where: UserMovieWatchlistWhereUniqueInput!
}

input UserMovieWatchlistCreateOrConnectWithoutUserInput {
  create: UserMovieWatchlistCreateWithoutUserInput!
  where: UserMovieWatchlistWhereUniqueInput!
}

input UserMovieWatchlistCreateWithoutMovieInput {
  createdAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutWatchlistInput!
}

input UserMovieWatchlistCreateWithoutUserInput {
  createdAt: DateTimeISO
  movie: MovieCreateNestedOneWithoutInWatchlistByUsersInput!
}

type UserMovieWatchlistGroupBy {
  _count: UserMovieWatchlistCountAggregate
  _max: UserMovieWatchlistMaxAggregate
  _min: UserMovieWatchlistMinAggregate
  createdAt: DateTimeISO!
  movieId: String!
  userId: String!
}

input UserMovieWatchlistListRelationFilter {
  every: UserMovieWatchlistWhereInput
  none: UserMovieWatchlistWhereInput
  some: UserMovieWatchlistWhereInput
}

type UserMovieWatchlistMaxAggregate {
  createdAt: DateTimeISO
  movieId: String
  userId: String
}

input UserMovieWatchlistMaxOrderByAggregateInput {
  createdAt: SortOrder
  movieId: SortOrder
  userId: SortOrder
}

type UserMovieWatchlistMinAggregate {
  createdAt: DateTimeISO
  movieId: String
  userId: String
}

input UserMovieWatchlistMinOrderByAggregateInput {
  createdAt: SortOrder
  movieId: SortOrder
  userId: SortOrder
}

input UserMovieWatchlistOrderByRelationAggregateInput {
  _count: SortOrder
}

enum UserMovieWatchlistOrderByRelevanceFieldEnum {
  movieId
  userId
}

input UserMovieWatchlistOrderByRelevanceInput {
  fields: [UserMovieWatchlistOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UserMovieWatchlistOrderByWithAggregationInput {
  _count: UserMovieWatchlistCountOrderByAggregateInput
  _max: UserMovieWatchlistMaxOrderByAggregateInput
  _min: UserMovieWatchlistMinOrderByAggregateInput
  createdAt: SortOrder
  movieId: SortOrder
  userId: SortOrder
}

input UserMovieWatchlistOrderByWithRelationAndSearchRelevanceInput {
  _relevance: UserMovieWatchlistOrderByRelevanceInput
  createdAt: SortOrder
  movie: MovieOrderByWithRelationAndSearchRelevanceInput
  movieId: SortOrder
  user: MovifierAppUserOrderByWithRelationAndSearchRelevanceInput
  userId: SortOrder
}

enum UserMovieWatchlistScalarFieldEnum {
  createdAt
  movieId
  userId
}

input UserMovieWatchlistScalarWhereInput {
  AND: [UserMovieWatchlistScalarWhereInput!]
  NOT: [UserMovieWatchlistScalarWhereInput!]
  OR: [UserMovieWatchlistScalarWhereInput!]
  createdAt: DateTimeFilter
  movieId: StringFilter
  userId: StringFilter
}

input UserMovieWatchlistScalarWhereWithAggregatesInput {
  AND: [UserMovieWatchlistScalarWhereWithAggregatesInput!]
  NOT: [UserMovieWatchlistScalarWhereWithAggregatesInput!]
  OR: [UserMovieWatchlistScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  movieId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input UserMovieWatchlistUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutInWatchlistByUsersNestedInput
  user: MovifierAppUserUpdateOneRequiredWithoutWatchlistNestedInput
}

input UserMovieWatchlistUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UserMovieWatchlistUpdateManyWithWhereWithoutMovieInput {
  data: UserMovieWatchlistUpdateManyMutationInput!
  where: UserMovieWatchlistScalarWhereInput!
}

input UserMovieWatchlistUpdateManyWithWhereWithoutUserInput {
  data: UserMovieWatchlistUpdateManyMutationInput!
  where: UserMovieWatchlistScalarWhereInput!
}

input UserMovieWatchlistUpdateManyWithoutMovieNestedInput {
  connect: [UserMovieWatchlistWhereUniqueInput!]
  connectOrCreate: [UserMovieWatchlistCreateOrConnectWithoutMovieInput!]
  create: [UserMovieWatchlistCreateWithoutMovieInput!]
  createMany: UserMovieWatchlistCreateManyMovieInputEnvelope
  delete: [UserMovieWatchlistWhereUniqueInput!]
  deleteMany: [UserMovieWatchlistScalarWhereInput!]
  disconnect: [UserMovieWatchlistWhereUniqueInput!]
  set: [UserMovieWatchlistWhereUniqueInput!]
  update: [UserMovieWatchlistUpdateWithWhereUniqueWithoutMovieInput!]
  updateMany: [UserMovieWatchlistUpdateManyWithWhereWithoutMovieInput!]
  upsert: [UserMovieWatchlistUpsertWithWhereUniqueWithoutMovieInput!]
}

input UserMovieWatchlistUpdateManyWithoutUserNestedInput {
  connect: [UserMovieWatchlistWhereUniqueInput!]
  connectOrCreate: [UserMovieWatchlistCreateOrConnectWithoutUserInput!]
  create: [UserMovieWatchlistCreateWithoutUserInput!]
  createMany: UserMovieWatchlistCreateManyUserInputEnvelope
  delete: [UserMovieWatchlistWhereUniqueInput!]
  deleteMany: [UserMovieWatchlistScalarWhereInput!]
  disconnect: [UserMovieWatchlistWhereUniqueInput!]
  set: [UserMovieWatchlistWhereUniqueInput!]
  update: [UserMovieWatchlistUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserMovieWatchlistUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserMovieWatchlistUpsertWithWhereUniqueWithoutUserInput!]
}

input UserMovieWatchlistUpdateWithWhereUniqueWithoutMovieInput {
  data: UserMovieWatchlistUpdateWithoutMovieInput!
  where: UserMovieWatchlistWhereUniqueInput!
}

input UserMovieWatchlistUpdateWithWhereUniqueWithoutUserInput {
  data: UserMovieWatchlistUpdateWithoutUserInput!
  where: UserMovieWatchlistWhereUniqueInput!
}

input UserMovieWatchlistUpdateWithoutMovieInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutWatchlistNestedInput
}

input UserMovieWatchlistUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutInWatchlistByUsersNestedInput
}

input UserMovieWatchlistUpsertWithWhereUniqueWithoutMovieInput {
  create: UserMovieWatchlistCreateWithoutMovieInput!
  update: UserMovieWatchlistUpdateWithoutMovieInput!
  where: UserMovieWatchlistWhereUniqueInput!
}

input UserMovieWatchlistUpsertWithWhereUniqueWithoutUserInput {
  create: UserMovieWatchlistCreateWithoutUserInput!
  update: UserMovieWatchlistUpdateWithoutUserInput!
  where: UserMovieWatchlistWhereUniqueInput!
}

input UserMovieWatchlistUserIdMovieIdCompoundUniqueInput {
  movieId: String!
  userId: String!
}

input UserMovieWatchlistWhereInput {
  AND: [UserMovieWatchlistWhereInput!]
  NOT: [UserMovieWatchlistWhereInput!]
  OR: [UserMovieWatchlistWhereInput!]
  createdAt: DateTimeFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

input UserMovieWatchlistWhereUniqueInput {
  AND: [UserMovieWatchlistWhereInput!]
  NOT: [UserMovieWatchlistWhereInput!]
  OR: [UserMovieWatchlistWhereInput!]
  createdAt: DateTimeFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
  userId_movieId: UserMovieWatchlistUserIdMovieIdCompoundUniqueInput
}

type UserRegisterOutput {
  token: String!
  user: MovifierAppUser!
}