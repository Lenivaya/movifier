# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateMovie {
  _count: MovieCountAggregate
  _max: MovieMaxAggregate
  _min: MovieMinAggregate
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input EnumMoviefireAppUserRoleFieldUpdateOperationsInput {
  set: MoviefireAppUserRole
}

input EnumMoviefireAppUserRoleFilter {
  equals: MoviefireAppUserRole
  in: [MoviefireAppUserRole!]
  not: NestedEnumMoviefireAppUserRoleFilter
  notIn: [MoviefireAppUserRole!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

type Genre {
  _count: GenreCount
  createdAt: DateTimeISO!
  name: String!
  updatedAt: DateTimeISO!
}

type GenreCount {
  movies(where: MovieWhereInput): Int!
}

input GenreCreateNestedManyWithoutMoviesInput {
  connect: [GenreWhereUniqueInput!]
  connectOrCreate: [GenreCreateOrConnectWithoutMoviesInput!]
  create: [GenreCreateWithoutMoviesInput!]
}

input GenreCreateOrConnectWithoutMoviesInput {
  create: GenreCreateWithoutMoviesInput!
  where: GenreWhereUniqueInput!
}

input GenreCreateWithoutMoviesInput {
  createdAt: DateTimeISO
  name: String!
  updatedAt: DateTimeISO
}

input GenreListRelationFilter {
  every: GenreWhereInput
  none: GenreWhereInput
  some: GenreWhereInput
}

input GenreOrderByRelationAggregateInput {
  _count: SortOrder
}

enum GenreOrderByRelevanceFieldEnum {
  name
}

input GenreOrderByRelevanceInput {
  fields: [GenreOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input GenreOrderByWithRelationAndSearchRelevanceInput {
  _relevance: GenreOrderByRelevanceInput
  createdAt: SortOrder
  movies: MovieOrderByRelationAggregateInput
  name: SortOrder
  updatedAt: SortOrder
}

enum GenreScalarFieldEnum {
  createdAt
  name
  updatedAt
}

input GenreScalarWhereInput {
  AND: [GenreScalarWhereInput!]
  NOT: [GenreScalarWhereInput!]
  OR: [GenreScalarWhereInput!]
  createdAt: DateTimeFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input GenreUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpdateManyWithWhereWithoutMoviesInput {
  data: GenreUpdateManyMutationInput!
  where: GenreScalarWhereInput!
}

input GenreUpdateManyWithoutMoviesNestedInput {
  connect: [GenreWhereUniqueInput!]
  connectOrCreate: [GenreCreateOrConnectWithoutMoviesInput!]
  create: [GenreCreateWithoutMoviesInput!]
  delete: [GenreWhereUniqueInput!]
  deleteMany: [GenreScalarWhereInput!]
  disconnect: [GenreWhereUniqueInput!]
  set: [GenreWhereUniqueInput!]
  update: [GenreUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [GenreUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [GenreUpsertWithWhereUniqueWithoutMoviesInput!]
}

input GenreUpdateWithWhereUniqueWithoutMoviesInput {
  data: GenreUpdateWithoutMoviesInput!
  where: GenreWhereUniqueInput!
}

input GenreUpdateWithoutMoviesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpsertWithWhereUniqueWithoutMoviesInput {
  create: GenreCreateWithoutMoviesInput!
  update: GenreUpdateWithoutMoviesInput!
  where: GenreWhereUniqueInput!
}

input GenreWhereInput {
  AND: [GenreWhereInput!]
  NOT: [GenreWhereInput!]
  OR: [GenreWhereInput!]
  createdAt: DateTimeFilter
  movies: MovieListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input GenreWhereUniqueInput {
  AND: [GenreWhereInput!]
  NOT: [GenreWhereInput!]
  OR: [GenreWhereInput!]
  createdAt: DateTimeFilter
  movies: MovieListRelationFilter
  name: String
  updatedAt: DateTimeFilter
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Movie {
  _count: MovieCount
  createdAt: DateTimeISO!
  crewMembers(cursor: MovieCrewMemberOnMovieWhereUniqueInput, distinct: [MovieCrewMemberOnMovieScalarFieldEnum!], orderBy: [MovieCrewMemberOnMovieOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieCrewMemberOnMovieWhereInput): [MovieCrewMemberOnMovie!]!
  genres(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum!], orderBy: [GenreOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: GenreWhereInput): [Genre!]!
  id: String!
  inWatchlistByUsers(cursor: MovifierAppUserWhereUniqueInput, distinct: [MovifierAppUserScalarFieldEnum!], orderBy: [MovifierAppUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovifierAppUserWhereInput): [MovifierAppUser!]!
  keywordCategories(cursor: MovieKeywordCategoryWhereUniqueInput, distinct: [MovieKeywordCategoryScalarFieldEnum!], orderBy: [MovieKeywordCategoryOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieKeywordCategoryWhereInput): [MovieKeywordCategory!]!
  movieInfo(where: MovieInfoWhereInput): MovieInfo
  movieLists(cursor: MovieListWhereUniqueInput, distinct: [MovieListScalarFieldEnum!], orderBy: [MovieListOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieListWhereInput): [MovieList!]!
  movieStats(where: MovieStatsWhereInput): MovieStats
  ratings(cursor: MovieRatingWhereUniqueInput, distinct: [MovieRatingScalarFieldEnum!], orderBy: [MovieRatingOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieRatingWhereInput): [MovieRating!]!
  spokenLanguages(cursor: MovieSpokenLanguageWhereUniqueInput, distinct: [MovieSpokenLanguageScalarFieldEnum!], orderBy: [MovieSpokenLanguageOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieSpokenLanguageWhereInput): [MovieSpokenLanguage!]!
  studios(cursor: MovieStudioWhereUniqueInput, distinct: [MovieStudioScalarFieldEnum!], orderBy: [MovieStudioOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieStudioWhereInput): [MovieStudio!]!
  updatedAt: DateTimeISO!
}

type MovieCount {
  crewMembers(where: MovieCrewMemberOnMovieWhereInput): Int!
  genres(where: GenreWhereInput): Int!
  inWatchlistByUsers(where: MovifierAppUserWhereInput): Int!
  keywordCategories(where: MovieKeywordCategoryWhereInput): Int!
  movieLists(where: MovieListWhereInput): Int!
  ratings(where: MovieRatingWhereInput): Int!
  spokenLanguages(where: MovieSpokenLanguageWhereInput): Int!
  studios(where: MovieStudioWhereInput): Int!
}

type MovieCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  updatedAt: Int!
}

input MovieCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input MovieCreateInput {
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberOnMovieCreateNestedManyWithoutMovieInput
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: MovifierAppUserCreateNestedManyWithoutWatchlistInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  movieStats: MovieStatsCreateNestedOneWithoutMovieInput
  ratings: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

input MovieCreateManyInput {
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input MovieCreateNestedManyWithoutInWatchlistByUsersInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutInWatchlistByUsersInput!]
  create: [MovieCreateWithoutInWatchlistByUsersInput!]
}

input MovieCreateNestedManyWithoutMovieListsInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutMovieListsInput!]
  create: [MovieCreateWithoutMovieListsInput!]
}

input MovieCreateNestedOneWithoutRatingsInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutRatingsInput
  create: MovieCreateWithoutRatingsInput
}

input MovieCreateOrConnectWithoutInWatchlistByUsersInput {
  create: MovieCreateWithoutInWatchlistByUsersInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutMovieListsInput {
  create: MovieCreateWithoutMovieListsInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutRatingsInput {
  create: MovieCreateWithoutRatingsInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateWithoutInWatchlistByUsersInput {
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberOnMovieCreateNestedManyWithoutMovieInput
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  movieStats: MovieStatsCreateNestedOneWithoutMovieInput
  ratings: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

input MovieCreateWithoutMovieListsInput {
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberOnMovieCreateNestedManyWithoutMovieInput
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: MovifierAppUserCreateNestedManyWithoutWatchlistInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieStats: MovieStatsCreateNestedOneWithoutMovieInput
  ratings: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

input MovieCreateWithoutRatingsInput {
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberOnMovieCreateNestedManyWithoutMovieInput
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: MovifierAppUserCreateNestedManyWithoutWatchlistInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  movieStats: MovieStatsCreateNestedOneWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

type MovieCrewMember {
  _count: MovieCrewMemberCount
  createdAt: DateTimeISO!
  description: String!
  id: String!
  imdbId: String!
  name: String!
  photoUrl: String!
  updatedAt: DateTimeISO!
}

type MovieCrewMemberCount {
  movies(where: MovieCrewMemberOnMovieWhereInput): Int!
}

input MovieCrewMemberCreateNestedOneWithoutMoviesInput {
  connect: MovieCrewMemberWhereUniqueInput
  connectOrCreate: MovieCrewMemberCreateOrConnectWithoutMoviesInput
  create: MovieCrewMemberCreateWithoutMoviesInput
}

input MovieCrewMemberCreateOrConnectWithoutMoviesInput {
  create: MovieCrewMemberCreateWithoutMoviesInput!
  where: MovieCrewMemberWhereUniqueInput!
}

input MovieCrewMemberCreateWithoutMoviesInput {
  createdAt: DateTimeISO
  description: String!
  id: String
  imdbId: String!
  name: String!
  photoUrl: String!
  updatedAt: DateTimeISO
}

type MovieCrewMemberOnMovie {
  createdAt: DateTimeISO!
  crewMember: MovieCrewMember!
  movie: Movie!
  movieCrewMemberId: String!
  movieCrewMemberType: MovieCrewMemberType!
  movieCrewMemberTypeId: String!
  movieId: String!
  updatedAt: DateTimeISO!
}

input MovieCrewMemberOnMovieCreateManyMovieInput {
  createdAt: DateTimeISO
  movieCrewMemberId: String!
  movieCrewMemberTypeId: String!
  updatedAt: DateTimeISO
}

input MovieCrewMemberOnMovieCreateManyMovieInputEnvelope {
  data: [MovieCrewMemberOnMovieCreateManyMovieInput!]!
  skipDuplicates: Boolean
}

input MovieCrewMemberOnMovieCreateNestedManyWithoutMovieInput {
  connect: [MovieCrewMemberOnMovieWhereUniqueInput!]
  connectOrCreate: [MovieCrewMemberOnMovieCreateOrConnectWithoutMovieInput!]
  create: [MovieCrewMemberOnMovieCreateWithoutMovieInput!]
  createMany: MovieCrewMemberOnMovieCreateManyMovieInputEnvelope
}

input MovieCrewMemberOnMovieCreateOrConnectWithoutMovieInput {
  create: MovieCrewMemberOnMovieCreateWithoutMovieInput!
  where: MovieCrewMemberOnMovieWhereUniqueInput!
}

input MovieCrewMemberOnMovieCreateWithoutMovieInput {
  createdAt: DateTimeISO
  crewMember: MovieCrewMemberCreateNestedOneWithoutMoviesInput!
  movieCrewMemberType: MovieCrewMemberTypeCreateNestedOneWithoutMovieCrewMembersInput!
  updatedAt: DateTimeISO
}

input MovieCrewMemberOnMovieListRelationFilter {
  every: MovieCrewMemberOnMovieWhereInput
  none: MovieCrewMemberOnMovieWhereInput
  some: MovieCrewMemberOnMovieWhereInput
}

input MovieCrewMemberOnMovieMovieIdMovieCrewMemberIdMovieCrewMemberTypeIdCompoundUniqueInput {
  movieCrewMemberId: String!
  movieCrewMemberTypeId: String!
  movieId: String!
}

input MovieCrewMemberOnMovieOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieCrewMemberOnMovieOrderByRelevanceFieldEnum {
  movieCrewMemberId
  movieCrewMemberTypeId
  movieId
}

input MovieCrewMemberOnMovieOrderByRelevanceInput {
  fields: [MovieCrewMemberOnMovieOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieCrewMemberOnMovieOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieCrewMemberOnMovieOrderByRelevanceInput
  createdAt: SortOrder
  crewMember: MovieCrewMemberOrderByWithRelationAndSearchRelevanceInput
  movie: MovieOrderByWithRelationAndSearchRelevanceInput
  movieCrewMemberId: SortOrder
  movieCrewMemberType: MovieCrewMemberTypeOrderByWithRelationAndSearchRelevanceInput
  movieCrewMemberTypeId: SortOrder
  movieId: SortOrder
  updatedAt: SortOrder
}

enum MovieCrewMemberOnMovieScalarFieldEnum {
  createdAt
  movieCrewMemberId
  movieCrewMemberTypeId
  movieId
  updatedAt
}

input MovieCrewMemberOnMovieScalarWhereInput {
  AND: [MovieCrewMemberOnMovieScalarWhereInput!]
  NOT: [MovieCrewMemberOnMovieScalarWhereInput!]
  OR: [MovieCrewMemberOnMovieScalarWhereInput!]
  createdAt: DateTimeFilter
  movieCrewMemberId: StringFilter
  movieCrewMemberTypeId: StringFilter
  movieId: StringFilter
  updatedAt: DateTimeFilter
}

input MovieCrewMemberOnMovieUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieCrewMemberOnMovieUpdateManyWithWhereWithoutMovieInput {
  data: MovieCrewMemberOnMovieUpdateManyMutationInput!
  where: MovieCrewMemberOnMovieScalarWhereInput!
}

input MovieCrewMemberOnMovieUpdateManyWithoutMovieNestedInput {
  connect: [MovieCrewMemberOnMovieWhereUniqueInput!]
  connectOrCreate: [MovieCrewMemberOnMovieCreateOrConnectWithoutMovieInput!]
  create: [MovieCrewMemberOnMovieCreateWithoutMovieInput!]
  createMany: MovieCrewMemberOnMovieCreateManyMovieInputEnvelope
  delete: [MovieCrewMemberOnMovieWhereUniqueInput!]
  deleteMany: [MovieCrewMemberOnMovieScalarWhereInput!]
  disconnect: [MovieCrewMemberOnMovieWhereUniqueInput!]
  set: [MovieCrewMemberOnMovieWhereUniqueInput!]
  update: [MovieCrewMemberOnMovieUpdateWithWhereUniqueWithoutMovieInput!]
  updateMany: [MovieCrewMemberOnMovieUpdateManyWithWhereWithoutMovieInput!]
  upsert: [MovieCrewMemberOnMovieUpsertWithWhereUniqueWithoutMovieInput!]
}

input MovieCrewMemberOnMovieUpdateWithWhereUniqueWithoutMovieInput {
  data: MovieCrewMemberOnMovieUpdateWithoutMovieInput!
  where: MovieCrewMemberOnMovieWhereUniqueInput!
}

input MovieCrewMemberOnMovieUpdateWithoutMovieInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMember: MovieCrewMemberUpdateOneRequiredWithoutMoviesNestedInput
  movieCrewMemberType: MovieCrewMemberTypeUpdateOneRequiredWithoutMovieCrewMembersNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieCrewMemberOnMovieUpsertWithWhereUniqueWithoutMovieInput {
  create: MovieCrewMemberOnMovieCreateWithoutMovieInput!
  update: MovieCrewMemberOnMovieUpdateWithoutMovieInput!
  where: MovieCrewMemberOnMovieWhereUniqueInput!
}

input MovieCrewMemberOnMovieWhereInput {
  AND: [MovieCrewMemberOnMovieWhereInput!]
  NOT: [MovieCrewMemberOnMovieWhereInput!]
  OR: [MovieCrewMemberOnMovieWhereInput!]
  createdAt: DateTimeFilter
  crewMember: MovieCrewMemberRelationFilter
  movie: MovieRelationFilter
  movieCrewMemberId: StringFilter
  movieCrewMemberType: MovieCrewMemberTypeRelationFilter
  movieCrewMemberTypeId: StringFilter
  movieId: StringFilter
  updatedAt: DateTimeFilter
}

input MovieCrewMemberOnMovieWhereUniqueInput {
  AND: [MovieCrewMemberOnMovieWhereInput!]
  NOT: [MovieCrewMemberOnMovieWhereInput!]
  OR: [MovieCrewMemberOnMovieWhereInput!]
  createdAt: DateTimeFilter
  crewMember: MovieCrewMemberRelationFilter
  movie: MovieRelationFilter
  movieCrewMemberId: StringFilter
  movieCrewMemberType: MovieCrewMemberTypeRelationFilter
  movieCrewMemberTypeId: StringFilter
  movieId: StringFilter
  movieId_movieCrewMemberId_movieCrewMemberTypeId: MovieCrewMemberOnMovieMovieIdMovieCrewMemberIdMovieCrewMemberTypeIdCompoundUniqueInput
  updatedAt: DateTimeFilter
}

enum MovieCrewMemberOrderByRelevanceFieldEnum {
  description
  id
  imdbId
  name
  photoUrl
}

input MovieCrewMemberOrderByRelevanceInput {
  fields: [MovieCrewMemberOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieCrewMemberOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieCrewMemberOrderByRelevanceInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  imdbId: SortOrder
  movies: MovieCrewMemberOnMovieOrderByRelationAggregateInput
  name: SortOrder
  photoUrl: SortOrder
  updatedAt: SortOrder
}

input MovieCrewMemberRelationFilter {
  is: MovieCrewMemberWhereInput
  isNot: MovieCrewMemberWhereInput
}

type MovieCrewMemberType {
  _count: MovieCrewMemberTypeCount
  id: String!
  name: String!
}

type MovieCrewMemberTypeCount {
  movieCrewMembers(where: MovieCrewMemberOnMovieWhereInput): Int!
}

input MovieCrewMemberTypeCreateNestedOneWithoutMovieCrewMembersInput {
  connect: MovieCrewMemberTypeWhereUniqueInput
  connectOrCreate: MovieCrewMemberTypeCreateOrConnectWithoutMovieCrewMembersInput
  create: MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput
}

input MovieCrewMemberTypeCreateOrConnectWithoutMovieCrewMembersInput {
  create: MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput!
  where: MovieCrewMemberTypeWhereUniqueInput!
}

input MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput {
  id: String
  name: String!
}

enum MovieCrewMemberTypeOrderByRelevanceFieldEnum {
  id
  name
}

input MovieCrewMemberTypeOrderByRelevanceInput {
  fields: [MovieCrewMemberTypeOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieCrewMemberTypeOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieCrewMemberTypeOrderByRelevanceInput
  id: SortOrder
  movieCrewMembers: MovieCrewMemberOnMovieOrderByRelationAggregateInput
  name: SortOrder
}

input MovieCrewMemberTypeRelationFilter {
  is: MovieCrewMemberTypeWhereInput
  isNot: MovieCrewMemberTypeWhereInput
}

input MovieCrewMemberTypeUpdateOneRequiredWithoutMovieCrewMembersNestedInput {
  connect: MovieCrewMemberTypeWhereUniqueInput
  connectOrCreate: MovieCrewMemberTypeCreateOrConnectWithoutMovieCrewMembersInput
  create: MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput
  update: MovieCrewMemberTypeUpdateToOneWithWhereWithoutMovieCrewMembersInput
  upsert: MovieCrewMemberTypeUpsertWithoutMovieCrewMembersInput
}

input MovieCrewMemberTypeUpdateToOneWithWhereWithoutMovieCrewMembersInput {
  data: MovieCrewMemberTypeUpdateWithoutMovieCrewMembersInput!
  where: MovieCrewMemberTypeWhereInput
}

input MovieCrewMemberTypeUpdateWithoutMovieCrewMembersInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input MovieCrewMemberTypeUpsertWithoutMovieCrewMembersInput {
  create: MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput!
  update: MovieCrewMemberTypeUpdateWithoutMovieCrewMembersInput!
  where: MovieCrewMemberTypeWhereInput
}

input MovieCrewMemberTypeWhereInput {
  AND: [MovieCrewMemberTypeWhereInput!]
  NOT: [MovieCrewMemberTypeWhereInput!]
  OR: [MovieCrewMemberTypeWhereInput!]
  id: StringFilter
  movieCrewMembers: MovieCrewMemberOnMovieListRelationFilter
  name: StringFilter
}

input MovieCrewMemberTypeWhereUniqueInput {
  AND: [MovieCrewMemberTypeWhereInput!]
  NOT: [MovieCrewMemberTypeWhereInput!]
  OR: [MovieCrewMemberTypeWhereInput!]
  id: String
  movieCrewMembers: MovieCrewMemberOnMovieListRelationFilter
  name: String
}

input MovieCrewMemberUpdateOneRequiredWithoutMoviesNestedInput {
  connect: MovieCrewMemberWhereUniqueInput
  connectOrCreate: MovieCrewMemberCreateOrConnectWithoutMoviesInput
  create: MovieCrewMemberCreateWithoutMoviesInput
  update: MovieCrewMemberUpdateToOneWithWhereWithoutMoviesInput
  upsert: MovieCrewMemberUpsertWithoutMoviesInput
}

input MovieCrewMemberUpdateToOneWithWhereWithoutMoviesInput {
  data: MovieCrewMemberUpdateWithoutMoviesInput!
  where: MovieCrewMemberWhereInput
}

input MovieCrewMemberUpdateWithoutMoviesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imdbId: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  photoUrl: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieCrewMemberUpsertWithoutMoviesInput {
  create: MovieCrewMemberCreateWithoutMoviesInput!
  update: MovieCrewMemberUpdateWithoutMoviesInput!
  where: MovieCrewMemberWhereInput
}

input MovieCrewMemberWhereInput {
  AND: [MovieCrewMemberWhereInput!]
  NOT: [MovieCrewMemberWhereInput!]
  OR: [MovieCrewMemberWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  imdbId: StringFilter
  movies: MovieCrewMemberOnMovieListRelationFilter
  name: StringFilter
  photoUrl: StringFilter
  updatedAt: DateTimeFilter
}

input MovieCrewMemberWhereUniqueInput {
  AND: [MovieCrewMemberWhereInput!]
  NOT: [MovieCrewMemberWhereInput!]
  OR: [MovieCrewMemberWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: String
  imdbId: String
  movies: MovieCrewMemberOnMovieListRelationFilter
  name: StringFilter
  photoUrl: StringFilter
  updatedAt: DateTimeFilter
}

type MovieGroupBy {
  _count: MovieCountAggregate
  _max: MovieMaxAggregate
  _min: MovieMinAggregate
  createdAt: DateTimeISO!
  id: String!
  updatedAt: DateTimeISO!
}

type MovieInfo {
  alternativeTitles: [String!]!
  createdAt: DateTimeISO!
  description: String!
  durationInMinutes: Int!
  id: String!
  imdbId: String!
  movieId: String!
  posterUrl: String!
  releaseDate: DateTimeISO!
  title: String!
  updatedAt: DateTimeISO!
}

input MovieInfoCreateNestedOneWithoutMovieInput {
  connect: MovieInfoWhereUniqueInput
  connectOrCreate: MovieInfoCreateOrConnectWithoutMovieInput
  create: MovieInfoCreateWithoutMovieInput
}

input MovieInfoCreateOrConnectWithoutMovieInput {
  create: MovieInfoCreateWithoutMovieInput!
  where: MovieInfoWhereUniqueInput!
}

input MovieInfoCreateWithoutMovieInput {
  alternativeTitles: MovieInfoCreatealternativeTitlesInput
  createdAt: DateTimeISO
  description: String!
  durationInMinutes: Int!
  id: String
  imdbId: String!
  posterUrl: String!
  releaseDate: DateTimeISO!
  title: String!
  updatedAt: DateTimeISO
}

input MovieInfoCreatealternativeTitlesInput {
  set: [String!]!
}

input MovieInfoNullableRelationFilter {
  is: MovieInfoWhereInput
  isNot: MovieInfoWhereInput
}

enum MovieInfoOrderByRelevanceFieldEnum {
  alternativeTitles
  description
  id
  imdbId
  movieId
  posterUrl
  title
}

input MovieInfoOrderByRelevanceInput {
  fields: [MovieInfoOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieInfoOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieInfoOrderByRelevanceInput
  alternativeTitles: SortOrder
  createdAt: SortOrder
  description: SortOrder
  durationInMinutes: SortOrder
  id: SortOrder
  imdbId: SortOrder
  movie: MovieOrderByWithRelationAndSearchRelevanceInput
  movieId: SortOrder
  posterUrl: SortOrder
  releaseDate: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input MovieInfoUpdateOneWithoutMovieNestedInput {
  connect: MovieInfoWhereUniqueInput
  connectOrCreate: MovieInfoCreateOrConnectWithoutMovieInput
  create: MovieInfoCreateWithoutMovieInput
  delete: MovieInfoWhereInput
  disconnect: MovieInfoWhereInput
  update: MovieInfoUpdateToOneWithWhereWithoutMovieInput
  upsert: MovieInfoUpsertWithoutMovieInput
}

input MovieInfoUpdateToOneWithWhereWithoutMovieInput {
  data: MovieInfoUpdateWithoutMovieInput!
  where: MovieInfoWhereInput
}

input MovieInfoUpdateWithoutMovieInput {
  alternativeTitles: MovieInfoUpdatealternativeTitlesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  durationInMinutes: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imdbId: StringFieldUpdateOperationsInput
  posterUrl: StringFieldUpdateOperationsInput
  releaseDate: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieInfoUpdatealternativeTitlesInput {
  push: [String!]
  set: [String!]
}

input MovieInfoUpsertWithoutMovieInput {
  create: MovieInfoCreateWithoutMovieInput!
  update: MovieInfoUpdateWithoutMovieInput!
  where: MovieInfoWhereInput
}

input MovieInfoWhereInput {
  AND: [MovieInfoWhereInput!]
  NOT: [MovieInfoWhereInput!]
  OR: [MovieInfoWhereInput!]
  alternativeTitles: StringNullableListFilter
  createdAt: DateTimeFilter
  description: StringFilter
  durationInMinutes: IntFilter
  id: StringFilter
  imdbId: StringFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  posterUrl: StringFilter
  releaseDate: DateTimeFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input MovieInfoWhereUniqueInput {
  AND: [MovieInfoWhereInput!]
  NOT: [MovieInfoWhereInput!]
  OR: [MovieInfoWhereInput!]
  alternativeTitles: StringNullableListFilter
  createdAt: DateTimeFilter
  description: StringFilter
  durationInMinutes: IntFilter
  id: String
  imdbId: String
  movie: MovieRelationFilter
  movieId: String
  posterUrl: StringFilter
  releaseDate: DateTimeFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

type MovieKeywordCategory {
  _count: MovieKeywordCategoryCount
  id: String!
  name: String!
}

type MovieKeywordCategoryCount {
  movies(where: MovieWhereInput): Int!
}

input MovieKeywordCategoryCreateNestedManyWithoutMoviesInput {
  connect: [MovieKeywordCategoryWhereUniqueInput!]
  connectOrCreate: [MovieKeywordCategoryCreateOrConnectWithoutMoviesInput!]
  create: [MovieKeywordCategoryCreateWithoutMoviesInput!]
}

input MovieKeywordCategoryCreateOrConnectWithoutMoviesInput {
  create: MovieKeywordCategoryCreateWithoutMoviesInput!
  where: MovieKeywordCategoryWhereUniqueInput!
}

input MovieKeywordCategoryCreateWithoutMoviesInput {
  id: String
  name: String!
}

input MovieKeywordCategoryListRelationFilter {
  every: MovieKeywordCategoryWhereInput
  none: MovieKeywordCategoryWhereInput
  some: MovieKeywordCategoryWhereInput
}

input MovieKeywordCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieKeywordCategoryOrderByRelevanceFieldEnum {
  id
  name
}

input MovieKeywordCategoryOrderByRelevanceInput {
  fields: [MovieKeywordCategoryOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieKeywordCategoryOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieKeywordCategoryOrderByRelevanceInput
  id: SortOrder
  movies: MovieOrderByRelationAggregateInput
  name: SortOrder
}

enum MovieKeywordCategoryScalarFieldEnum {
  id
  name
}

input MovieKeywordCategoryScalarWhereInput {
  AND: [MovieKeywordCategoryScalarWhereInput!]
  NOT: [MovieKeywordCategoryScalarWhereInput!]
  OR: [MovieKeywordCategoryScalarWhereInput!]
  id: StringFilter
  name: StringFilter
}

input MovieKeywordCategoryUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input MovieKeywordCategoryUpdateManyWithWhereWithoutMoviesInput {
  data: MovieKeywordCategoryUpdateManyMutationInput!
  where: MovieKeywordCategoryScalarWhereInput!
}

input MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput {
  connect: [MovieKeywordCategoryWhereUniqueInput!]
  connectOrCreate: [MovieKeywordCategoryCreateOrConnectWithoutMoviesInput!]
  create: [MovieKeywordCategoryCreateWithoutMoviesInput!]
  delete: [MovieKeywordCategoryWhereUniqueInput!]
  deleteMany: [MovieKeywordCategoryScalarWhereInput!]
  disconnect: [MovieKeywordCategoryWhereUniqueInput!]
  set: [MovieKeywordCategoryWhereUniqueInput!]
  update: [MovieKeywordCategoryUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [MovieKeywordCategoryUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [MovieKeywordCategoryUpsertWithWhereUniqueWithoutMoviesInput!]
}

input MovieKeywordCategoryUpdateWithWhereUniqueWithoutMoviesInput {
  data: MovieKeywordCategoryUpdateWithoutMoviesInput!
  where: MovieKeywordCategoryWhereUniqueInput!
}

input MovieKeywordCategoryUpdateWithoutMoviesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input MovieKeywordCategoryUpsertWithWhereUniqueWithoutMoviesInput {
  create: MovieKeywordCategoryCreateWithoutMoviesInput!
  update: MovieKeywordCategoryUpdateWithoutMoviesInput!
  where: MovieKeywordCategoryWhereUniqueInput!
}

input MovieKeywordCategoryWhereInput {
  AND: [MovieKeywordCategoryWhereInput!]
  NOT: [MovieKeywordCategoryWhereInput!]
  OR: [MovieKeywordCategoryWhereInput!]
  id: StringFilter
  movies: MovieListRelationFilter
  name: StringFilter
}

input MovieKeywordCategoryWhereUniqueInput {
  AND: [MovieKeywordCategoryWhereInput!]
  NOT: [MovieKeywordCategoryWhereInput!]
  OR: [MovieKeywordCategoryWhereInput!]
  id: String
  movies: MovieListRelationFilter
  name: String
}

type MovieList {
  _count: MovieListCount
  createdAt: DateTimeISO!
  id: String!
  name: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input MovieListCommentCreateManyMovieListInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
  userId: String!
}

input MovieListCommentCreateManyMovieListInputEnvelope {
  data: [MovieListCommentCreateManyMovieListInput!]!
  skipDuplicates: Boolean
}

input MovieListCommentCreateManyUserInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  movieListId: String!
  updatedAt: DateTimeISO
}

input MovieListCommentCreateManyUserInputEnvelope {
  data: [MovieListCommentCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MovieListCommentCreateNestedManyWithoutMovieListInput {
  connect: [MovieListCommentWhereUniqueInput!]
  connectOrCreate: [MovieListCommentCreateOrConnectWithoutMovieListInput!]
  create: [MovieListCommentCreateWithoutMovieListInput!]
  createMany: MovieListCommentCreateManyMovieListInputEnvelope
}

input MovieListCommentCreateNestedManyWithoutUserInput {
  connect: [MovieListCommentWhereUniqueInput!]
  connectOrCreate: [MovieListCommentCreateOrConnectWithoutUserInput!]
  create: [MovieListCommentCreateWithoutUserInput!]
  createMany: MovieListCommentCreateManyUserInputEnvelope
}

input MovieListCommentCreateOrConnectWithoutMovieListInput {
  create: MovieListCommentCreateWithoutMovieListInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentCreateOrConnectWithoutUserInput {
  create: MovieListCommentCreateWithoutUserInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentCreateWithoutMovieListInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutMovieListsCommentsInput!
}

input MovieListCommentCreateWithoutUserInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  movieList: MovieListCreateNestedOneWithoutMovieListCommentsInput!
  updatedAt: DateTimeISO
}

input MovieListCommentListRelationFilter {
  every: MovieListCommentWhereInput
  none: MovieListCommentWhereInput
  some: MovieListCommentWhereInput
}

input MovieListCommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input MovieListCommentScalarWhereInput {
  AND: [MovieListCommentScalarWhereInput!]
  NOT: [MovieListCommentScalarWhereInput!]
  OR: [MovieListCommentScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  movieListId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MovieListCommentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListCommentUpdateManyWithWhereWithoutMovieListInput {
  data: MovieListCommentUpdateManyMutationInput!
  where: MovieListCommentScalarWhereInput!
}

input MovieListCommentUpdateManyWithWhereWithoutUserInput {
  data: MovieListCommentUpdateManyMutationInput!
  where: MovieListCommentScalarWhereInput!
}

input MovieListCommentUpdateManyWithoutMovieListNestedInput {
  connect: [MovieListCommentWhereUniqueInput!]
  connectOrCreate: [MovieListCommentCreateOrConnectWithoutMovieListInput!]
  create: [MovieListCommentCreateWithoutMovieListInput!]
  createMany: MovieListCommentCreateManyMovieListInputEnvelope
  delete: [MovieListCommentWhereUniqueInput!]
  deleteMany: [MovieListCommentScalarWhereInput!]
  disconnect: [MovieListCommentWhereUniqueInput!]
  set: [MovieListCommentWhereUniqueInput!]
  update: [MovieListCommentUpdateWithWhereUniqueWithoutMovieListInput!]
  updateMany: [MovieListCommentUpdateManyWithWhereWithoutMovieListInput!]
  upsert: [MovieListCommentUpsertWithWhereUniqueWithoutMovieListInput!]
}

input MovieListCommentUpdateManyWithoutUserNestedInput {
  connect: [MovieListCommentWhereUniqueInput!]
  connectOrCreate: [MovieListCommentCreateOrConnectWithoutUserInput!]
  create: [MovieListCommentCreateWithoutUserInput!]
  createMany: MovieListCommentCreateManyUserInputEnvelope
  delete: [MovieListCommentWhereUniqueInput!]
  deleteMany: [MovieListCommentScalarWhereInput!]
  disconnect: [MovieListCommentWhereUniqueInput!]
  set: [MovieListCommentWhereUniqueInput!]
  update: [MovieListCommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MovieListCommentUpdateManyWithWhereWithoutUserInput!]
  upsert: [MovieListCommentUpsertWithWhereUniqueWithoutUserInput!]
}

input MovieListCommentUpdateWithWhereUniqueWithoutMovieListInput {
  data: MovieListCommentUpdateWithoutMovieListInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentUpdateWithWhereUniqueWithoutUserInput {
  data: MovieListCommentUpdateWithoutUserInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentUpdateWithoutMovieListInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutMovieListsCommentsNestedInput
}

input MovieListCommentUpdateWithoutUserInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieList: MovieListUpdateOneRequiredWithoutMovieListCommentsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListCommentUpsertWithWhereUniqueWithoutMovieListInput {
  create: MovieListCommentCreateWithoutMovieListInput!
  update: MovieListCommentUpdateWithoutMovieListInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentUpsertWithWhereUniqueWithoutUserInput {
  create: MovieListCommentCreateWithoutUserInput!
  update: MovieListCommentUpdateWithoutUserInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentWhereInput {
  AND: [MovieListCommentWhereInput!]
  NOT: [MovieListCommentWhereInput!]
  OR: [MovieListCommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  movieList: MovieListRelationFilter
  movieListId: StringFilter
  updatedAt: DateTimeFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

input MovieListCommentWhereUniqueInput {
  AND: [MovieListCommentWhereInput!]
  NOT: [MovieListCommentWhereInput!]
  OR: [MovieListCommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: String
  movieList: MovieListRelationFilter
  movieListId: StringFilter
  updatedAt: DateTimeFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

type MovieListCount {
  movieListComments(where: MovieListCommentWhereInput): Int!
  movies(where: MovieWhereInput): Int!
}

input MovieListCreateManyMovieListAuthorInput {
  createdAt: DateTimeISO
  id: String
  name: String!
  updatedAt: DateTimeISO
}

input MovieListCreateManyMovieListAuthorInputEnvelope {
  data: [MovieListCreateManyMovieListAuthorInput!]!
  skipDuplicates: Boolean
}

input MovieListCreateNestedManyWithoutMovieListAuthorInput {
  connect: [MovieListWhereUniqueInput!]
  connectOrCreate: [MovieListCreateOrConnectWithoutMovieListAuthorInput!]
  create: [MovieListCreateWithoutMovieListAuthorInput!]
  createMany: MovieListCreateManyMovieListAuthorInputEnvelope
}

input MovieListCreateNestedManyWithoutMoviesInput {
  connect: [MovieListWhereUniqueInput!]
  connectOrCreate: [MovieListCreateOrConnectWithoutMoviesInput!]
  create: [MovieListCreateWithoutMoviesInput!]
}

input MovieListCreateNestedOneWithoutMovieListCommentsInput {
  connect: MovieListWhereUniqueInput
  connectOrCreate: MovieListCreateOrConnectWithoutMovieListCommentsInput
  create: MovieListCreateWithoutMovieListCommentsInput
}

input MovieListCreateOrConnectWithoutMovieListAuthorInput {
  create: MovieListCreateWithoutMovieListAuthorInput!
  where: MovieListWhereUniqueInput!
}

input MovieListCreateOrConnectWithoutMovieListCommentsInput {
  create: MovieListCreateWithoutMovieListCommentsInput!
  where: MovieListWhereUniqueInput!
}

input MovieListCreateOrConnectWithoutMoviesInput {
  create: MovieListCreateWithoutMoviesInput!
  where: MovieListWhereUniqueInput!
}

input MovieListCreateWithoutMovieListAuthorInput {
  MovieListStats: MovieListStatsCreateNestedOneWithoutMovieListInput
  createdAt: DateTimeISO
  id: String
  movieListComments: MovieListCommentCreateNestedManyWithoutMovieListInput
  movies: MovieCreateNestedManyWithoutMovieListsInput
  name: String!
  updatedAt: DateTimeISO
}

input MovieListCreateWithoutMovieListCommentsInput {
  MovieListStats: MovieListStatsCreateNestedOneWithoutMovieListInput
  createdAt: DateTimeISO
  id: String
  movieListAuthor: MovifierAppUserCreateNestedOneWithoutMovieListsInput!
  movies: MovieCreateNestedManyWithoutMovieListsInput
  name: String!
  updatedAt: DateTimeISO
}

input MovieListCreateWithoutMoviesInput {
  MovieListStats: MovieListStatsCreateNestedOneWithoutMovieListInput
  createdAt: DateTimeISO
  id: String
  movieListAuthor: MovifierAppUserCreateNestedOneWithoutMovieListsInput!
  movieListComments: MovieListCommentCreateNestedManyWithoutMovieListInput
  name: String!
  updatedAt: DateTimeISO
}

input MovieListListRelationFilter {
  every: MovieListWhereInput
  none: MovieListWhereInput
  some: MovieListWhereInput
}

input MovieListOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieListOrderByRelevanceFieldEnum {
  id
  name
  userId
}

input MovieListOrderByRelevanceInput {
  fields: [MovieListOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieListOrderByWithRelationAndSearchRelevanceInput {
  MovieListStats: MovieListStatsOrderByWithRelationAndSearchRelevanceInput
  _relevance: MovieListOrderByRelevanceInput
  createdAt: SortOrder
  id: SortOrder
  movieListAuthor: MovifierAppUserOrderByWithRelationAndSearchRelevanceInput
  movieListComments: MovieListCommentOrderByRelationAggregateInput
  movies: MovieOrderByRelationAggregateInput
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieListRelationFilter {
  is: MovieListWhereInput
  isNot: MovieListWhereInput
}

enum MovieListScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
  userId
}

input MovieListScalarWhereInput {
  AND: [MovieListScalarWhereInput!]
  NOT: [MovieListScalarWhereInput!]
  OR: [MovieListScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MovieListStatsCreateNestedOneWithoutMovieListInput {
  connect: MovieListStatsWhereUniqueInput
  connectOrCreate: MovieListStatsCreateOrConnectWithoutMovieListInput
  create: MovieListStatsCreateWithoutMovieListInput
}

input MovieListStatsCreateOrConnectWithoutMovieListInput {
  create: MovieListStatsCreateWithoutMovieListInput!
  where: MovieListStatsWhereUniqueInput!
}

input MovieListStatsCreateWithoutMovieListInput {
  createdAt: DateTimeISO
  id: String
  likes: Int!
  updatedAt: DateTimeISO
  views: Int!
}

input MovieListStatsNullableRelationFilter {
  is: MovieListStatsWhereInput
  isNot: MovieListStatsWhereInput
}

enum MovieListStatsOrderByRelevanceFieldEnum {
  id
  movieListId
}

input MovieListStatsOrderByRelevanceInput {
  fields: [MovieListStatsOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieListStatsOrderByWithRelationAndSearchRelevanceInput {
  MovieList: MovieListOrderByWithRelationAndSearchRelevanceInput
  _relevance: MovieListStatsOrderByRelevanceInput
  createdAt: SortOrder
  id: SortOrder
  likes: SortOrder
  movieListId: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

input MovieListStatsUpdateOneWithoutMovieListNestedInput {
  connect: MovieListStatsWhereUniqueInput
  connectOrCreate: MovieListStatsCreateOrConnectWithoutMovieListInput
  create: MovieListStatsCreateWithoutMovieListInput
  delete: MovieListStatsWhereInput
  disconnect: MovieListStatsWhereInput
  update: MovieListStatsUpdateToOneWithWhereWithoutMovieListInput
  upsert: MovieListStatsUpsertWithoutMovieListInput
}

input MovieListStatsUpdateToOneWithWhereWithoutMovieListInput {
  data: MovieListStatsUpdateWithoutMovieListInput!
  where: MovieListStatsWhereInput
}

input MovieListStatsUpdateWithoutMovieListInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input MovieListStatsUpsertWithoutMovieListInput {
  create: MovieListStatsCreateWithoutMovieListInput!
  update: MovieListStatsUpdateWithoutMovieListInput!
  where: MovieListStatsWhereInput
}

input MovieListStatsWhereInput {
  AND: [MovieListStatsWhereInput!]
  MovieList: MovieListRelationFilter
  NOT: [MovieListStatsWhereInput!]
  OR: [MovieListStatsWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  likes: IntFilter
  movieListId: StringFilter
  updatedAt: DateTimeFilter
  views: IntFilter
}

input MovieListStatsWhereUniqueInput {
  AND: [MovieListStatsWhereInput!]
  MovieList: MovieListRelationFilter
  NOT: [MovieListStatsWhereInput!]
  OR: [MovieListStatsWhereInput!]
  createdAt: DateTimeFilter
  id: String
  likes: IntFilter
  movieListId: String
  updatedAt: DateTimeFilter
  views: IntFilter
}

input MovieListUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpdateManyWithWhereWithoutMovieListAuthorInput {
  data: MovieListUpdateManyMutationInput!
  where: MovieListScalarWhereInput!
}

input MovieListUpdateManyWithWhereWithoutMoviesInput {
  data: MovieListUpdateManyMutationInput!
  where: MovieListScalarWhereInput!
}

input MovieListUpdateManyWithoutMovieListAuthorNestedInput {
  connect: [MovieListWhereUniqueInput!]
  connectOrCreate: [MovieListCreateOrConnectWithoutMovieListAuthorInput!]
  create: [MovieListCreateWithoutMovieListAuthorInput!]
  createMany: MovieListCreateManyMovieListAuthorInputEnvelope
  delete: [MovieListWhereUniqueInput!]
  deleteMany: [MovieListScalarWhereInput!]
  disconnect: [MovieListWhereUniqueInput!]
  set: [MovieListWhereUniqueInput!]
  update: [MovieListUpdateWithWhereUniqueWithoutMovieListAuthorInput!]
  updateMany: [MovieListUpdateManyWithWhereWithoutMovieListAuthorInput!]
  upsert: [MovieListUpsertWithWhereUniqueWithoutMovieListAuthorInput!]
}

input MovieListUpdateManyWithoutMoviesNestedInput {
  connect: [MovieListWhereUniqueInput!]
  connectOrCreate: [MovieListCreateOrConnectWithoutMoviesInput!]
  create: [MovieListCreateWithoutMoviesInput!]
  delete: [MovieListWhereUniqueInput!]
  deleteMany: [MovieListScalarWhereInput!]
  disconnect: [MovieListWhereUniqueInput!]
  set: [MovieListWhereUniqueInput!]
  update: [MovieListUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [MovieListUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [MovieListUpsertWithWhereUniqueWithoutMoviesInput!]
}

input MovieListUpdateOneRequiredWithoutMovieListCommentsNestedInput {
  connect: MovieListWhereUniqueInput
  connectOrCreate: MovieListCreateOrConnectWithoutMovieListCommentsInput
  create: MovieListCreateWithoutMovieListCommentsInput
  update: MovieListUpdateToOneWithWhereWithoutMovieListCommentsInput
  upsert: MovieListUpsertWithoutMovieListCommentsInput
}

input MovieListUpdateToOneWithWhereWithoutMovieListCommentsInput {
  data: MovieListUpdateWithoutMovieListCommentsInput!
  where: MovieListWhereInput
}

input MovieListUpdateWithWhereUniqueWithoutMovieListAuthorInput {
  data: MovieListUpdateWithoutMovieListAuthorInput!
  where: MovieListWhereUniqueInput!
}

input MovieListUpdateWithWhereUniqueWithoutMoviesInput {
  data: MovieListUpdateWithoutMoviesInput!
  where: MovieListWhereUniqueInput!
}

input MovieListUpdateWithoutMovieListAuthorInput {
  MovieListStats: MovieListStatsUpdateOneWithoutMovieListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieListComments: MovieListCommentUpdateManyWithoutMovieListNestedInput
  movies: MovieUpdateManyWithoutMovieListsNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpdateWithoutMovieListCommentsInput {
  MovieListStats: MovieListStatsUpdateOneWithoutMovieListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieListAuthor: MovifierAppUserUpdateOneRequiredWithoutMovieListsNestedInput
  movies: MovieUpdateManyWithoutMovieListsNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpdateWithoutMoviesInput {
  MovieListStats: MovieListStatsUpdateOneWithoutMovieListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieListAuthor: MovifierAppUserUpdateOneRequiredWithoutMovieListsNestedInput
  movieListComments: MovieListCommentUpdateManyWithoutMovieListNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpsertWithWhereUniqueWithoutMovieListAuthorInput {
  create: MovieListCreateWithoutMovieListAuthorInput!
  update: MovieListUpdateWithoutMovieListAuthorInput!
  where: MovieListWhereUniqueInput!
}

input MovieListUpsertWithWhereUniqueWithoutMoviesInput {
  create: MovieListCreateWithoutMoviesInput!
  update: MovieListUpdateWithoutMoviesInput!
  where: MovieListWhereUniqueInput!
}

input MovieListUpsertWithoutMovieListCommentsInput {
  create: MovieListCreateWithoutMovieListCommentsInput!
  update: MovieListUpdateWithoutMovieListCommentsInput!
  where: MovieListWhereInput
}

input MovieListWhereInput {
  AND: [MovieListWhereInput!]
  MovieListStats: MovieListStatsNullableRelationFilter
  NOT: [MovieListWhereInput!]
  OR: [MovieListWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  movieListAuthor: MovifierAppUserRelationFilter
  movieListComments: MovieListCommentListRelationFilter
  movies: MovieListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MovieListWhereUniqueInput {
  AND: [MovieListWhereInput!]
  MovieListStats: MovieListStatsNullableRelationFilter
  NOT: [MovieListWhereInput!]
  OR: [MovieListWhereInput!]
  createdAt: DateTimeFilter
  id: String
  movieListAuthor: MovifierAppUserRelationFilter
  movieListComments: MovieListCommentListRelationFilter
  movies: MovieListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

type MovieMaxAggregate {
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input MovieMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type MovieMinAggregate {
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input MovieMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input MovieOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieOrderByRelevanceFieldEnum {
  id
}

input MovieOrderByRelevanceInput {
  fields: [MovieOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieOrderByWithAggregationInput {
  _count: MovieCountOrderByAggregateInput
  _max: MovieMaxOrderByAggregateInput
  _min: MovieMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input MovieOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieOrderByRelevanceInput
  createdAt: SortOrder
  crewMembers: MovieCrewMemberOnMovieOrderByRelationAggregateInput
  genres: GenreOrderByRelationAggregateInput
  id: SortOrder
  inWatchlistByUsers: MovifierAppUserOrderByRelationAggregateInput
  keywordCategories: MovieKeywordCategoryOrderByRelationAggregateInput
  movieInfo: MovieInfoOrderByWithRelationAndSearchRelevanceInput
  movieLists: MovieListOrderByRelationAggregateInput
  movieStats: MovieStatsOrderByWithRelationAndSearchRelevanceInput
  ratings: MovieRatingOrderByRelationAggregateInput
  spokenLanguages: MovieSpokenLanguageOrderByRelationAggregateInput
  studios: MovieStudioOrderByRelationAggregateInput
  updatedAt: SortOrder
}

type MovieRating {
  createdAt: DateTimeISO!
  id: String!
  movieId: String!
  rating: Int!
  updatedAt: DateTimeISO!
  userId: String!
}

input MovieRatingCreateManyMovieInput {
  createdAt: DateTimeISO
  id: String
  rating: Int!
  updatedAt: DateTimeISO
  userId: String!
}

input MovieRatingCreateManyMovieInputEnvelope {
  data: [MovieRatingCreateManyMovieInput!]!
  skipDuplicates: Boolean
}

input MovieRatingCreateManyUserInput {
  createdAt: DateTimeISO
  id: String
  movieId: String!
  rating: Int!
  updatedAt: DateTimeISO
}

input MovieRatingCreateManyUserInputEnvelope {
  data: [MovieRatingCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MovieRatingCreateNestedManyWithoutMovieInput {
  connect: [MovieRatingWhereUniqueInput!]
  connectOrCreate: [MovieRatingCreateOrConnectWithoutMovieInput!]
  create: [MovieRatingCreateWithoutMovieInput!]
  createMany: MovieRatingCreateManyMovieInputEnvelope
}

input MovieRatingCreateNestedManyWithoutUserInput {
  connect: [MovieRatingWhereUniqueInput!]
  connectOrCreate: [MovieRatingCreateOrConnectWithoutUserInput!]
  create: [MovieRatingCreateWithoutUserInput!]
  createMany: MovieRatingCreateManyUserInputEnvelope
}

input MovieRatingCreateOrConnectWithoutMovieInput {
  create: MovieRatingCreateWithoutMovieInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingCreateOrConnectWithoutUserInput {
  create: MovieRatingCreateWithoutUserInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingCreateWithoutMovieInput {
  Review: MovieReviewCreateNestedOneWithoutRatingInput
  createdAt: DateTimeISO
  id: String
  rating: Int!
  updatedAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutRatingInput!
}

input MovieRatingCreateWithoutUserInput {
  Review: MovieReviewCreateNestedOneWithoutRatingInput
  createdAt: DateTimeISO
  id: String
  movie: MovieCreateNestedOneWithoutRatingsInput!
  rating: Int!
  updatedAt: DateTimeISO
}

input MovieRatingListRelationFilter {
  every: MovieRatingWhereInput
  none: MovieRatingWhereInput
  some: MovieRatingWhereInput
}

input MovieRatingOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieRatingOrderByRelevanceFieldEnum {
  id
  movieId
  userId
}

input MovieRatingOrderByRelevanceInput {
  fields: [MovieRatingOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieRatingOrderByWithRelationAndSearchRelevanceInput {
  Review: MovieReviewOrderByWithRelationAndSearchRelevanceInput
  _relevance: MovieRatingOrderByRelevanceInput
  createdAt: SortOrder
  id: SortOrder
  movie: MovieOrderByWithRelationAndSearchRelevanceInput
  movieId: SortOrder
  rating: SortOrder
  updatedAt: SortOrder
  user: MovifierAppUserOrderByWithRelationAndSearchRelevanceInput
  userId: SortOrder
}

input MovieRatingRelationFilter {
  is: MovieRatingWhereInput
  isNot: MovieRatingWhereInput
}

enum MovieRatingScalarFieldEnum {
  createdAt
  id
  movieId
  rating
  updatedAt
  userId
}

input MovieRatingScalarWhereInput {
  AND: [MovieRatingScalarWhereInput!]
  NOT: [MovieRatingScalarWhereInput!]
  OR: [MovieRatingScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  movieId: StringFilter
  rating: IntFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MovieRatingUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieRatingUpdateManyWithWhereWithoutMovieInput {
  data: MovieRatingUpdateManyMutationInput!
  where: MovieRatingScalarWhereInput!
}

input MovieRatingUpdateManyWithWhereWithoutUserInput {
  data: MovieRatingUpdateManyMutationInput!
  where: MovieRatingScalarWhereInput!
}

input MovieRatingUpdateManyWithoutMovieNestedInput {
  connect: [MovieRatingWhereUniqueInput!]
  connectOrCreate: [MovieRatingCreateOrConnectWithoutMovieInput!]
  create: [MovieRatingCreateWithoutMovieInput!]
  createMany: MovieRatingCreateManyMovieInputEnvelope
  delete: [MovieRatingWhereUniqueInput!]
  deleteMany: [MovieRatingScalarWhereInput!]
  disconnect: [MovieRatingWhereUniqueInput!]
  set: [MovieRatingWhereUniqueInput!]
  update: [MovieRatingUpdateWithWhereUniqueWithoutMovieInput!]
  updateMany: [MovieRatingUpdateManyWithWhereWithoutMovieInput!]
  upsert: [MovieRatingUpsertWithWhereUniqueWithoutMovieInput!]
}

input MovieRatingUpdateManyWithoutUserNestedInput {
  connect: [MovieRatingWhereUniqueInput!]
  connectOrCreate: [MovieRatingCreateOrConnectWithoutUserInput!]
  create: [MovieRatingCreateWithoutUserInput!]
  createMany: MovieRatingCreateManyUserInputEnvelope
  delete: [MovieRatingWhereUniqueInput!]
  deleteMany: [MovieRatingScalarWhereInput!]
  disconnect: [MovieRatingWhereUniqueInput!]
  set: [MovieRatingWhereUniqueInput!]
  update: [MovieRatingUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MovieRatingUpdateManyWithWhereWithoutUserInput!]
  upsert: [MovieRatingUpsertWithWhereUniqueWithoutUserInput!]
}

input MovieRatingUpdateWithWhereUniqueWithoutMovieInput {
  data: MovieRatingUpdateWithoutMovieInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingUpdateWithWhereUniqueWithoutUserInput {
  data: MovieRatingUpdateWithoutUserInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingUpdateWithoutMovieInput {
  Review: MovieReviewUpdateOneWithoutRatingNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutRatingNestedInput
}

input MovieRatingUpdateWithoutUserInput {
  Review: MovieReviewUpdateOneWithoutRatingNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutRatingsNestedInput
  rating: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieRatingUpsertWithWhereUniqueWithoutMovieInput {
  create: MovieRatingCreateWithoutMovieInput!
  update: MovieRatingUpdateWithoutMovieInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingUpsertWithWhereUniqueWithoutUserInput {
  create: MovieRatingCreateWithoutUserInput!
  update: MovieRatingUpdateWithoutUserInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingWhereInput {
  AND: [MovieRatingWhereInput!]
  NOT: [MovieRatingWhereInput!]
  OR: [MovieRatingWhereInput!]
  Review: MovieReviewNullableRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  rating: IntFilter
  updatedAt: DateTimeFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

input MovieRatingWhereUniqueInput {
  AND: [MovieRatingWhereInput!]
  NOT: [MovieRatingWhereInput!]
  OR: [MovieRatingWhereInput!]
  Review: MovieReviewNullableRelationFilter
  createdAt: DateTimeFilter
  id: String
  movie: MovieRelationFilter
  movieId: String
  rating: IntFilter
  updatedAt: DateTimeFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

input MovieRelationFilter {
  is: MovieWhereInput
  isNot: MovieWhereInput
}

input MovieReviewCreateNestedOneWithoutRatingInput {
  connect: MovieReviewWhereUniqueInput
  connectOrCreate: MovieReviewCreateOrConnectWithoutRatingInput
  create: MovieReviewCreateWithoutRatingInput
}

input MovieReviewCreateOrConnectWithoutRatingInput {
  create: MovieReviewCreateWithoutRatingInput!
  where: MovieReviewWhereUniqueInput!
}

input MovieReviewCreateWithoutRatingInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input MovieReviewNullableRelationFilter {
  is: MovieReviewWhereInput
  isNot: MovieReviewWhereInput
}

enum MovieReviewOrderByRelevanceFieldEnum {
  content
  id
  ratingId
}

input MovieReviewOrderByRelevanceInput {
  fields: [MovieReviewOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieReviewOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieReviewOrderByRelevanceInput
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  rating: MovieRatingOrderByWithRelationAndSearchRelevanceInput
  ratingId: SortOrder
  updatedAt: SortOrder
}

input MovieReviewUpdateOneWithoutRatingNestedInput {
  connect: MovieReviewWhereUniqueInput
  connectOrCreate: MovieReviewCreateOrConnectWithoutRatingInput
  create: MovieReviewCreateWithoutRatingInput
  delete: MovieReviewWhereInput
  disconnect: MovieReviewWhereInput
  update: MovieReviewUpdateToOneWithWhereWithoutRatingInput
  upsert: MovieReviewUpsertWithoutRatingInput
}

input MovieReviewUpdateToOneWithWhereWithoutRatingInput {
  data: MovieReviewUpdateWithoutRatingInput!
  where: MovieReviewWhereInput
}

input MovieReviewUpdateWithoutRatingInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieReviewUpsertWithoutRatingInput {
  create: MovieReviewCreateWithoutRatingInput!
  update: MovieReviewUpdateWithoutRatingInput!
  where: MovieReviewWhereInput
}

input MovieReviewWhereInput {
  AND: [MovieReviewWhereInput!]
  NOT: [MovieReviewWhereInput!]
  OR: [MovieReviewWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  rating: MovieRatingRelationFilter
  ratingId: StringFilter
  updatedAt: DateTimeFilter
}

input MovieReviewWhereUniqueInput {
  AND: [MovieReviewWhereInput!]
  NOT: [MovieReviewWhereInput!]
  OR: [MovieReviewWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: String
  rating: MovieRatingRelationFilter
  ratingId: String
  updatedAt: DateTimeFilter
}

enum MovieScalarFieldEnum {
  createdAt
  id
  updatedAt
}

input MovieScalarWhereInput {
  AND: [MovieScalarWhereInput!]
  NOT: [MovieScalarWhereInput!]
  OR: [MovieScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input MovieScalarWhereWithAggregatesInput {
  AND: [MovieScalarWhereWithAggregatesInput!]
  NOT: [MovieScalarWhereWithAggregatesInput!]
  OR: [MovieScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type MovieSpokenLanguage {
  _count: MovieSpokenLanguageCount
  createdAt: DateTimeISO!
  language: String!
  updatedAt: DateTimeISO!
}

type MovieSpokenLanguageCount {
  movies(where: MovieWhereInput): Int!
}

input MovieSpokenLanguageCreateNestedManyWithoutMoviesInput {
  connect: [MovieSpokenLanguageWhereUniqueInput!]
  connectOrCreate: [MovieSpokenLanguageCreateOrConnectWithoutMoviesInput!]
  create: [MovieSpokenLanguageCreateWithoutMoviesInput!]
}

input MovieSpokenLanguageCreateOrConnectWithoutMoviesInput {
  create: MovieSpokenLanguageCreateWithoutMoviesInput!
  where: MovieSpokenLanguageWhereUniqueInput!
}

input MovieSpokenLanguageCreateWithoutMoviesInput {
  createdAt: DateTimeISO
  language: String!
  updatedAt: DateTimeISO
}

input MovieSpokenLanguageListRelationFilter {
  every: MovieSpokenLanguageWhereInput
  none: MovieSpokenLanguageWhereInput
  some: MovieSpokenLanguageWhereInput
}

input MovieSpokenLanguageOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieSpokenLanguageOrderByRelevanceFieldEnum {
  language
}

input MovieSpokenLanguageOrderByRelevanceInput {
  fields: [MovieSpokenLanguageOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieSpokenLanguageOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieSpokenLanguageOrderByRelevanceInput
  createdAt: SortOrder
  language: SortOrder
  movies: MovieOrderByRelationAggregateInput
  updatedAt: SortOrder
}

enum MovieSpokenLanguageScalarFieldEnum {
  createdAt
  language
  updatedAt
}

input MovieSpokenLanguageScalarWhereInput {
  AND: [MovieSpokenLanguageScalarWhereInput!]
  NOT: [MovieSpokenLanguageScalarWhereInput!]
  OR: [MovieSpokenLanguageScalarWhereInput!]
  createdAt: DateTimeFilter
  language: StringFilter
  updatedAt: DateTimeFilter
}

input MovieSpokenLanguageUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieSpokenLanguageUpdateManyWithWhereWithoutMoviesInput {
  data: MovieSpokenLanguageUpdateManyMutationInput!
  where: MovieSpokenLanguageScalarWhereInput!
}

input MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput {
  connect: [MovieSpokenLanguageWhereUniqueInput!]
  connectOrCreate: [MovieSpokenLanguageCreateOrConnectWithoutMoviesInput!]
  create: [MovieSpokenLanguageCreateWithoutMoviesInput!]
  delete: [MovieSpokenLanguageWhereUniqueInput!]
  deleteMany: [MovieSpokenLanguageScalarWhereInput!]
  disconnect: [MovieSpokenLanguageWhereUniqueInput!]
  set: [MovieSpokenLanguageWhereUniqueInput!]
  update: [MovieSpokenLanguageUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [MovieSpokenLanguageUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [MovieSpokenLanguageUpsertWithWhereUniqueWithoutMoviesInput!]
}

input MovieSpokenLanguageUpdateWithWhereUniqueWithoutMoviesInput {
  data: MovieSpokenLanguageUpdateWithoutMoviesInput!
  where: MovieSpokenLanguageWhereUniqueInput!
}

input MovieSpokenLanguageUpdateWithoutMoviesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieSpokenLanguageUpsertWithWhereUniqueWithoutMoviesInput {
  create: MovieSpokenLanguageCreateWithoutMoviesInput!
  update: MovieSpokenLanguageUpdateWithoutMoviesInput!
  where: MovieSpokenLanguageWhereUniqueInput!
}

input MovieSpokenLanguageWhereInput {
  AND: [MovieSpokenLanguageWhereInput!]
  NOT: [MovieSpokenLanguageWhereInput!]
  OR: [MovieSpokenLanguageWhereInput!]
  createdAt: DateTimeFilter
  language: StringFilter
  movies: MovieListRelationFilter
  updatedAt: DateTimeFilter
}

input MovieSpokenLanguageWhereUniqueInput {
  AND: [MovieSpokenLanguageWhereInput!]
  NOT: [MovieSpokenLanguageWhereInput!]
  OR: [MovieSpokenLanguageWhereInput!]
  createdAt: DateTimeFilter
  language: String
  movies: MovieListRelationFilter
  updatedAt: DateTimeFilter
}

type MovieStats {
  avgRating: Float!
  id: String!
  movieId: String!
  overallPlaceINTop: Int!
  timesWatchedCount: Int!
  totalLikesCount: Int!
  totalRatingsCount: Int!
}

input MovieStatsCreateNestedOneWithoutMovieInput {
  connect: MovieStatsWhereUniqueInput
  connectOrCreate: MovieStatsCreateOrConnectWithoutMovieInput
  create: MovieStatsCreateWithoutMovieInput
}

input MovieStatsCreateOrConnectWithoutMovieInput {
  create: MovieStatsCreateWithoutMovieInput!
  where: MovieStatsWhereUniqueInput!
}

input MovieStatsCreateWithoutMovieInput {
  avgRating: Float!
  id: String
  overallPlaceINTop: Int!
  timesWatchedCount: Int!
  totalLikesCount: Int!
  totalRatingsCount: Int!
}

input MovieStatsNullableRelationFilter {
  is: MovieStatsWhereInput
  isNot: MovieStatsWhereInput
}

enum MovieStatsOrderByRelevanceFieldEnum {
  id
  movieId
}

input MovieStatsOrderByRelevanceInput {
  fields: [MovieStatsOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieStatsOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieStatsOrderByRelevanceInput
  avgRating: SortOrder
  id: SortOrder
  movie: MovieOrderByWithRelationAndSearchRelevanceInput
  movieId: SortOrder
  overallPlaceINTop: SortOrder
  timesWatchedCount: SortOrder
  totalLikesCount: SortOrder
  totalRatingsCount: SortOrder
}

input MovieStatsUpdateOneWithoutMovieNestedInput {
  connect: MovieStatsWhereUniqueInput
  connectOrCreate: MovieStatsCreateOrConnectWithoutMovieInput
  create: MovieStatsCreateWithoutMovieInput
  delete: MovieStatsWhereInput
  disconnect: MovieStatsWhereInput
  update: MovieStatsUpdateToOneWithWhereWithoutMovieInput
  upsert: MovieStatsUpsertWithoutMovieInput
}

input MovieStatsUpdateToOneWithWhereWithoutMovieInput {
  data: MovieStatsUpdateWithoutMovieInput!
  where: MovieStatsWhereInput
}

input MovieStatsUpdateWithoutMovieInput {
  avgRating: FloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  overallPlaceINTop: IntFieldUpdateOperationsInput
  timesWatchedCount: IntFieldUpdateOperationsInput
  totalLikesCount: IntFieldUpdateOperationsInput
  totalRatingsCount: IntFieldUpdateOperationsInput
}

input MovieStatsUpsertWithoutMovieInput {
  create: MovieStatsCreateWithoutMovieInput!
  update: MovieStatsUpdateWithoutMovieInput!
  where: MovieStatsWhereInput
}

input MovieStatsWhereInput {
  AND: [MovieStatsWhereInput!]
  NOT: [MovieStatsWhereInput!]
  OR: [MovieStatsWhereInput!]
  avgRating: FloatFilter
  id: StringFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  overallPlaceINTop: IntFilter
  timesWatchedCount: IntFilter
  totalLikesCount: IntFilter
  totalRatingsCount: IntFilter
}

input MovieStatsWhereUniqueInput {
  AND: [MovieStatsWhereInput!]
  NOT: [MovieStatsWhereInput!]
  OR: [MovieStatsWhereInput!]
  avgRating: FloatFilter
  id: String
  movie: MovieRelationFilter
  movieId: String
  overallPlaceINTop: IntFilter
  timesWatchedCount: IntFilter
  totalLikesCount: IntFilter
  totalRatingsCount: IntFilter
}

type MovieStudio {
  _count: MovieStudioCount
  createdAt: DateTimeISO!
  id: String!
  name: String!
  updatedAt: DateTimeISO!
}

type MovieStudioCount {
  movies(where: MovieWhereInput): Int!
}

input MovieStudioCreateNestedManyWithoutMoviesInput {
  connect: [MovieStudioWhereUniqueInput!]
  connectOrCreate: [MovieStudioCreateOrConnectWithoutMoviesInput!]
  create: [MovieStudioCreateWithoutMoviesInput!]
}

input MovieStudioCreateOrConnectWithoutMoviesInput {
  create: MovieStudioCreateWithoutMoviesInput!
  where: MovieStudioWhereUniqueInput!
}

input MovieStudioCreateWithoutMoviesInput {
  createdAt: DateTimeISO
  id: String
  name: String!
  updatedAt: DateTimeISO
}

input MovieStudioListRelationFilter {
  every: MovieStudioWhereInput
  none: MovieStudioWhereInput
  some: MovieStudioWhereInput
}

input MovieStudioOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovieStudioOrderByRelevanceFieldEnum {
  id
  name
}

input MovieStudioOrderByRelevanceInput {
  fields: [MovieStudioOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovieStudioOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovieStudioOrderByRelevanceInput
  createdAt: SortOrder
  id: SortOrder
  movies: MovieOrderByRelationAggregateInput
  name: SortOrder
  updatedAt: SortOrder
}

enum MovieStudioScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input MovieStudioScalarWhereInput {
  AND: [MovieStudioScalarWhereInput!]
  NOT: [MovieStudioScalarWhereInput!]
  OR: [MovieStudioScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input MovieStudioUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieStudioUpdateManyWithWhereWithoutMoviesInput {
  data: MovieStudioUpdateManyMutationInput!
  where: MovieStudioScalarWhereInput!
}

input MovieStudioUpdateManyWithoutMoviesNestedInput {
  connect: [MovieStudioWhereUniqueInput!]
  connectOrCreate: [MovieStudioCreateOrConnectWithoutMoviesInput!]
  create: [MovieStudioCreateWithoutMoviesInput!]
  delete: [MovieStudioWhereUniqueInput!]
  deleteMany: [MovieStudioScalarWhereInput!]
  disconnect: [MovieStudioWhereUniqueInput!]
  set: [MovieStudioWhereUniqueInput!]
  update: [MovieStudioUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [MovieStudioUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [MovieStudioUpsertWithWhereUniqueWithoutMoviesInput!]
}

input MovieStudioUpdateWithWhereUniqueWithoutMoviesInput {
  data: MovieStudioUpdateWithoutMoviesInput!
  where: MovieStudioWhereUniqueInput!
}

input MovieStudioUpdateWithoutMoviesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieStudioUpsertWithWhereUniqueWithoutMoviesInput {
  create: MovieStudioCreateWithoutMoviesInput!
  update: MovieStudioUpdateWithoutMoviesInput!
  where: MovieStudioWhereUniqueInput!
}

input MovieStudioWhereInput {
  AND: [MovieStudioWhereInput!]
  NOT: [MovieStudioWhereInput!]
  OR: [MovieStudioWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  movies: MovieListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input MovieStudioWhereUniqueInput {
  AND: [MovieStudioWhereInput!]
  NOT: [MovieStudioWhereInput!]
  OR: [MovieStudioWhereInput!]
  createdAt: DateTimeFilter
  id: String
  movies: MovieListRelationFilter
  name: String
  updatedAt: DateTimeFilter
}

input MovieUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberOnMovieUpdateManyWithoutMovieNestedInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: MovifierAppUserUpdateManyWithoutWatchlistNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  movieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  ratings: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateManyWithWhereWithoutInWatchlistByUsersInput {
  data: MovieUpdateManyMutationInput!
  where: MovieScalarWhereInput!
}

input MovieUpdateManyWithWhereWithoutMovieListsInput {
  data: MovieUpdateManyMutationInput!
  where: MovieScalarWhereInput!
}

input MovieUpdateManyWithoutInWatchlistByUsersNestedInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutInWatchlistByUsersInput!]
  create: [MovieCreateWithoutInWatchlistByUsersInput!]
  delete: [MovieWhereUniqueInput!]
  deleteMany: [MovieScalarWhereInput!]
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutInWatchlistByUsersInput!]
  updateMany: [MovieUpdateManyWithWhereWithoutInWatchlistByUsersInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutInWatchlistByUsersInput!]
}

input MovieUpdateManyWithoutMovieListsNestedInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutMovieListsInput!]
  create: [MovieCreateWithoutMovieListsInput!]
  delete: [MovieWhereUniqueInput!]
  deleteMany: [MovieScalarWhereInput!]
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutMovieListsInput!]
  updateMany: [MovieUpdateManyWithWhereWithoutMovieListsInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutMovieListsInput!]
}

input MovieUpdateOneRequiredWithoutRatingsNestedInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutRatingsInput
  create: MovieCreateWithoutRatingsInput
  update: MovieUpdateToOneWithWhereWithoutRatingsInput
  upsert: MovieUpsertWithoutRatingsInput
}

input MovieUpdateToOneWithWhereWithoutRatingsInput {
  data: MovieUpdateWithoutRatingsInput!
  where: MovieWhereInput
}

input MovieUpdateWithWhereUniqueWithoutInWatchlistByUsersInput {
  data: MovieUpdateWithoutInWatchlistByUsersInput!
  where: MovieWhereUniqueInput!
}

input MovieUpdateWithWhereUniqueWithoutMovieListsInput {
  data: MovieUpdateWithoutMovieListsInput!
  where: MovieWhereUniqueInput!
}

input MovieUpdateWithoutInWatchlistByUsersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberOnMovieUpdateManyWithoutMovieNestedInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  movieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  ratings: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateWithoutMovieListsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberOnMovieUpdateManyWithoutMovieNestedInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: MovifierAppUserUpdateManyWithoutWatchlistNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  ratings: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateWithoutRatingsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberOnMovieUpdateManyWithoutMovieNestedInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: MovifierAppUserUpdateManyWithoutWatchlistNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  movieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpsertWithWhereUniqueWithoutInWatchlistByUsersInput {
  create: MovieCreateWithoutInWatchlistByUsersInput!
  update: MovieUpdateWithoutInWatchlistByUsersInput!
  where: MovieWhereUniqueInput!
}

input MovieUpsertWithWhereUniqueWithoutMovieListsInput {
  create: MovieCreateWithoutMovieListsInput!
  update: MovieUpdateWithoutMovieListsInput!
  where: MovieWhereUniqueInput!
}

input MovieUpsertWithoutRatingsInput {
  create: MovieCreateWithoutRatingsInput!
  update: MovieUpdateWithoutRatingsInput!
  where: MovieWhereInput
}

input MovieWhereInput {
  AND: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  createdAt: DateTimeFilter
  crewMembers: MovieCrewMemberOnMovieListRelationFilter
  genres: GenreListRelationFilter
  id: StringFilter
  inWatchlistByUsers: MovifierAppUserListRelationFilter
  keywordCategories: MovieKeywordCategoryListRelationFilter
  movieInfo: MovieInfoNullableRelationFilter
  movieLists: MovieListListRelationFilter
  movieStats: MovieStatsNullableRelationFilter
  ratings: MovieRatingListRelationFilter
  spokenLanguages: MovieSpokenLanguageListRelationFilter
  studios: MovieStudioListRelationFilter
  updatedAt: DateTimeFilter
}

input MovieWhereUniqueInput {
  AND: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  createdAt: DateTimeFilter
  crewMembers: MovieCrewMemberOnMovieListRelationFilter
  genres: GenreListRelationFilter
  id: String
  inWatchlistByUsers: MovifierAppUserListRelationFilter
  keywordCategories: MovieKeywordCategoryListRelationFilter
  movieInfo: MovieInfoNullableRelationFilter
  movieLists: MovieListListRelationFilter
  movieStats: MovieStatsNullableRelationFilter
  ratings: MovieRatingListRelationFilter
  spokenLanguages: MovieSpokenLanguageListRelationFilter
  studios: MovieStudioListRelationFilter
  updatedAt: DateTimeFilter
}

enum MoviefireAppUserRole {
  ADMIN
  USER
}

type MovifierAppUser {
  _count: MovifierAppUserCount
  createdAt: DateTimeISO!
  email: String!
  id: String!
  name: String!
  role: MoviefireAppUserRole!
  updatedAt: DateTimeISO!
  username: String!
}

type MovifierAppUserCount {
  movieLists(where: MovieListWhereInput): Int!
  movieListsComments(where: MovieListCommentWhereInput): Int!
  rating(where: MovieRatingWhereInput): Int!
  watchlist(where: MovieWhereInput): Int!
}

input MovifierAppUserCreateInput {
  createdAt: DateTimeISO
  email: String!
  id: String
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password: String!
  rating: MovieRatingCreateNestedManyWithoutUserInput
  role: MoviefireAppUserRole
  updatedAt: DateTimeISO
  username: String!
  watchlist: MovieCreateNestedManyWithoutInWatchlistByUsersInput
}

input MovifierAppUserCreateNestedManyWithoutWatchlistInput {
  connect: [MovifierAppUserWhereUniqueInput!]
  connectOrCreate: [MovifierAppUserCreateOrConnectWithoutWatchlistInput!]
  create: [MovifierAppUserCreateWithoutWatchlistInput!]
}

input MovifierAppUserCreateNestedOneWithoutMovieListsCommentsInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutMovieListsCommentsInput
  create: MovifierAppUserCreateWithoutMovieListsCommentsInput
}

input MovifierAppUserCreateNestedOneWithoutMovieListsInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutMovieListsInput
  create: MovifierAppUserCreateWithoutMovieListsInput
}

input MovifierAppUserCreateNestedOneWithoutRatingInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutRatingInput
  create: MovifierAppUserCreateWithoutRatingInput
}

input MovifierAppUserCreateOrConnectWithoutMovieListsCommentsInput {
  create: MovifierAppUserCreateWithoutMovieListsCommentsInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateOrConnectWithoutMovieListsInput {
  create: MovifierAppUserCreateWithoutMovieListsInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateOrConnectWithoutRatingInput {
  create: MovifierAppUserCreateWithoutRatingInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateOrConnectWithoutWatchlistInput {
  create: MovifierAppUserCreateWithoutWatchlistInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateWithoutMovieListsCommentsInput {
  createdAt: DateTimeISO
  email: String!
  id: String
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  name: String!
  password: String!
  rating: MovieRatingCreateNestedManyWithoutUserInput
  role: MoviefireAppUserRole
  updatedAt: DateTimeISO
  username: String!
  watchlist: MovieCreateNestedManyWithoutInWatchlistByUsersInput
}

input MovifierAppUserCreateWithoutMovieListsInput {
  createdAt: DateTimeISO
  email: String!
  id: String
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password: String!
  rating: MovieRatingCreateNestedManyWithoutUserInput
  role: MoviefireAppUserRole
  updatedAt: DateTimeISO
  username: String!
  watchlist: MovieCreateNestedManyWithoutInWatchlistByUsersInput
}

input MovifierAppUserCreateWithoutRatingInput {
  createdAt: DateTimeISO
  email: String!
  id: String
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password: String!
  role: MoviefireAppUserRole
  updatedAt: DateTimeISO
  username: String!
  watchlist: MovieCreateNestedManyWithoutInWatchlistByUsersInput
}

input MovifierAppUserCreateWithoutWatchlistInput {
  createdAt: DateTimeISO
  email: String!
  id: String
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password: String!
  rating: MovieRatingCreateNestedManyWithoutUserInput
  role: MoviefireAppUserRole
  updatedAt: DateTimeISO
  username: String!
}

input MovifierAppUserListRelationFilter {
  every: MovifierAppUserWhereInput
  none: MovifierAppUserWhereInput
  some: MovifierAppUserWhereInput
}

input MovifierAppUserOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MovifierAppUserOrderByRelevanceFieldEnum {
  email
  id
  name
  password
  username
}

input MovifierAppUserOrderByRelevanceInput {
  fields: [MovifierAppUserOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MovifierAppUserOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MovifierAppUserOrderByRelevanceInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  movieLists: MovieListOrderByRelationAggregateInput
  movieListsComments: MovieListCommentOrderByRelationAggregateInput
  name: SortOrder
  password: SortOrder
  rating: MovieRatingOrderByRelationAggregateInput
  role: SortOrder
  updatedAt: SortOrder
  username: SortOrder
  watchlist: MovieOrderByRelationAggregateInput
}

input MovifierAppUserRelationFilter {
  is: MovifierAppUserWhereInput
  isNot: MovifierAppUserWhereInput
}

enum MovifierAppUserScalarFieldEnum {
  createdAt
  email
  id
  name
  password
  role
  updatedAt
  username
}

input MovifierAppUserScalarWhereInput {
  AND: [MovifierAppUserScalarWhereInput!]
  NOT: [MovifierAppUserScalarWhereInput!]
  OR: [MovifierAppUserScalarWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  password: StringFilter
  role: EnumMoviefireAppUserRoleFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input MovifierAppUserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumMoviefireAppUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input MovifierAppUserUpdateManyWithWhereWithoutWatchlistInput {
  data: MovifierAppUserUpdateManyMutationInput!
  where: MovifierAppUserScalarWhereInput!
}

input MovifierAppUserUpdateManyWithoutWatchlistNestedInput {
  connect: [MovifierAppUserWhereUniqueInput!]
  connectOrCreate: [MovifierAppUserCreateOrConnectWithoutWatchlistInput!]
  create: [MovifierAppUserCreateWithoutWatchlistInput!]
  delete: [MovifierAppUserWhereUniqueInput!]
  deleteMany: [MovifierAppUserScalarWhereInput!]
  disconnect: [MovifierAppUserWhereUniqueInput!]
  set: [MovifierAppUserWhereUniqueInput!]
  update: [MovifierAppUserUpdateWithWhereUniqueWithoutWatchlistInput!]
  updateMany: [MovifierAppUserUpdateManyWithWhereWithoutWatchlistInput!]
  upsert: [MovifierAppUserUpsertWithWhereUniqueWithoutWatchlistInput!]
}

input MovifierAppUserUpdateOneRequiredWithoutMovieListsCommentsNestedInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutMovieListsCommentsInput
  create: MovifierAppUserCreateWithoutMovieListsCommentsInput
  update: MovifierAppUserUpdateToOneWithWhereWithoutMovieListsCommentsInput
  upsert: MovifierAppUserUpsertWithoutMovieListsCommentsInput
}

input MovifierAppUserUpdateOneRequiredWithoutMovieListsNestedInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutMovieListsInput
  create: MovifierAppUserCreateWithoutMovieListsInput
  update: MovifierAppUserUpdateToOneWithWhereWithoutMovieListsInput
  upsert: MovifierAppUserUpsertWithoutMovieListsInput
}

input MovifierAppUserUpdateOneRequiredWithoutRatingNestedInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutRatingInput
  create: MovifierAppUserCreateWithoutRatingInput
  update: MovifierAppUserUpdateToOneWithWhereWithoutRatingInput
  upsert: MovifierAppUserUpsertWithoutRatingInput
}

input MovifierAppUserUpdateToOneWithWhereWithoutMovieListsCommentsInput {
  data: MovifierAppUserUpdateWithoutMovieListsCommentsInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpdateToOneWithWhereWithoutMovieListsInput {
  data: MovifierAppUserUpdateWithoutMovieListsInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpdateToOneWithWhereWithoutRatingInput {
  data: MovifierAppUserUpdateWithoutRatingInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpdateWithWhereUniqueWithoutWatchlistInput {
  data: MovifierAppUserUpdateWithoutWatchlistInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserUpdateWithoutMovieListsCommentsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieLists: MovieListUpdateManyWithoutMovieListAuthorNestedInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  rating: MovieRatingUpdateManyWithoutUserNestedInput
  role: EnumMoviefireAppUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchlist: MovieUpdateManyWithoutInWatchlistByUsersNestedInput
}

input MovifierAppUserUpdateWithoutMovieListsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieListsComments: MovieListCommentUpdateManyWithoutUserNestedInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  rating: MovieRatingUpdateManyWithoutUserNestedInput
  role: EnumMoviefireAppUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchlist: MovieUpdateManyWithoutInWatchlistByUsersNestedInput
}

input MovifierAppUserUpdateWithoutRatingInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieLists: MovieListUpdateManyWithoutMovieListAuthorNestedInput
  movieListsComments: MovieListCommentUpdateManyWithoutUserNestedInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumMoviefireAppUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchlist: MovieUpdateManyWithoutInWatchlistByUsersNestedInput
}

input MovifierAppUserUpdateWithoutWatchlistInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieLists: MovieListUpdateManyWithoutMovieListAuthorNestedInput
  movieListsComments: MovieListCommentUpdateManyWithoutUserNestedInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  rating: MovieRatingUpdateManyWithoutUserNestedInput
  role: EnumMoviefireAppUserRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input MovifierAppUserUpsertWithWhereUniqueWithoutWatchlistInput {
  create: MovifierAppUserCreateWithoutWatchlistInput!
  update: MovifierAppUserUpdateWithoutWatchlistInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserUpsertWithoutMovieListsCommentsInput {
  create: MovifierAppUserCreateWithoutMovieListsCommentsInput!
  update: MovifierAppUserUpdateWithoutMovieListsCommentsInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpsertWithoutMovieListsInput {
  create: MovifierAppUserCreateWithoutMovieListsInput!
  update: MovifierAppUserUpdateWithoutMovieListsInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpsertWithoutRatingInput {
  create: MovifierAppUserCreateWithoutRatingInput!
  update: MovifierAppUserUpdateWithoutRatingInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserWhereInput {
  AND: [MovifierAppUserWhereInput!]
  NOT: [MovifierAppUserWhereInput!]
  OR: [MovifierAppUserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  movieLists: MovieListListRelationFilter
  movieListsComments: MovieListCommentListRelationFilter
  name: StringFilter
  password: StringFilter
  rating: MovieRatingListRelationFilter
  role: EnumMoviefireAppUserRoleFilter
  updatedAt: DateTimeFilter
  username: StringFilter
  watchlist: MovieListRelationFilter
}

input MovifierAppUserWhereUniqueInput {
  AND: [MovifierAppUserWhereInput!]
  NOT: [MovifierAppUserWhereInput!]
  OR: [MovifierAppUserWhereInput!]
  createdAt: DateTimeFilter
  email: String
  id: String
  movieLists: MovieListListRelationFilter
  movieListsComments: MovieListCommentListRelationFilter
  name: StringFilter
  password: StringFilter
  rating: MovieRatingListRelationFilter
  role: EnumMoviefireAppUserRoleFilter
  updatedAt: DateTimeFilter
  username: String
  watchlist: MovieListRelationFilter
}

type Mutation {
  createManyMovie(data: [MovieCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneMovie(data: MovieCreateInput!): Movie!
  createOneMovifierAppUser(data: MovifierAppUserCreateInput!): UserRegisterOutput!
  deleteManyMovie(where: MovieWhereInput): AffectedRowsOutput!
  deleteOneMovie(where: MovieWhereUniqueInput!): Movie
  loginUser(data: UserLoginInput!): UserLoginOutput!
  updateManyMovie(data: MovieUpdateManyMutationInput!, where: MovieWhereInput): AffectedRowsOutput!
  updateOneMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie
  upsertOneMovie(create: MovieCreateInput!, update: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie!
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedEnumMoviefireAppUserRoleFilter {
  equals: MoviefireAppUserRole
  in: [MoviefireAppUserRole!]
  not: NestedEnumMoviefireAppUserRoleFilter
  notIn: [MoviefireAppUserRole!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

type Query {
  aggregateMovie(cursor: MovieWhereUniqueInput, orderBy: [MovieOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWhereInput): AggregateMovie!
  findFirstMovie(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWhereInput): Movie
  findFirstMovieOrThrow(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWhereInput): Movie
  getMovie(where: MovieWhereUniqueInput!): Movie
  groupByMovie(by: [MovieScalarFieldEnum!]!, having: MovieScalarWhereWithAggregatesInput, orderBy: [MovieOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieWhereInput): [MovieGroupBy!]!
  me: MovifierAppUser
  movie(where: MovieWhereUniqueInput!): Movie
  movies(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
  movifierAppUsers(cursor: MovifierAppUserWhereUniqueInput, distinct: [MovifierAppUserScalarFieldEnum!], orderBy: [MovifierAppUserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: MovifierAppUserWhereInput): [MovifierAppUser!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input UserLoginInput {
  email: String!
  password: String!
}

type UserLoginOutput {
  token: String!
  user: MovifierAppUser!
}

type UserRegisterOutput {
  token: String!
  user: MovifierAppUser!
}