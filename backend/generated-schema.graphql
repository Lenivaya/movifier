# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateGenre {
  _count: GenreCountAggregate
  _max: GenreMaxAggregate
  _min: GenreMinAggregate
}

type AggregateMovie {
  _count: MovieCountAggregate
  _max: MovieMaxAggregate
  _min: MovieMinAggregate
}

type AggregateMovieCrewMember {
  _count: MovieCrewMemberCountAggregate
  _max: MovieCrewMemberMaxAggregate
  _min: MovieCrewMemberMinAggregate
}

type AggregateMovieCrewMemberType {
  _count: MovieCrewMemberTypeCountAggregate
  _max: MovieCrewMemberTypeMaxAggregate
  _min: MovieCrewMemberTypeMinAggregate
}

type AggregateMovieInfo {
  _avg: MovieInfoAvgAggregate
  _count: MovieInfoCountAggregate
  _max: MovieInfoMaxAggregate
  _min: MovieInfoMinAggregate
  _sum: MovieInfoSumAggregate
}

type AggregateMovieKeywordCategory {
  _count: MovieKeywordCategoryCountAggregate
  _max: MovieKeywordCategoryMaxAggregate
  _min: MovieKeywordCategoryMinAggregate
}

type AggregateMovieList {
  _count: MovieListCountAggregate
  _max: MovieListMaxAggregate
  _min: MovieListMinAggregate
}

type AggregateMovieListComment {
  _count: MovieListCommentCountAggregate
  _max: MovieListCommentMaxAggregate
  _min: MovieListCommentMinAggregate
}

type AggregateMovieListStats {
  _avg: MovieListStatsAvgAggregate
  _count: MovieListStatsCountAggregate
  _max: MovieListStatsMaxAggregate
  _min: MovieListStatsMinAggregate
  _sum: MovieListStatsSumAggregate
}

type AggregateMovieRating {
  _avg: MovieRatingAvgAggregate
  _count: MovieRatingCountAggregate
  _max: MovieRatingMaxAggregate
  _min: MovieRatingMinAggregate
  _sum: MovieRatingSumAggregate
}

type AggregateMovieReview {
  _count: MovieReviewCountAggregate
  _max: MovieReviewMaxAggregate
  _min: MovieReviewMinAggregate
}

type AggregateMovieSpokenLanguage {
  _count: MovieSpokenLanguageCountAggregate
  _max: MovieSpokenLanguageMaxAggregate
  _min: MovieSpokenLanguageMinAggregate
}

type AggregateMovieStats {
  _avg: MovieStatsAvgAggregate
  _count: MovieStatsCountAggregate
  _max: MovieStatsMaxAggregate
  _min: MovieStatsMinAggregate
  _sum: MovieStatsSumAggregate
}

type AggregateMovieStudio {
  _count: MovieStudioCountAggregate
  _max: MovieStudioMaxAggregate
  _min: MovieStudioMinAggregate
}

type AggregateMovifierAppUser {
  _count: MovifierAppUserCountAggregate
  _max: MovifierAppUserMaxAggregate
  _min: MovifierAppUserMinAggregate
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

type Genre {
  _count: GenreCount
  createdAt: DateTimeISO!
  movies(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationInput!], skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
  name: String!
  updatedAt: DateTimeISO!
}

type GenreCount {
  movies(where: MovieWhereInput): Int!
}

type GenreCountAggregate {
  _all: Int!
  createdAt: Int!
  name: Int!
  updatedAt: Int!
}

input GenreCountOrderByAggregateInput {
  createdAt: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GenreCreateInput {
  createdAt: DateTimeISO
  movies: MovieCreateNestedManyWithoutGenresInput
  name: String!
  updatedAt: DateTimeISO
}

input GenreCreateManyInput {
  createdAt: DateTimeISO
  name: String!
  updatedAt: DateTimeISO
}

input GenreCreateNestedManyWithoutMoviesInput {
  connect: [GenreWhereUniqueInput!]
  connectOrCreate: [GenreCreateOrConnectWithoutMoviesInput!]
  create: [GenreCreateWithoutMoviesInput!]
}

input GenreCreateOrConnectWithoutMoviesInput {
  create: GenreCreateWithoutMoviesInput!
  where: GenreWhereUniqueInput!
}

input GenreCreateWithoutMoviesInput {
  createdAt: DateTimeISO
  name: String!
  updatedAt: DateTimeISO
}

type GenreGroupBy {
  _count: GenreCountAggregate
  _max: GenreMaxAggregate
  _min: GenreMinAggregate
  createdAt: DateTimeISO!
  name: String!
  updatedAt: DateTimeISO!
}

input GenreListRelationFilter {
  every: GenreWhereInput
  none: GenreWhereInput
  some: GenreWhereInput
}

type GenreMaxAggregate {
  createdAt: DateTimeISO
  name: String
  updatedAt: DateTimeISO
}

input GenreMaxOrderByAggregateInput {
  createdAt: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type GenreMinAggregate {
  createdAt: DateTimeISO
  name: String
  updatedAt: DateTimeISO
}

input GenreMinOrderByAggregateInput {
  createdAt: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GenreOrderByRelationAggregateInput {
  _count: SortOrder
}

input GenreOrderByWithAggregationInput {
  _count: GenreCountOrderByAggregateInput
  _max: GenreMaxOrderByAggregateInput
  _min: GenreMinOrderByAggregateInput
  createdAt: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GenreOrderByWithRelationInput {
  createdAt: SortOrder
  movies: MovieOrderByRelationAggregateInput
  name: SortOrder
  updatedAt: SortOrder
}

enum GenreScalarFieldEnum {
  createdAt
  name
  updatedAt
}

input GenreScalarWhereInput {
  AND: [GenreScalarWhereInput!]
  NOT: [GenreScalarWhereInput!]
  OR: [GenreScalarWhereInput!]
  createdAt: DateTimeFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input GenreScalarWhereWithAggregatesInput {
  AND: [GenreScalarWhereWithAggregatesInput!]
  NOT: [GenreScalarWhereWithAggregatesInput!]
  OR: [GenreScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input GenreUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  movies: MovieUpdateManyWithoutGenresNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpdateManyWithWhereWithoutMoviesInput {
  data: GenreUpdateManyMutationInput!
  where: GenreScalarWhereInput!
}

input GenreUpdateManyWithoutMoviesNestedInput {
  connect: [GenreWhereUniqueInput!]
  connectOrCreate: [GenreCreateOrConnectWithoutMoviesInput!]
  create: [GenreCreateWithoutMoviesInput!]
  delete: [GenreWhereUniqueInput!]
  deleteMany: [GenreScalarWhereInput!]
  disconnect: [GenreWhereUniqueInput!]
  set: [GenreWhereUniqueInput!]
  update: [GenreUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [GenreUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [GenreUpsertWithWhereUniqueWithoutMoviesInput!]
}

input GenreUpdateWithWhereUniqueWithoutMoviesInput {
  data: GenreUpdateWithoutMoviesInput!
  where: GenreWhereUniqueInput!
}

input GenreUpdateWithoutMoviesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpsertWithWhereUniqueWithoutMoviesInput {
  create: GenreCreateWithoutMoviesInput!
  update: GenreUpdateWithoutMoviesInput!
  where: GenreWhereUniqueInput!
}

input GenreWhereInput {
  AND: [GenreWhereInput!]
  NOT: [GenreWhereInput!]
  OR: [GenreWhereInput!]
  createdAt: DateTimeFilter
  movies: MovieListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input GenreWhereUniqueInput {
  AND: [GenreWhereInput!]
  NOT: [GenreWhereInput!]
  OR: [GenreWhereInput!]
  createdAt: DateTimeFilter
  movies: MovieListRelationFilter
  name: String
  updatedAt: DateTimeFilter
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Movie {
  MovieStats(where: MovieStatsWhereInput): MovieStats
  _count: MovieCount
  createdAt: DateTimeISO!
  crewMembers(cursor: MovieCrewMemberWhereUniqueInput, distinct: [MovieCrewMemberScalarFieldEnum!], orderBy: [MovieCrewMemberOrderByWithRelationInput!], skip: Int, take: Int, where: MovieCrewMemberWhereInput): [MovieCrewMember!]!
  genreName: String
  genres(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum!], orderBy: [GenreOrderByWithRelationInput!], skip: Int, take: Int, where: GenreWhereInput): [Genre!]!
  id: String!
  inWatchlistByUsers(cursor: MovifierAppUserWhereUniqueInput, distinct: [MovifierAppUserScalarFieldEnum!], orderBy: [MovifierAppUserOrderByWithRelationInput!], skip: Int, take: Int, where: MovifierAppUserWhereInput): [MovifierAppUser!]!
  keywordCategories(cursor: MovieKeywordCategoryWhereUniqueInput, distinct: [MovieKeywordCategoryScalarFieldEnum!], orderBy: [MovieKeywordCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: MovieKeywordCategoryWhereInput): [MovieKeywordCategory!]!
  movieInfo(where: MovieInfoWhereInput): MovieInfo
  movieLists(cursor: MovieListWhereUniqueInput, distinct: [MovieListScalarFieldEnum!], orderBy: [MovieListOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListWhereInput): [MovieList!]!
  ratings(cursor: MovieRatingWhereUniqueInput, distinct: [MovieRatingScalarFieldEnum!], orderBy: [MovieRatingOrderByWithRelationInput!], skip: Int, take: Int, where: MovieRatingWhereInput): [MovieRating!]!
  spokenLanguages(cursor: MovieSpokenLanguageWhereUniqueInput, distinct: [MovieSpokenLanguageScalarFieldEnum!], orderBy: [MovieSpokenLanguageOrderByWithRelationInput!], skip: Int, take: Int, where: MovieSpokenLanguageWhereInput): [MovieSpokenLanguage!]!
  studios(cursor: MovieStudioWhereUniqueInput, distinct: [MovieStudioScalarFieldEnum!], orderBy: [MovieStudioOrderByWithRelationInput!], skip: Int, take: Int, where: MovieStudioWhereInput): [MovieStudio!]!
  updatedAt: DateTimeISO!
}

type MovieCount {
  crewMembers(where: MovieCrewMemberWhereInput): Int!
  genres(where: GenreWhereInput): Int!
  inWatchlistByUsers(where: MovifierAppUserWhereInput): Int!
  keywordCategories(where: MovieKeywordCategoryWhereInput): Int!
  movieLists(where: MovieListWhereInput): Int!
  ratings(where: MovieRatingWhereInput): Int!
  spokenLanguages(where: MovieSpokenLanguageWhereInput): Int!
  studios(where: MovieStudioWhereInput): Int!
}

type MovieCountAggregate {
  _all: Int!
  createdAt: Int!
  genreName: Int!
  id: Int!
  updatedAt: Int!
}

input MovieCountOrderByAggregateInput {
  createdAt: SortOrder
  genreName: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input MovieCreateInput {
  MovieStats: MovieStatsCreateNestedOneWithoutMovieInput
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberCreateNestedManyWithoutMoviesInput
  genreName: String
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: MovifierAppUserCreateNestedManyWithoutWatchlistInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  ratings: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

input MovieCreateManyInput {
  createdAt: DateTimeISO
  genreName: String
  id: String
  updatedAt: DateTimeISO
}

input MovieCreateNestedManyWithoutCrewMembersInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutCrewMembersInput!]
  create: [MovieCreateWithoutCrewMembersInput!]
}

input MovieCreateNestedManyWithoutGenresInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutGenresInput!]
  create: [MovieCreateWithoutGenresInput!]
}

input MovieCreateNestedManyWithoutInWatchlistByUsersInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutInWatchlistByUsersInput!]
  create: [MovieCreateWithoutInWatchlistByUsersInput!]
}

input MovieCreateNestedManyWithoutKeywordCategoriesInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutKeywordCategoriesInput!]
  create: [MovieCreateWithoutKeywordCategoriesInput!]
}

input MovieCreateNestedManyWithoutMovieListsInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutMovieListsInput!]
  create: [MovieCreateWithoutMovieListsInput!]
}

input MovieCreateNestedManyWithoutSpokenLanguagesInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutSpokenLanguagesInput!]
  create: [MovieCreateWithoutSpokenLanguagesInput!]
}

input MovieCreateNestedManyWithoutStudiosInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutStudiosInput!]
  create: [MovieCreateWithoutStudiosInput!]
}

input MovieCreateNestedOneWithoutMovieInfoInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutMovieInfoInput
  create: MovieCreateWithoutMovieInfoInput
}

input MovieCreateNestedOneWithoutMovieStatsInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutMovieStatsInput
  create: MovieCreateWithoutMovieStatsInput
}

input MovieCreateNestedOneWithoutRatingsInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutRatingsInput
  create: MovieCreateWithoutRatingsInput
}

input MovieCreateOrConnectWithoutCrewMembersInput {
  create: MovieCreateWithoutCrewMembersInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutGenresInput {
  create: MovieCreateWithoutGenresInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutInWatchlistByUsersInput {
  create: MovieCreateWithoutInWatchlistByUsersInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutKeywordCategoriesInput {
  create: MovieCreateWithoutKeywordCategoriesInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutMovieInfoInput {
  create: MovieCreateWithoutMovieInfoInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutMovieListsInput {
  create: MovieCreateWithoutMovieListsInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutMovieStatsInput {
  create: MovieCreateWithoutMovieStatsInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutRatingsInput {
  create: MovieCreateWithoutRatingsInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutSpokenLanguagesInput {
  create: MovieCreateWithoutSpokenLanguagesInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutStudiosInput {
  create: MovieCreateWithoutStudiosInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateWithoutCrewMembersInput {
  MovieStats: MovieStatsCreateNestedOneWithoutMovieInput
  createdAt: DateTimeISO
  genreName: String
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: MovifierAppUserCreateNestedManyWithoutWatchlistInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  ratings: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

input MovieCreateWithoutGenresInput {
  MovieStats: MovieStatsCreateNestedOneWithoutMovieInput
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberCreateNestedManyWithoutMoviesInput
  genreName: String
  id: String
  inWatchlistByUsers: MovifierAppUserCreateNestedManyWithoutWatchlistInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  ratings: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

input MovieCreateWithoutInWatchlistByUsersInput {
  MovieStats: MovieStatsCreateNestedOneWithoutMovieInput
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberCreateNestedManyWithoutMoviesInput
  genreName: String
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  ratings: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

input MovieCreateWithoutKeywordCategoriesInput {
  MovieStats: MovieStatsCreateNestedOneWithoutMovieInput
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberCreateNestedManyWithoutMoviesInput
  genreName: String
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: MovifierAppUserCreateNestedManyWithoutWatchlistInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  ratings: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

input MovieCreateWithoutMovieInfoInput {
  MovieStats: MovieStatsCreateNestedOneWithoutMovieInput
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberCreateNestedManyWithoutMoviesInput
  genreName: String
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: MovifierAppUserCreateNestedManyWithoutWatchlistInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  ratings: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

input MovieCreateWithoutMovieListsInput {
  MovieStats: MovieStatsCreateNestedOneWithoutMovieInput
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberCreateNestedManyWithoutMoviesInput
  genreName: String
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: MovifierAppUserCreateNestedManyWithoutWatchlistInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  ratings: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

input MovieCreateWithoutMovieStatsInput {
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberCreateNestedManyWithoutMoviesInput
  genreName: String
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: MovifierAppUserCreateNestedManyWithoutWatchlistInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  ratings: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

input MovieCreateWithoutRatingsInput {
  MovieStats: MovieStatsCreateNestedOneWithoutMovieInput
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberCreateNestedManyWithoutMoviesInput
  genreName: String
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: MovifierAppUserCreateNestedManyWithoutWatchlistInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

input MovieCreateWithoutSpokenLanguagesInput {
  MovieStats: MovieStatsCreateNestedOneWithoutMovieInput
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberCreateNestedManyWithoutMoviesInput
  genreName: String
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: MovifierAppUserCreateNestedManyWithoutWatchlistInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  ratings: MovieRatingCreateNestedManyWithoutMovieInput
  studios: MovieStudioCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

input MovieCreateWithoutStudiosInput {
  MovieStats: MovieStatsCreateNestedOneWithoutMovieInput
  createdAt: DateTimeISO
  crewMembers: MovieCrewMemberCreateNestedManyWithoutMoviesInput
  genreName: String
  genres: GenreCreateNestedManyWithoutMoviesInput
  id: String
  inWatchlistByUsers: MovifierAppUserCreateNestedManyWithoutWatchlistInput
  keywordCategories: MovieKeywordCategoryCreateNestedManyWithoutMoviesInput
  movieInfo: MovieInfoCreateNestedOneWithoutMovieInput
  movieLists: MovieListCreateNestedManyWithoutMoviesInput
  ratings: MovieRatingCreateNestedManyWithoutMovieInput
  spokenLanguages: MovieSpokenLanguageCreateNestedManyWithoutMoviesInput
  updatedAt: DateTimeISO
}

type MovieCrewMember {
  _count: MovieCrewMemberCount
  createdAt: DateTimeISO!
  id: String!
  movieCrewMemberType(where: MovieCrewMemberTypeWhereInput): MovieCrewMemberType
  movieCrewMemberTypeId: String
  movies(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationInput!], skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
  name: String!
  updatedAt: DateTimeISO!
}

type MovieCrewMemberCount {
  movies(where: MovieWhereInput): Int!
}

type MovieCrewMemberCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  movieCrewMemberTypeId: Int!
  name: Int!
  updatedAt: Int!
}

input MovieCrewMemberCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  movieCrewMemberTypeId: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input MovieCrewMemberCreateInput {
  createdAt: DateTimeISO
  id: String
  movieCrewMemberType: MovieCrewMemberTypeCreateNestedOneWithoutMovieCrewMembersInput
  movies: MovieCreateNestedManyWithoutCrewMembersInput
  name: String!
  updatedAt: DateTimeISO
}

input MovieCrewMemberCreateManyInput {
  createdAt: DateTimeISO
  id: String
  movieCrewMemberTypeId: String
  name: String!
  updatedAt: DateTimeISO
}

input MovieCrewMemberCreateManyMovieCrewMemberTypeInput {
  createdAt: DateTimeISO
  id: String
  name: String!
  updatedAt: DateTimeISO
}

input MovieCrewMemberCreateManyMovieCrewMemberTypeInputEnvelope {
  data: [MovieCrewMemberCreateManyMovieCrewMemberTypeInput!]!
  skipDuplicates: Boolean
}

input MovieCrewMemberCreateNestedManyWithoutMovieCrewMemberTypeInput {
  connect: [MovieCrewMemberWhereUniqueInput!]
  connectOrCreate: [MovieCrewMemberCreateOrConnectWithoutMovieCrewMemberTypeInput!]
  create: [MovieCrewMemberCreateWithoutMovieCrewMemberTypeInput!]
  createMany: MovieCrewMemberCreateManyMovieCrewMemberTypeInputEnvelope
}

input MovieCrewMemberCreateNestedManyWithoutMoviesInput {
  connect: [MovieCrewMemberWhereUniqueInput!]
  connectOrCreate: [MovieCrewMemberCreateOrConnectWithoutMoviesInput!]
  create: [MovieCrewMemberCreateWithoutMoviesInput!]
}

input MovieCrewMemberCreateOrConnectWithoutMovieCrewMemberTypeInput {
  create: MovieCrewMemberCreateWithoutMovieCrewMemberTypeInput!
  where: MovieCrewMemberWhereUniqueInput!
}

input MovieCrewMemberCreateOrConnectWithoutMoviesInput {
  create: MovieCrewMemberCreateWithoutMoviesInput!
  where: MovieCrewMemberWhereUniqueInput!
}

input MovieCrewMemberCreateWithoutMovieCrewMemberTypeInput {
  createdAt: DateTimeISO
  id: String
  movies: MovieCreateNestedManyWithoutCrewMembersInput
  name: String!
  updatedAt: DateTimeISO
}

input MovieCrewMemberCreateWithoutMoviesInput {
  createdAt: DateTimeISO
  id: String
  movieCrewMemberType: MovieCrewMemberTypeCreateNestedOneWithoutMovieCrewMembersInput
  name: String!
  updatedAt: DateTimeISO
}

type MovieCrewMemberGroupBy {
  _count: MovieCrewMemberCountAggregate
  _max: MovieCrewMemberMaxAggregate
  _min: MovieCrewMemberMinAggregate
  createdAt: DateTimeISO!
  id: String!
  movieCrewMemberTypeId: String
  name: String!
  updatedAt: DateTimeISO!
}

input MovieCrewMemberListRelationFilter {
  every: MovieCrewMemberWhereInput
  none: MovieCrewMemberWhereInput
  some: MovieCrewMemberWhereInput
}

type MovieCrewMemberMaxAggregate {
  createdAt: DateTimeISO
  id: String
  movieCrewMemberTypeId: String
  name: String
  updatedAt: DateTimeISO
}

input MovieCrewMemberMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  movieCrewMemberTypeId: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type MovieCrewMemberMinAggregate {
  createdAt: DateTimeISO
  id: String
  movieCrewMemberTypeId: String
  name: String
  updatedAt: DateTimeISO
}

input MovieCrewMemberMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  movieCrewMemberTypeId: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input MovieCrewMemberOrderByRelationAggregateInput {
  _count: SortOrder
}

input MovieCrewMemberOrderByWithAggregationInput {
  _count: MovieCrewMemberCountOrderByAggregateInput
  _max: MovieCrewMemberMaxOrderByAggregateInput
  _min: MovieCrewMemberMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  movieCrewMemberTypeId: SortOrderInput
  name: SortOrder
  updatedAt: SortOrder
}

input MovieCrewMemberOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  movieCrewMemberType: MovieCrewMemberTypeOrderByWithRelationInput
  movieCrewMemberTypeId: SortOrderInput
  movies: MovieOrderByRelationAggregateInput
  name: SortOrder
  updatedAt: SortOrder
}

enum MovieCrewMemberScalarFieldEnum {
  createdAt
  id
  movieCrewMemberTypeId
  name
  updatedAt
}

input MovieCrewMemberScalarWhereInput {
  AND: [MovieCrewMemberScalarWhereInput!]
  NOT: [MovieCrewMemberScalarWhereInput!]
  OR: [MovieCrewMemberScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  movieCrewMemberTypeId: StringNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input MovieCrewMemberScalarWhereWithAggregatesInput {
  AND: [MovieCrewMemberScalarWhereWithAggregatesInput!]
  NOT: [MovieCrewMemberScalarWhereWithAggregatesInput!]
  OR: [MovieCrewMemberScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  movieCrewMemberTypeId: StringNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type MovieCrewMemberType {
  _count: MovieCrewMemberTypeCount
  id: String!
  movieCrewMembers(cursor: MovieCrewMemberWhereUniqueInput, distinct: [MovieCrewMemberScalarFieldEnum!], orderBy: [MovieCrewMemberOrderByWithRelationInput!], skip: Int, take: Int, where: MovieCrewMemberWhereInput): [MovieCrewMember!]!
  name: String!
}

type MovieCrewMemberTypeCount {
  movieCrewMembers(where: MovieCrewMemberWhereInput): Int!
}

type MovieCrewMemberTypeCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
}

input MovieCrewMemberTypeCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input MovieCrewMemberTypeCreateInput {
  id: String
  movieCrewMembers: MovieCrewMemberCreateNestedManyWithoutMovieCrewMemberTypeInput
  name: String!
}

input MovieCrewMemberTypeCreateManyInput {
  id: String
  name: String!
}

input MovieCrewMemberTypeCreateNestedOneWithoutMovieCrewMembersInput {
  connect: MovieCrewMemberTypeWhereUniqueInput
  connectOrCreate: MovieCrewMemberTypeCreateOrConnectWithoutMovieCrewMembersInput
  create: MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput
}

input MovieCrewMemberTypeCreateOrConnectWithoutMovieCrewMembersInput {
  create: MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput!
  where: MovieCrewMemberTypeWhereUniqueInput!
}

input MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput {
  id: String
  name: String!
}

type MovieCrewMemberTypeGroupBy {
  _count: MovieCrewMemberTypeCountAggregate
  _max: MovieCrewMemberTypeMaxAggregate
  _min: MovieCrewMemberTypeMinAggregate
  id: String!
  name: String!
}

type MovieCrewMemberTypeMaxAggregate {
  id: String
  name: String
}

input MovieCrewMemberTypeMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type MovieCrewMemberTypeMinAggregate {
  id: String
  name: String
}

input MovieCrewMemberTypeMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input MovieCrewMemberTypeNullableRelationFilter {
  is: MovieCrewMemberTypeWhereInput
  isNot: MovieCrewMemberTypeWhereInput
}

input MovieCrewMemberTypeOrderByWithAggregationInput {
  _count: MovieCrewMemberTypeCountOrderByAggregateInput
  _max: MovieCrewMemberTypeMaxOrderByAggregateInput
  _min: MovieCrewMemberTypeMinOrderByAggregateInput
  id: SortOrder
  name: SortOrder
}

input MovieCrewMemberTypeOrderByWithRelationInput {
  id: SortOrder
  movieCrewMembers: MovieCrewMemberOrderByRelationAggregateInput
  name: SortOrder
}

enum MovieCrewMemberTypeScalarFieldEnum {
  id
  name
}

input MovieCrewMemberTypeScalarWhereWithAggregatesInput {
  AND: [MovieCrewMemberTypeScalarWhereWithAggregatesInput!]
  NOT: [MovieCrewMemberTypeScalarWhereWithAggregatesInput!]
  OR: [MovieCrewMemberTypeScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input MovieCrewMemberTypeUpdateInput {
  id: StringFieldUpdateOperationsInput
  movieCrewMembers: MovieCrewMemberUpdateManyWithoutMovieCrewMemberTypeNestedInput
  name: StringFieldUpdateOperationsInput
}

input MovieCrewMemberTypeUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input MovieCrewMemberTypeUpdateOneWithoutMovieCrewMembersNestedInput {
  connect: MovieCrewMemberTypeWhereUniqueInput
  connectOrCreate: MovieCrewMemberTypeCreateOrConnectWithoutMovieCrewMembersInput
  create: MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput
  delete: MovieCrewMemberTypeWhereInput
  disconnect: MovieCrewMemberTypeWhereInput
  update: MovieCrewMemberTypeUpdateToOneWithWhereWithoutMovieCrewMembersInput
  upsert: MovieCrewMemberTypeUpsertWithoutMovieCrewMembersInput
}

input MovieCrewMemberTypeUpdateToOneWithWhereWithoutMovieCrewMembersInput {
  data: MovieCrewMemberTypeUpdateWithoutMovieCrewMembersInput!
  where: MovieCrewMemberTypeWhereInput
}

input MovieCrewMemberTypeUpdateWithoutMovieCrewMembersInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input MovieCrewMemberTypeUpsertWithoutMovieCrewMembersInput {
  create: MovieCrewMemberTypeCreateWithoutMovieCrewMembersInput!
  update: MovieCrewMemberTypeUpdateWithoutMovieCrewMembersInput!
  where: MovieCrewMemberTypeWhereInput
}

input MovieCrewMemberTypeWhereInput {
  AND: [MovieCrewMemberTypeWhereInput!]
  NOT: [MovieCrewMemberTypeWhereInput!]
  OR: [MovieCrewMemberTypeWhereInput!]
  id: StringFilter
  movieCrewMembers: MovieCrewMemberListRelationFilter
  name: StringFilter
}

input MovieCrewMemberTypeWhereUniqueInput {
  AND: [MovieCrewMemberTypeWhereInput!]
  NOT: [MovieCrewMemberTypeWhereInput!]
  OR: [MovieCrewMemberTypeWhereInput!]
  id: String
  movieCrewMembers: MovieCrewMemberListRelationFilter
  name: String
}

input MovieCrewMemberUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieCrewMemberType: MovieCrewMemberTypeUpdateOneWithoutMovieCrewMembersNestedInput
  movies: MovieUpdateManyWithoutCrewMembersNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieCrewMemberUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieCrewMemberUpdateManyWithWhereWithoutMovieCrewMemberTypeInput {
  data: MovieCrewMemberUpdateManyMutationInput!
  where: MovieCrewMemberScalarWhereInput!
}

input MovieCrewMemberUpdateManyWithWhereWithoutMoviesInput {
  data: MovieCrewMemberUpdateManyMutationInput!
  where: MovieCrewMemberScalarWhereInput!
}

input MovieCrewMemberUpdateManyWithoutMovieCrewMemberTypeNestedInput {
  connect: [MovieCrewMemberWhereUniqueInput!]
  connectOrCreate: [MovieCrewMemberCreateOrConnectWithoutMovieCrewMemberTypeInput!]
  create: [MovieCrewMemberCreateWithoutMovieCrewMemberTypeInput!]
  createMany: MovieCrewMemberCreateManyMovieCrewMemberTypeInputEnvelope
  delete: [MovieCrewMemberWhereUniqueInput!]
  deleteMany: [MovieCrewMemberScalarWhereInput!]
  disconnect: [MovieCrewMemberWhereUniqueInput!]
  set: [MovieCrewMemberWhereUniqueInput!]
  update: [MovieCrewMemberUpdateWithWhereUniqueWithoutMovieCrewMemberTypeInput!]
  updateMany: [MovieCrewMemberUpdateManyWithWhereWithoutMovieCrewMemberTypeInput!]
  upsert: [MovieCrewMemberUpsertWithWhereUniqueWithoutMovieCrewMemberTypeInput!]
}

input MovieCrewMemberUpdateManyWithoutMoviesNestedInput {
  connect: [MovieCrewMemberWhereUniqueInput!]
  connectOrCreate: [MovieCrewMemberCreateOrConnectWithoutMoviesInput!]
  create: [MovieCrewMemberCreateWithoutMoviesInput!]
  delete: [MovieCrewMemberWhereUniqueInput!]
  deleteMany: [MovieCrewMemberScalarWhereInput!]
  disconnect: [MovieCrewMemberWhereUniqueInput!]
  set: [MovieCrewMemberWhereUniqueInput!]
  update: [MovieCrewMemberUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [MovieCrewMemberUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [MovieCrewMemberUpsertWithWhereUniqueWithoutMoviesInput!]
}

input MovieCrewMemberUpdateWithWhereUniqueWithoutMovieCrewMemberTypeInput {
  data: MovieCrewMemberUpdateWithoutMovieCrewMemberTypeInput!
  where: MovieCrewMemberWhereUniqueInput!
}

input MovieCrewMemberUpdateWithWhereUniqueWithoutMoviesInput {
  data: MovieCrewMemberUpdateWithoutMoviesInput!
  where: MovieCrewMemberWhereUniqueInput!
}

input MovieCrewMemberUpdateWithoutMovieCrewMemberTypeInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movies: MovieUpdateManyWithoutCrewMembersNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieCrewMemberUpdateWithoutMoviesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieCrewMemberType: MovieCrewMemberTypeUpdateOneWithoutMovieCrewMembersNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieCrewMemberUpsertWithWhereUniqueWithoutMovieCrewMemberTypeInput {
  create: MovieCrewMemberCreateWithoutMovieCrewMemberTypeInput!
  update: MovieCrewMemberUpdateWithoutMovieCrewMemberTypeInput!
  where: MovieCrewMemberWhereUniqueInput!
}

input MovieCrewMemberUpsertWithWhereUniqueWithoutMoviesInput {
  create: MovieCrewMemberCreateWithoutMoviesInput!
  update: MovieCrewMemberUpdateWithoutMoviesInput!
  where: MovieCrewMemberWhereUniqueInput!
}

input MovieCrewMemberWhereInput {
  AND: [MovieCrewMemberWhereInput!]
  NOT: [MovieCrewMemberWhereInput!]
  OR: [MovieCrewMemberWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  movieCrewMemberType: MovieCrewMemberTypeNullableRelationFilter
  movieCrewMemberTypeId: StringNullableFilter
  movies: MovieListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input MovieCrewMemberWhereUniqueInput {
  AND: [MovieCrewMemberWhereInput!]
  NOT: [MovieCrewMemberWhereInput!]
  OR: [MovieCrewMemberWhereInput!]
  createdAt: DateTimeFilter
  id: String
  movieCrewMemberType: MovieCrewMemberTypeNullableRelationFilter
  movieCrewMemberTypeId: StringNullableFilter
  movies: MovieListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

type MovieGroupBy {
  _count: MovieCountAggregate
  _max: MovieMaxAggregate
  _min: MovieMinAggregate
  createdAt: DateTimeISO!
  genreName: String
  id: String!
  updatedAt: DateTimeISO!
}

type MovieInfo {
  alternativeTitles: [String!]!
  createdAt: DateTimeISO!
  description: String!
  durationInMinutes: Int!
  id: String!
  imdbId: String!
  movie: Movie!
  movieId: String!
  posterUrl: String!
  title: String!
  updatedAt: DateTimeISO!
}

type MovieInfoAvgAggregate {
  durationInMinutes: Float
}

input MovieInfoAvgOrderByAggregateInput {
  durationInMinutes: SortOrder
}

type MovieInfoCountAggregate {
  _all: Int!
  alternativeTitles: Int!
  createdAt: Int!
  description: Int!
  durationInMinutes: Int!
  id: Int!
  imdbId: Int!
  movieId: Int!
  posterUrl: Int!
  title: Int!
  updatedAt: Int!
}

input MovieInfoCountOrderByAggregateInput {
  alternativeTitles: SortOrder
  createdAt: SortOrder
  description: SortOrder
  durationInMinutes: SortOrder
  id: SortOrder
  imdbId: SortOrder
  movieId: SortOrder
  posterUrl: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input MovieInfoCreateInput {
  alternativeTitles: MovieInfoCreatealternativeTitlesInput
  createdAt: DateTimeISO
  description: String!
  durationInMinutes: Int!
  id: String
  imdbId: String!
  movie: MovieCreateNestedOneWithoutMovieInfoInput!
  posterUrl: String!
  title: String!
  updatedAt: DateTimeISO
}

input MovieInfoCreateManyInput {
  alternativeTitles: MovieInfoCreatealternativeTitlesInput
  createdAt: DateTimeISO
  description: String!
  durationInMinutes: Int!
  id: String
  imdbId: String!
  movieId: String!
  posterUrl: String!
  title: String!
  updatedAt: DateTimeISO
}

input MovieInfoCreateNestedOneWithoutMovieInput {
  connect: MovieInfoWhereUniqueInput
  connectOrCreate: MovieInfoCreateOrConnectWithoutMovieInput
  create: MovieInfoCreateWithoutMovieInput
}

input MovieInfoCreateOrConnectWithoutMovieInput {
  create: MovieInfoCreateWithoutMovieInput!
  where: MovieInfoWhereUniqueInput!
}

input MovieInfoCreateWithoutMovieInput {
  alternativeTitles: MovieInfoCreatealternativeTitlesInput
  createdAt: DateTimeISO
  description: String!
  durationInMinutes: Int!
  id: String
  imdbId: String!
  posterUrl: String!
  title: String!
  updatedAt: DateTimeISO
}

input MovieInfoCreatealternativeTitlesInput {
  set: [String!]!
}

type MovieInfoGroupBy {
  _avg: MovieInfoAvgAggregate
  _count: MovieInfoCountAggregate
  _max: MovieInfoMaxAggregate
  _min: MovieInfoMinAggregate
  _sum: MovieInfoSumAggregate
  alternativeTitles: [String!]
  createdAt: DateTimeISO!
  description: String!
  durationInMinutes: Int!
  id: String!
  imdbId: String!
  movieId: String!
  posterUrl: String!
  title: String!
  updatedAt: DateTimeISO!
}

type MovieInfoMaxAggregate {
  createdAt: DateTimeISO
  description: String
  durationInMinutes: Int
  id: String
  imdbId: String
  movieId: String
  posterUrl: String
  title: String
  updatedAt: DateTimeISO
}

input MovieInfoMaxOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  durationInMinutes: SortOrder
  id: SortOrder
  imdbId: SortOrder
  movieId: SortOrder
  posterUrl: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type MovieInfoMinAggregate {
  createdAt: DateTimeISO
  description: String
  durationInMinutes: Int
  id: String
  imdbId: String
  movieId: String
  posterUrl: String
  title: String
  updatedAt: DateTimeISO
}

input MovieInfoMinOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  durationInMinutes: SortOrder
  id: SortOrder
  imdbId: SortOrder
  movieId: SortOrder
  posterUrl: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input MovieInfoNullableRelationFilter {
  is: MovieInfoWhereInput
  isNot: MovieInfoWhereInput
}

input MovieInfoOrderByWithAggregationInput {
  _avg: MovieInfoAvgOrderByAggregateInput
  _count: MovieInfoCountOrderByAggregateInput
  _max: MovieInfoMaxOrderByAggregateInput
  _min: MovieInfoMinOrderByAggregateInput
  _sum: MovieInfoSumOrderByAggregateInput
  alternativeTitles: SortOrder
  createdAt: SortOrder
  description: SortOrder
  durationInMinutes: SortOrder
  id: SortOrder
  imdbId: SortOrder
  movieId: SortOrder
  posterUrl: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input MovieInfoOrderByWithRelationInput {
  alternativeTitles: SortOrder
  createdAt: SortOrder
  description: SortOrder
  durationInMinutes: SortOrder
  id: SortOrder
  imdbId: SortOrder
  movie: MovieOrderByWithRelationInput
  movieId: SortOrder
  posterUrl: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

enum MovieInfoScalarFieldEnum {
  alternativeTitles
  createdAt
  description
  durationInMinutes
  id
  imdbId
  movieId
  posterUrl
  title
  updatedAt
}

input MovieInfoScalarWhereWithAggregatesInput {
  AND: [MovieInfoScalarWhereWithAggregatesInput!]
  NOT: [MovieInfoScalarWhereWithAggregatesInput!]
  OR: [MovieInfoScalarWhereWithAggregatesInput!]
  alternativeTitles: StringNullableListFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringWithAggregatesFilter
  durationInMinutes: IntWithAggregatesFilter
  id: StringWithAggregatesFilter
  imdbId: StringWithAggregatesFilter
  movieId: StringWithAggregatesFilter
  posterUrl: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type MovieInfoSumAggregate {
  durationInMinutes: Int
}

input MovieInfoSumOrderByAggregateInput {
  durationInMinutes: SortOrder
}

input MovieInfoUpdateInput {
  alternativeTitles: MovieInfoUpdatealternativeTitlesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  durationInMinutes: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imdbId: StringFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutMovieInfoNestedInput
  posterUrl: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieInfoUpdateManyMutationInput {
  alternativeTitles: MovieInfoUpdatealternativeTitlesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  durationInMinutes: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imdbId: StringFieldUpdateOperationsInput
  posterUrl: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieInfoUpdateOneWithoutMovieNestedInput {
  connect: MovieInfoWhereUniqueInput
  connectOrCreate: MovieInfoCreateOrConnectWithoutMovieInput
  create: MovieInfoCreateWithoutMovieInput
  delete: MovieInfoWhereInput
  disconnect: MovieInfoWhereInput
  update: MovieInfoUpdateToOneWithWhereWithoutMovieInput
  upsert: MovieInfoUpsertWithoutMovieInput
}

input MovieInfoUpdateToOneWithWhereWithoutMovieInput {
  data: MovieInfoUpdateWithoutMovieInput!
  where: MovieInfoWhereInput
}

input MovieInfoUpdateWithoutMovieInput {
  alternativeTitles: MovieInfoUpdatealternativeTitlesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  durationInMinutes: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imdbId: StringFieldUpdateOperationsInput
  posterUrl: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieInfoUpdatealternativeTitlesInput {
  push: [String!]
  set: [String!]
}

input MovieInfoUpsertWithoutMovieInput {
  create: MovieInfoCreateWithoutMovieInput!
  update: MovieInfoUpdateWithoutMovieInput!
  where: MovieInfoWhereInput
}

input MovieInfoWhereInput {
  AND: [MovieInfoWhereInput!]
  NOT: [MovieInfoWhereInput!]
  OR: [MovieInfoWhereInput!]
  alternativeTitles: StringNullableListFilter
  createdAt: DateTimeFilter
  description: StringFilter
  durationInMinutes: IntFilter
  id: StringFilter
  imdbId: StringFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  posterUrl: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input MovieInfoWhereUniqueInput {
  AND: [MovieInfoWhereInput!]
  NOT: [MovieInfoWhereInput!]
  OR: [MovieInfoWhereInput!]
  alternativeTitles: StringNullableListFilter
  createdAt: DateTimeFilter
  description: StringFilter
  durationInMinutes: IntFilter
  id: String
  imdbId: String
  movie: MovieRelationFilter
  movieId: String
  posterUrl: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

type MovieKeywordCategory {
  _count: MovieKeywordCategoryCount
  id: String!
  movies(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationInput!], skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
  name: String!
}

type MovieKeywordCategoryCount {
  movies(where: MovieWhereInput): Int!
}

type MovieKeywordCategoryCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
}

input MovieKeywordCategoryCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input MovieKeywordCategoryCreateInput {
  id: String
  movies: MovieCreateNestedManyWithoutKeywordCategoriesInput
  name: String!
}

input MovieKeywordCategoryCreateManyInput {
  id: String
  name: String!
}

input MovieKeywordCategoryCreateNestedManyWithoutMoviesInput {
  connect: [MovieKeywordCategoryWhereUniqueInput!]
  connectOrCreate: [MovieKeywordCategoryCreateOrConnectWithoutMoviesInput!]
  create: [MovieKeywordCategoryCreateWithoutMoviesInput!]
}

input MovieKeywordCategoryCreateOrConnectWithoutMoviesInput {
  create: MovieKeywordCategoryCreateWithoutMoviesInput!
  where: MovieKeywordCategoryWhereUniqueInput!
}

input MovieKeywordCategoryCreateWithoutMoviesInput {
  id: String
  name: String!
}

type MovieKeywordCategoryGroupBy {
  _count: MovieKeywordCategoryCountAggregate
  _max: MovieKeywordCategoryMaxAggregate
  _min: MovieKeywordCategoryMinAggregate
  id: String!
  name: String!
}

input MovieKeywordCategoryListRelationFilter {
  every: MovieKeywordCategoryWhereInput
  none: MovieKeywordCategoryWhereInput
  some: MovieKeywordCategoryWhereInput
}

type MovieKeywordCategoryMaxAggregate {
  id: String
  name: String
}

input MovieKeywordCategoryMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type MovieKeywordCategoryMinAggregate {
  id: String
  name: String
}

input MovieKeywordCategoryMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input MovieKeywordCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input MovieKeywordCategoryOrderByWithAggregationInput {
  _count: MovieKeywordCategoryCountOrderByAggregateInput
  _max: MovieKeywordCategoryMaxOrderByAggregateInput
  _min: MovieKeywordCategoryMinOrderByAggregateInput
  id: SortOrder
  name: SortOrder
}

input MovieKeywordCategoryOrderByWithRelationInput {
  id: SortOrder
  movies: MovieOrderByRelationAggregateInput
  name: SortOrder
}

enum MovieKeywordCategoryScalarFieldEnum {
  id
  name
}

input MovieKeywordCategoryScalarWhereInput {
  AND: [MovieKeywordCategoryScalarWhereInput!]
  NOT: [MovieKeywordCategoryScalarWhereInput!]
  OR: [MovieKeywordCategoryScalarWhereInput!]
  id: StringFilter
  name: StringFilter
}

input MovieKeywordCategoryScalarWhereWithAggregatesInput {
  AND: [MovieKeywordCategoryScalarWhereWithAggregatesInput!]
  NOT: [MovieKeywordCategoryScalarWhereWithAggregatesInput!]
  OR: [MovieKeywordCategoryScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input MovieKeywordCategoryUpdateInput {
  id: StringFieldUpdateOperationsInput
  movies: MovieUpdateManyWithoutKeywordCategoriesNestedInput
  name: StringFieldUpdateOperationsInput
}

input MovieKeywordCategoryUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input MovieKeywordCategoryUpdateManyWithWhereWithoutMoviesInput {
  data: MovieKeywordCategoryUpdateManyMutationInput!
  where: MovieKeywordCategoryScalarWhereInput!
}

input MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput {
  connect: [MovieKeywordCategoryWhereUniqueInput!]
  connectOrCreate: [MovieKeywordCategoryCreateOrConnectWithoutMoviesInput!]
  create: [MovieKeywordCategoryCreateWithoutMoviesInput!]
  delete: [MovieKeywordCategoryWhereUniqueInput!]
  deleteMany: [MovieKeywordCategoryScalarWhereInput!]
  disconnect: [MovieKeywordCategoryWhereUniqueInput!]
  set: [MovieKeywordCategoryWhereUniqueInput!]
  update: [MovieKeywordCategoryUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [MovieKeywordCategoryUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [MovieKeywordCategoryUpsertWithWhereUniqueWithoutMoviesInput!]
}

input MovieKeywordCategoryUpdateWithWhereUniqueWithoutMoviesInput {
  data: MovieKeywordCategoryUpdateWithoutMoviesInput!
  where: MovieKeywordCategoryWhereUniqueInput!
}

input MovieKeywordCategoryUpdateWithoutMoviesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input MovieKeywordCategoryUpsertWithWhereUniqueWithoutMoviesInput {
  create: MovieKeywordCategoryCreateWithoutMoviesInput!
  update: MovieKeywordCategoryUpdateWithoutMoviesInput!
  where: MovieKeywordCategoryWhereUniqueInput!
}

input MovieKeywordCategoryWhereInput {
  AND: [MovieKeywordCategoryWhereInput!]
  NOT: [MovieKeywordCategoryWhereInput!]
  OR: [MovieKeywordCategoryWhereInput!]
  id: StringFilter
  movies: MovieListRelationFilter
  name: StringFilter
}

input MovieKeywordCategoryWhereUniqueInput {
  AND: [MovieKeywordCategoryWhereInput!]
  NOT: [MovieKeywordCategoryWhereInput!]
  OR: [MovieKeywordCategoryWhereInput!]
  id: String
  movies: MovieListRelationFilter
  name: StringFilter
}

type MovieList {
  MovieListStats(where: MovieListStatsWhereInput): MovieListStats
  _count: MovieListCount
  createdAt: DateTimeISO!
  id: String!
  movieListAuthor: MovifierAppUser!
  movieListComments(cursor: MovieListCommentWhereUniqueInput, distinct: [MovieListCommentScalarFieldEnum!], orderBy: [MovieListCommentOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListCommentWhereInput): [MovieListComment!]!
  movies(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationInput!], skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
  name: String!
  updatedAt: DateTimeISO!
  userId: String!
}

type MovieListComment {
  content: String!
  createdAt: DateTimeISO!
  id: String!
  movieList: MovieList!
  movieListId: String!
  updatedAt: DateTimeISO!
  user: MovifierAppUser!
  userId: String!
}

type MovieListCommentCountAggregate {
  _all: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  movieListId: Int!
  updatedAt: Int!
  userId: Int!
}

input MovieListCommentCountOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  movieListId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieListCommentCreateInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  movieList: MovieListCreateNestedOneWithoutMovieListCommentsInput!
  updatedAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutMovieListsCommentsInput!
}

input MovieListCommentCreateManyInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  movieListId: String!
  updatedAt: DateTimeISO
  userId: String!
}

input MovieListCommentCreateManyMovieListInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
  userId: String!
}

input MovieListCommentCreateManyMovieListInputEnvelope {
  data: [MovieListCommentCreateManyMovieListInput!]!
  skipDuplicates: Boolean
}

input MovieListCommentCreateManyUserInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  movieListId: String!
  updatedAt: DateTimeISO
}

input MovieListCommentCreateManyUserInputEnvelope {
  data: [MovieListCommentCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MovieListCommentCreateNestedManyWithoutMovieListInput {
  connect: [MovieListCommentWhereUniqueInput!]
  connectOrCreate: [MovieListCommentCreateOrConnectWithoutMovieListInput!]
  create: [MovieListCommentCreateWithoutMovieListInput!]
  createMany: MovieListCommentCreateManyMovieListInputEnvelope
}

input MovieListCommentCreateNestedManyWithoutUserInput {
  connect: [MovieListCommentWhereUniqueInput!]
  connectOrCreate: [MovieListCommentCreateOrConnectWithoutUserInput!]
  create: [MovieListCommentCreateWithoutUserInput!]
  createMany: MovieListCommentCreateManyUserInputEnvelope
}

input MovieListCommentCreateOrConnectWithoutMovieListInput {
  create: MovieListCommentCreateWithoutMovieListInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentCreateOrConnectWithoutUserInput {
  create: MovieListCommentCreateWithoutUserInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentCreateWithoutMovieListInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutMovieListsCommentsInput!
}

input MovieListCommentCreateWithoutUserInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  movieList: MovieListCreateNestedOneWithoutMovieListCommentsInput!
  updatedAt: DateTimeISO
}

type MovieListCommentGroupBy {
  _count: MovieListCommentCountAggregate
  _max: MovieListCommentMaxAggregate
  _min: MovieListCommentMinAggregate
  content: String!
  createdAt: DateTimeISO!
  id: String!
  movieListId: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input MovieListCommentListRelationFilter {
  every: MovieListCommentWhereInput
  none: MovieListCommentWhereInput
  some: MovieListCommentWhereInput
}

type MovieListCommentMaxAggregate {
  content: String
  createdAt: DateTimeISO
  id: String
  movieListId: String
  updatedAt: DateTimeISO
  userId: String
}

input MovieListCommentMaxOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  movieListId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type MovieListCommentMinAggregate {
  content: String
  createdAt: DateTimeISO
  id: String
  movieListId: String
  updatedAt: DateTimeISO
  userId: String
}

input MovieListCommentMinOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  movieListId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieListCommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input MovieListCommentOrderByWithAggregationInput {
  _count: MovieListCommentCountOrderByAggregateInput
  _max: MovieListCommentMaxOrderByAggregateInput
  _min: MovieListCommentMinOrderByAggregateInput
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  movieListId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieListCommentOrderByWithRelationInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  movieList: MovieListOrderByWithRelationInput
  movieListId: SortOrder
  updatedAt: SortOrder
  user: MovifierAppUserOrderByWithRelationInput
  userId: SortOrder
}

enum MovieListCommentScalarFieldEnum {
  content
  createdAt
  id
  movieListId
  updatedAt
  userId
}

input MovieListCommentScalarWhereInput {
  AND: [MovieListCommentScalarWhereInput!]
  NOT: [MovieListCommentScalarWhereInput!]
  OR: [MovieListCommentScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  movieListId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MovieListCommentScalarWhereWithAggregatesInput {
  AND: [MovieListCommentScalarWhereWithAggregatesInput!]
  NOT: [MovieListCommentScalarWhereWithAggregatesInput!]
  OR: [MovieListCommentScalarWhereWithAggregatesInput!]
  content: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  movieListId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input MovieListCommentUpdateInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieList: MovieListUpdateOneRequiredWithoutMovieListCommentsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutMovieListsCommentsNestedInput
}

input MovieListCommentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListCommentUpdateManyWithWhereWithoutMovieListInput {
  data: MovieListCommentUpdateManyMutationInput!
  where: MovieListCommentScalarWhereInput!
}

input MovieListCommentUpdateManyWithWhereWithoutUserInput {
  data: MovieListCommentUpdateManyMutationInput!
  where: MovieListCommentScalarWhereInput!
}

input MovieListCommentUpdateManyWithoutMovieListNestedInput {
  connect: [MovieListCommentWhereUniqueInput!]
  connectOrCreate: [MovieListCommentCreateOrConnectWithoutMovieListInput!]
  create: [MovieListCommentCreateWithoutMovieListInput!]
  createMany: MovieListCommentCreateManyMovieListInputEnvelope
  delete: [MovieListCommentWhereUniqueInput!]
  deleteMany: [MovieListCommentScalarWhereInput!]
  disconnect: [MovieListCommentWhereUniqueInput!]
  set: [MovieListCommentWhereUniqueInput!]
  update: [MovieListCommentUpdateWithWhereUniqueWithoutMovieListInput!]
  updateMany: [MovieListCommentUpdateManyWithWhereWithoutMovieListInput!]
  upsert: [MovieListCommentUpsertWithWhereUniqueWithoutMovieListInput!]
}

input MovieListCommentUpdateManyWithoutUserNestedInput {
  connect: [MovieListCommentWhereUniqueInput!]
  connectOrCreate: [MovieListCommentCreateOrConnectWithoutUserInput!]
  create: [MovieListCommentCreateWithoutUserInput!]
  createMany: MovieListCommentCreateManyUserInputEnvelope
  delete: [MovieListCommentWhereUniqueInput!]
  deleteMany: [MovieListCommentScalarWhereInput!]
  disconnect: [MovieListCommentWhereUniqueInput!]
  set: [MovieListCommentWhereUniqueInput!]
  update: [MovieListCommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MovieListCommentUpdateManyWithWhereWithoutUserInput!]
  upsert: [MovieListCommentUpsertWithWhereUniqueWithoutUserInput!]
}

input MovieListCommentUpdateWithWhereUniqueWithoutMovieListInput {
  data: MovieListCommentUpdateWithoutMovieListInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentUpdateWithWhereUniqueWithoutUserInput {
  data: MovieListCommentUpdateWithoutUserInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentUpdateWithoutMovieListInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutMovieListsCommentsNestedInput
}

input MovieListCommentUpdateWithoutUserInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieList: MovieListUpdateOneRequiredWithoutMovieListCommentsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListCommentUpsertWithWhereUniqueWithoutMovieListInput {
  create: MovieListCommentCreateWithoutMovieListInput!
  update: MovieListCommentUpdateWithoutMovieListInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentUpsertWithWhereUniqueWithoutUserInput {
  create: MovieListCommentCreateWithoutUserInput!
  update: MovieListCommentUpdateWithoutUserInput!
  where: MovieListCommentWhereUniqueInput!
}

input MovieListCommentWhereInput {
  AND: [MovieListCommentWhereInput!]
  NOT: [MovieListCommentWhereInput!]
  OR: [MovieListCommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  movieList: MovieListRelationFilter
  movieListId: StringFilter
  updatedAt: DateTimeFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

input MovieListCommentWhereUniqueInput {
  AND: [MovieListCommentWhereInput!]
  NOT: [MovieListCommentWhereInput!]
  OR: [MovieListCommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: String
  movieList: MovieListRelationFilter
  movieListId: StringFilter
  updatedAt: DateTimeFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

type MovieListCount {
  movieListComments(where: MovieListCommentWhereInput): Int!
  movies(where: MovieWhereInput): Int!
}

type MovieListCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
  userId: Int!
}

input MovieListCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieListCreateInput {
  MovieListStats: MovieListStatsCreateNestedOneWithoutMovieListInput
  createdAt: DateTimeISO
  id: String
  movieListAuthor: MovifierAppUserCreateNestedOneWithoutMovieListsInput!
  movieListComments: MovieListCommentCreateNestedManyWithoutMovieListInput
  movies: MovieCreateNestedManyWithoutMovieListsInput
  name: String!
  updatedAt: DateTimeISO
}

input MovieListCreateManyInput {
  createdAt: DateTimeISO
  id: String
  name: String!
  updatedAt: DateTimeISO
  userId: String!
}

input MovieListCreateManyMovieListAuthorInput {
  createdAt: DateTimeISO
  id: String
  name: String!
  updatedAt: DateTimeISO
}

input MovieListCreateManyMovieListAuthorInputEnvelope {
  data: [MovieListCreateManyMovieListAuthorInput!]!
  skipDuplicates: Boolean
}

input MovieListCreateNestedManyWithoutMovieListAuthorInput {
  connect: [MovieListWhereUniqueInput!]
  connectOrCreate: [MovieListCreateOrConnectWithoutMovieListAuthorInput!]
  create: [MovieListCreateWithoutMovieListAuthorInput!]
  createMany: MovieListCreateManyMovieListAuthorInputEnvelope
}

input MovieListCreateNestedManyWithoutMoviesInput {
  connect: [MovieListWhereUniqueInput!]
  connectOrCreate: [MovieListCreateOrConnectWithoutMoviesInput!]
  create: [MovieListCreateWithoutMoviesInput!]
}

input MovieListCreateNestedOneWithoutMovieListCommentsInput {
  connect: MovieListWhereUniqueInput
  connectOrCreate: MovieListCreateOrConnectWithoutMovieListCommentsInput
  create: MovieListCreateWithoutMovieListCommentsInput
}

input MovieListCreateNestedOneWithoutMovieListStatsInput {
  connect: MovieListWhereUniqueInput
  connectOrCreate: MovieListCreateOrConnectWithoutMovieListStatsInput
  create: MovieListCreateWithoutMovieListStatsInput
}

input MovieListCreateOrConnectWithoutMovieListAuthorInput {
  create: MovieListCreateWithoutMovieListAuthorInput!
  where: MovieListWhereUniqueInput!
}

input MovieListCreateOrConnectWithoutMovieListCommentsInput {
  create: MovieListCreateWithoutMovieListCommentsInput!
  where: MovieListWhereUniqueInput!
}

input MovieListCreateOrConnectWithoutMovieListStatsInput {
  create: MovieListCreateWithoutMovieListStatsInput!
  where: MovieListWhereUniqueInput!
}

input MovieListCreateOrConnectWithoutMoviesInput {
  create: MovieListCreateWithoutMoviesInput!
  where: MovieListWhereUniqueInput!
}

input MovieListCreateWithoutMovieListAuthorInput {
  MovieListStats: MovieListStatsCreateNestedOneWithoutMovieListInput
  createdAt: DateTimeISO
  id: String
  movieListComments: MovieListCommentCreateNestedManyWithoutMovieListInput
  movies: MovieCreateNestedManyWithoutMovieListsInput
  name: String!
  updatedAt: DateTimeISO
}

input MovieListCreateWithoutMovieListCommentsInput {
  MovieListStats: MovieListStatsCreateNestedOneWithoutMovieListInput
  createdAt: DateTimeISO
  id: String
  movieListAuthor: MovifierAppUserCreateNestedOneWithoutMovieListsInput!
  movies: MovieCreateNestedManyWithoutMovieListsInput
  name: String!
  updatedAt: DateTimeISO
}

input MovieListCreateWithoutMovieListStatsInput {
  createdAt: DateTimeISO
  id: String
  movieListAuthor: MovifierAppUserCreateNestedOneWithoutMovieListsInput!
  movieListComments: MovieListCommentCreateNestedManyWithoutMovieListInput
  movies: MovieCreateNestedManyWithoutMovieListsInput
  name: String!
  updatedAt: DateTimeISO
}

input MovieListCreateWithoutMoviesInput {
  MovieListStats: MovieListStatsCreateNestedOneWithoutMovieListInput
  createdAt: DateTimeISO
  id: String
  movieListAuthor: MovifierAppUserCreateNestedOneWithoutMovieListsInput!
  movieListComments: MovieListCommentCreateNestedManyWithoutMovieListInput
  name: String!
  updatedAt: DateTimeISO
}

type MovieListGroupBy {
  _count: MovieListCountAggregate
  _max: MovieListMaxAggregate
  _min: MovieListMinAggregate
  createdAt: DateTimeISO!
  id: String!
  name: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input MovieListListRelationFilter {
  every: MovieListWhereInput
  none: MovieListWhereInput
  some: MovieListWhereInput
}

type MovieListMaxAggregate {
  createdAt: DateTimeISO
  id: String
  name: String
  updatedAt: DateTimeISO
  userId: String
}

input MovieListMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type MovieListMinAggregate {
  createdAt: DateTimeISO
  id: String
  name: String
  updatedAt: DateTimeISO
  userId: String
}

input MovieListMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieListOrderByRelationAggregateInput {
  _count: SortOrder
}

input MovieListOrderByWithAggregationInput {
  _count: MovieListCountOrderByAggregateInput
  _max: MovieListMaxOrderByAggregateInput
  _min: MovieListMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieListOrderByWithRelationInput {
  MovieListStats: MovieListStatsOrderByWithRelationInput
  createdAt: SortOrder
  id: SortOrder
  movieListAuthor: MovifierAppUserOrderByWithRelationInput
  movieListComments: MovieListCommentOrderByRelationAggregateInput
  movies: MovieOrderByRelationAggregateInput
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieListRelationFilter {
  is: MovieListWhereInput
  isNot: MovieListWhereInput
}

enum MovieListScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
  userId
}

input MovieListScalarWhereInput {
  AND: [MovieListScalarWhereInput!]
  NOT: [MovieListScalarWhereInput!]
  OR: [MovieListScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MovieListScalarWhereWithAggregatesInput {
  AND: [MovieListScalarWhereWithAggregatesInput!]
  NOT: [MovieListScalarWhereWithAggregatesInput!]
  OR: [MovieListScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type MovieListStats {
  MovieList: MovieList!
  createdAt: DateTimeISO!
  id: String!
  likes: Int!
  movieListId: String!
  updatedAt: DateTimeISO!
  views: Int!
}

type MovieListStatsAvgAggregate {
  likes: Float
  views: Float
}

input MovieListStatsAvgOrderByAggregateInput {
  likes: SortOrder
  views: SortOrder
}

type MovieListStatsCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  likes: Int!
  movieListId: Int!
  updatedAt: Int!
  views: Int!
}

input MovieListStatsCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  likes: SortOrder
  movieListId: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

input MovieListStatsCreateInput {
  MovieList: MovieListCreateNestedOneWithoutMovieListStatsInput!
  createdAt: DateTimeISO
  id: String
  likes: Int!
  updatedAt: DateTimeISO
  views: Int!
}

input MovieListStatsCreateManyInput {
  createdAt: DateTimeISO
  id: String
  likes: Int!
  movieListId: String!
  updatedAt: DateTimeISO
  views: Int!
}

input MovieListStatsCreateNestedOneWithoutMovieListInput {
  connect: MovieListStatsWhereUniqueInput
  connectOrCreate: MovieListStatsCreateOrConnectWithoutMovieListInput
  create: MovieListStatsCreateWithoutMovieListInput
}

input MovieListStatsCreateOrConnectWithoutMovieListInput {
  create: MovieListStatsCreateWithoutMovieListInput!
  where: MovieListStatsWhereUniqueInput!
}

input MovieListStatsCreateWithoutMovieListInput {
  createdAt: DateTimeISO
  id: String
  likes: Int!
  updatedAt: DateTimeISO
  views: Int!
}

type MovieListStatsGroupBy {
  _avg: MovieListStatsAvgAggregate
  _count: MovieListStatsCountAggregate
  _max: MovieListStatsMaxAggregate
  _min: MovieListStatsMinAggregate
  _sum: MovieListStatsSumAggregate
  createdAt: DateTimeISO!
  id: String!
  likes: Int!
  movieListId: String!
  updatedAt: DateTimeISO!
  views: Int!
}

type MovieListStatsMaxAggregate {
  createdAt: DateTimeISO
  id: String
  likes: Int
  movieListId: String
  updatedAt: DateTimeISO
  views: Int
}

input MovieListStatsMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  likes: SortOrder
  movieListId: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

type MovieListStatsMinAggregate {
  createdAt: DateTimeISO
  id: String
  likes: Int
  movieListId: String
  updatedAt: DateTimeISO
  views: Int
}

input MovieListStatsMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  likes: SortOrder
  movieListId: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

input MovieListStatsNullableRelationFilter {
  is: MovieListStatsWhereInput
  isNot: MovieListStatsWhereInput
}

input MovieListStatsOrderByWithAggregationInput {
  _avg: MovieListStatsAvgOrderByAggregateInput
  _count: MovieListStatsCountOrderByAggregateInput
  _max: MovieListStatsMaxOrderByAggregateInput
  _min: MovieListStatsMinOrderByAggregateInput
  _sum: MovieListStatsSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  likes: SortOrder
  movieListId: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

input MovieListStatsOrderByWithRelationInput {
  MovieList: MovieListOrderByWithRelationInput
  createdAt: SortOrder
  id: SortOrder
  likes: SortOrder
  movieListId: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

enum MovieListStatsScalarFieldEnum {
  createdAt
  id
  likes
  movieListId
  updatedAt
  views
}

input MovieListStatsScalarWhereWithAggregatesInput {
  AND: [MovieListStatsScalarWhereWithAggregatesInput!]
  NOT: [MovieListStatsScalarWhereWithAggregatesInput!]
  OR: [MovieListStatsScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  likes: IntWithAggregatesFilter
  movieListId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  views: IntWithAggregatesFilter
}

type MovieListStatsSumAggregate {
  likes: Int
  views: Int
}

input MovieListStatsSumOrderByAggregateInput {
  likes: SortOrder
  views: SortOrder
}

input MovieListStatsUpdateInput {
  MovieList: MovieListUpdateOneRequiredWithoutMovieListStatsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input MovieListStatsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input MovieListStatsUpdateOneWithoutMovieListNestedInput {
  connect: MovieListStatsWhereUniqueInput
  connectOrCreate: MovieListStatsCreateOrConnectWithoutMovieListInput
  create: MovieListStatsCreateWithoutMovieListInput
  delete: MovieListStatsWhereInput
  disconnect: MovieListStatsWhereInput
  update: MovieListStatsUpdateToOneWithWhereWithoutMovieListInput
  upsert: MovieListStatsUpsertWithoutMovieListInput
}

input MovieListStatsUpdateToOneWithWhereWithoutMovieListInput {
  data: MovieListStatsUpdateWithoutMovieListInput!
  where: MovieListStatsWhereInput
}

input MovieListStatsUpdateWithoutMovieListInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input MovieListStatsUpsertWithoutMovieListInput {
  create: MovieListStatsCreateWithoutMovieListInput!
  update: MovieListStatsUpdateWithoutMovieListInput!
  where: MovieListStatsWhereInput
}

input MovieListStatsWhereInput {
  AND: [MovieListStatsWhereInput!]
  MovieList: MovieListRelationFilter
  NOT: [MovieListStatsWhereInput!]
  OR: [MovieListStatsWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  likes: IntFilter
  movieListId: StringFilter
  updatedAt: DateTimeFilter
  views: IntFilter
}

input MovieListStatsWhereUniqueInput {
  AND: [MovieListStatsWhereInput!]
  MovieList: MovieListRelationFilter
  NOT: [MovieListStatsWhereInput!]
  OR: [MovieListStatsWhereInput!]
  createdAt: DateTimeFilter
  id: String
  likes: IntFilter
  movieListId: String
  updatedAt: DateTimeFilter
  views: IntFilter
}

input MovieListUpdateInput {
  MovieListStats: MovieListStatsUpdateOneWithoutMovieListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieListAuthor: MovifierAppUserUpdateOneRequiredWithoutMovieListsNestedInput
  movieListComments: MovieListCommentUpdateManyWithoutMovieListNestedInput
  movies: MovieUpdateManyWithoutMovieListsNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpdateManyWithWhereWithoutMovieListAuthorInput {
  data: MovieListUpdateManyMutationInput!
  where: MovieListScalarWhereInput!
}

input MovieListUpdateManyWithWhereWithoutMoviesInput {
  data: MovieListUpdateManyMutationInput!
  where: MovieListScalarWhereInput!
}

input MovieListUpdateManyWithoutMovieListAuthorNestedInput {
  connect: [MovieListWhereUniqueInput!]
  connectOrCreate: [MovieListCreateOrConnectWithoutMovieListAuthorInput!]
  create: [MovieListCreateWithoutMovieListAuthorInput!]
  createMany: MovieListCreateManyMovieListAuthorInputEnvelope
  delete: [MovieListWhereUniqueInput!]
  deleteMany: [MovieListScalarWhereInput!]
  disconnect: [MovieListWhereUniqueInput!]
  set: [MovieListWhereUniqueInput!]
  update: [MovieListUpdateWithWhereUniqueWithoutMovieListAuthorInput!]
  updateMany: [MovieListUpdateManyWithWhereWithoutMovieListAuthorInput!]
  upsert: [MovieListUpsertWithWhereUniqueWithoutMovieListAuthorInput!]
}

input MovieListUpdateManyWithoutMoviesNestedInput {
  connect: [MovieListWhereUniqueInput!]
  connectOrCreate: [MovieListCreateOrConnectWithoutMoviesInput!]
  create: [MovieListCreateWithoutMoviesInput!]
  delete: [MovieListWhereUniqueInput!]
  deleteMany: [MovieListScalarWhereInput!]
  disconnect: [MovieListWhereUniqueInput!]
  set: [MovieListWhereUniqueInput!]
  update: [MovieListUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [MovieListUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [MovieListUpsertWithWhereUniqueWithoutMoviesInput!]
}

input MovieListUpdateOneRequiredWithoutMovieListCommentsNestedInput {
  connect: MovieListWhereUniqueInput
  connectOrCreate: MovieListCreateOrConnectWithoutMovieListCommentsInput
  create: MovieListCreateWithoutMovieListCommentsInput
  update: MovieListUpdateToOneWithWhereWithoutMovieListCommentsInput
  upsert: MovieListUpsertWithoutMovieListCommentsInput
}

input MovieListUpdateOneRequiredWithoutMovieListStatsNestedInput {
  connect: MovieListWhereUniqueInput
  connectOrCreate: MovieListCreateOrConnectWithoutMovieListStatsInput
  create: MovieListCreateWithoutMovieListStatsInput
  update: MovieListUpdateToOneWithWhereWithoutMovieListStatsInput
  upsert: MovieListUpsertWithoutMovieListStatsInput
}

input MovieListUpdateToOneWithWhereWithoutMovieListCommentsInput {
  data: MovieListUpdateWithoutMovieListCommentsInput!
  where: MovieListWhereInput
}

input MovieListUpdateToOneWithWhereWithoutMovieListStatsInput {
  data: MovieListUpdateWithoutMovieListStatsInput!
  where: MovieListWhereInput
}

input MovieListUpdateWithWhereUniqueWithoutMovieListAuthorInput {
  data: MovieListUpdateWithoutMovieListAuthorInput!
  where: MovieListWhereUniqueInput!
}

input MovieListUpdateWithWhereUniqueWithoutMoviesInput {
  data: MovieListUpdateWithoutMoviesInput!
  where: MovieListWhereUniqueInput!
}

input MovieListUpdateWithoutMovieListAuthorInput {
  MovieListStats: MovieListStatsUpdateOneWithoutMovieListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieListComments: MovieListCommentUpdateManyWithoutMovieListNestedInput
  movies: MovieUpdateManyWithoutMovieListsNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpdateWithoutMovieListCommentsInput {
  MovieListStats: MovieListStatsUpdateOneWithoutMovieListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieListAuthor: MovifierAppUserUpdateOneRequiredWithoutMovieListsNestedInput
  movies: MovieUpdateManyWithoutMovieListsNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpdateWithoutMovieListStatsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieListAuthor: MovifierAppUserUpdateOneRequiredWithoutMovieListsNestedInput
  movieListComments: MovieListCommentUpdateManyWithoutMovieListNestedInput
  movies: MovieUpdateManyWithoutMovieListsNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpdateWithoutMoviesInput {
  MovieListStats: MovieListStatsUpdateOneWithoutMovieListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieListAuthor: MovifierAppUserUpdateOneRequiredWithoutMovieListsNestedInput
  movieListComments: MovieListCommentUpdateManyWithoutMovieListNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieListUpsertWithWhereUniqueWithoutMovieListAuthorInput {
  create: MovieListCreateWithoutMovieListAuthorInput!
  update: MovieListUpdateWithoutMovieListAuthorInput!
  where: MovieListWhereUniqueInput!
}

input MovieListUpsertWithWhereUniqueWithoutMoviesInput {
  create: MovieListCreateWithoutMoviesInput!
  update: MovieListUpdateWithoutMoviesInput!
  where: MovieListWhereUniqueInput!
}

input MovieListUpsertWithoutMovieListCommentsInput {
  create: MovieListCreateWithoutMovieListCommentsInput!
  update: MovieListUpdateWithoutMovieListCommentsInput!
  where: MovieListWhereInput
}

input MovieListUpsertWithoutMovieListStatsInput {
  create: MovieListCreateWithoutMovieListStatsInput!
  update: MovieListUpdateWithoutMovieListStatsInput!
  where: MovieListWhereInput
}

input MovieListWhereInput {
  AND: [MovieListWhereInput!]
  MovieListStats: MovieListStatsNullableRelationFilter
  NOT: [MovieListWhereInput!]
  OR: [MovieListWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  movieListAuthor: MovifierAppUserRelationFilter
  movieListComments: MovieListCommentListRelationFilter
  movies: MovieListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MovieListWhereUniqueInput {
  AND: [MovieListWhereInput!]
  MovieListStats: MovieListStatsNullableRelationFilter
  NOT: [MovieListWhereInput!]
  OR: [MovieListWhereInput!]
  createdAt: DateTimeFilter
  id: String
  movieListAuthor: MovifierAppUserRelationFilter
  movieListComments: MovieListCommentListRelationFilter
  movies: MovieListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

type MovieMaxAggregate {
  createdAt: DateTimeISO
  genreName: String
  id: String
  updatedAt: DateTimeISO
}

input MovieMaxOrderByAggregateInput {
  createdAt: SortOrder
  genreName: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type MovieMinAggregate {
  createdAt: DateTimeISO
  genreName: String
  id: String
  updatedAt: DateTimeISO
}

input MovieMinOrderByAggregateInput {
  createdAt: SortOrder
  genreName: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input MovieOrderByRelationAggregateInput {
  _count: SortOrder
}

input MovieOrderByWithAggregationInput {
  _count: MovieCountOrderByAggregateInput
  _max: MovieMaxOrderByAggregateInput
  _min: MovieMinOrderByAggregateInput
  createdAt: SortOrder
  genreName: SortOrderInput
  id: SortOrder
  updatedAt: SortOrder
}

input MovieOrderByWithRelationInput {
  MovieStats: MovieStatsOrderByWithRelationInput
  createdAt: SortOrder
  crewMembers: MovieCrewMemberOrderByRelationAggregateInput
  genreName: SortOrderInput
  genres: GenreOrderByRelationAggregateInput
  id: SortOrder
  inWatchlistByUsers: MovifierAppUserOrderByRelationAggregateInput
  keywordCategories: MovieKeywordCategoryOrderByRelationAggregateInput
  movieInfo: MovieInfoOrderByWithRelationInput
  movieLists: MovieListOrderByRelationAggregateInput
  ratings: MovieRatingOrderByRelationAggregateInput
  spokenLanguages: MovieSpokenLanguageOrderByRelationAggregateInput
  studios: MovieStudioOrderByRelationAggregateInput
  updatedAt: SortOrder
}

type MovieRating {
  Review(where: MovieReviewWhereInput): MovieReview
  createdAt: DateTimeISO!
  id: String!
  movie: Movie!
  movieId: String!
  rating: Int!
  updatedAt: DateTimeISO!
  user: MovifierAppUser!
  userId: String!
}

type MovieRatingAvgAggregate {
  rating: Float
}

input MovieRatingAvgOrderByAggregateInput {
  rating: SortOrder
}

type MovieRatingCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  movieId: Int!
  rating: Int!
  updatedAt: Int!
  userId: Int!
}

input MovieRatingCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  movieId: SortOrder
  rating: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieRatingCreateInput {
  Review: MovieReviewCreateNestedOneWithoutRatingInput
  createdAt: DateTimeISO
  id: String
  movie: MovieCreateNestedOneWithoutRatingsInput!
  rating: Int!
  updatedAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutRatingInput!
}

input MovieRatingCreateManyInput {
  createdAt: DateTimeISO
  id: String
  movieId: String!
  rating: Int!
  updatedAt: DateTimeISO
  userId: String!
}

input MovieRatingCreateManyMovieInput {
  createdAt: DateTimeISO
  id: String
  rating: Int!
  updatedAt: DateTimeISO
  userId: String!
}

input MovieRatingCreateManyMovieInputEnvelope {
  data: [MovieRatingCreateManyMovieInput!]!
  skipDuplicates: Boolean
}

input MovieRatingCreateManyUserInput {
  createdAt: DateTimeISO
  id: String
  movieId: String!
  rating: Int!
  updatedAt: DateTimeISO
}

input MovieRatingCreateManyUserInputEnvelope {
  data: [MovieRatingCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MovieRatingCreateNestedManyWithoutMovieInput {
  connect: [MovieRatingWhereUniqueInput!]
  connectOrCreate: [MovieRatingCreateOrConnectWithoutMovieInput!]
  create: [MovieRatingCreateWithoutMovieInput!]
  createMany: MovieRatingCreateManyMovieInputEnvelope
}

input MovieRatingCreateNestedManyWithoutUserInput {
  connect: [MovieRatingWhereUniqueInput!]
  connectOrCreate: [MovieRatingCreateOrConnectWithoutUserInput!]
  create: [MovieRatingCreateWithoutUserInput!]
  createMany: MovieRatingCreateManyUserInputEnvelope
}

input MovieRatingCreateNestedOneWithoutReviewInput {
  connect: MovieRatingWhereUniqueInput
  connectOrCreate: MovieRatingCreateOrConnectWithoutReviewInput
  create: MovieRatingCreateWithoutReviewInput
}

input MovieRatingCreateOrConnectWithoutMovieInput {
  create: MovieRatingCreateWithoutMovieInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingCreateOrConnectWithoutReviewInput {
  create: MovieRatingCreateWithoutReviewInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingCreateOrConnectWithoutUserInput {
  create: MovieRatingCreateWithoutUserInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingCreateWithoutMovieInput {
  Review: MovieReviewCreateNestedOneWithoutRatingInput
  createdAt: DateTimeISO
  id: String
  rating: Int!
  updatedAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutRatingInput!
}

input MovieRatingCreateWithoutReviewInput {
  createdAt: DateTimeISO
  id: String
  movie: MovieCreateNestedOneWithoutRatingsInput!
  rating: Int!
  updatedAt: DateTimeISO
  user: MovifierAppUserCreateNestedOneWithoutRatingInput!
}

input MovieRatingCreateWithoutUserInput {
  Review: MovieReviewCreateNestedOneWithoutRatingInput
  createdAt: DateTimeISO
  id: String
  movie: MovieCreateNestedOneWithoutRatingsInput!
  rating: Int!
  updatedAt: DateTimeISO
}

type MovieRatingGroupBy {
  _avg: MovieRatingAvgAggregate
  _count: MovieRatingCountAggregate
  _max: MovieRatingMaxAggregate
  _min: MovieRatingMinAggregate
  _sum: MovieRatingSumAggregate
  createdAt: DateTimeISO!
  id: String!
  movieId: String!
  rating: Int!
  updatedAt: DateTimeISO!
  userId: String!
}

input MovieRatingListRelationFilter {
  every: MovieRatingWhereInput
  none: MovieRatingWhereInput
  some: MovieRatingWhereInput
}

type MovieRatingMaxAggregate {
  createdAt: DateTimeISO
  id: String
  movieId: String
  rating: Int
  updatedAt: DateTimeISO
  userId: String
}

input MovieRatingMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  movieId: SortOrder
  rating: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type MovieRatingMinAggregate {
  createdAt: DateTimeISO
  id: String
  movieId: String
  rating: Int
  updatedAt: DateTimeISO
  userId: String
}

input MovieRatingMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  movieId: SortOrder
  rating: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieRatingOrderByRelationAggregateInput {
  _count: SortOrder
}

input MovieRatingOrderByWithAggregationInput {
  _avg: MovieRatingAvgOrderByAggregateInput
  _count: MovieRatingCountOrderByAggregateInput
  _max: MovieRatingMaxOrderByAggregateInput
  _min: MovieRatingMinOrderByAggregateInput
  _sum: MovieRatingSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  movieId: SortOrder
  rating: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input MovieRatingOrderByWithRelationInput {
  Review: MovieReviewOrderByWithRelationInput
  createdAt: SortOrder
  id: SortOrder
  movie: MovieOrderByWithRelationInput
  movieId: SortOrder
  rating: SortOrder
  updatedAt: SortOrder
  user: MovifierAppUserOrderByWithRelationInput
  userId: SortOrder
}

input MovieRatingRelationFilter {
  is: MovieRatingWhereInput
  isNot: MovieRatingWhereInput
}

enum MovieRatingScalarFieldEnum {
  createdAt
  id
  movieId
  rating
  updatedAt
  userId
}

input MovieRatingScalarWhereInput {
  AND: [MovieRatingScalarWhereInput!]
  NOT: [MovieRatingScalarWhereInput!]
  OR: [MovieRatingScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  movieId: StringFilter
  rating: IntFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input MovieRatingScalarWhereWithAggregatesInput {
  AND: [MovieRatingScalarWhereWithAggregatesInput!]
  NOT: [MovieRatingScalarWhereWithAggregatesInput!]
  OR: [MovieRatingScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  movieId: StringWithAggregatesFilter
  rating: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type MovieRatingSumAggregate {
  rating: Int
}

input MovieRatingSumOrderByAggregateInput {
  rating: SortOrder
}

input MovieRatingUpdateInput {
  Review: MovieReviewUpdateOneWithoutRatingNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutRatingsNestedInput
  rating: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutRatingNestedInput
}

input MovieRatingUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieRatingUpdateManyWithWhereWithoutMovieInput {
  data: MovieRatingUpdateManyMutationInput!
  where: MovieRatingScalarWhereInput!
}

input MovieRatingUpdateManyWithWhereWithoutUserInput {
  data: MovieRatingUpdateManyMutationInput!
  where: MovieRatingScalarWhereInput!
}

input MovieRatingUpdateManyWithoutMovieNestedInput {
  connect: [MovieRatingWhereUniqueInput!]
  connectOrCreate: [MovieRatingCreateOrConnectWithoutMovieInput!]
  create: [MovieRatingCreateWithoutMovieInput!]
  createMany: MovieRatingCreateManyMovieInputEnvelope
  delete: [MovieRatingWhereUniqueInput!]
  deleteMany: [MovieRatingScalarWhereInput!]
  disconnect: [MovieRatingWhereUniqueInput!]
  set: [MovieRatingWhereUniqueInput!]
  update: [MovieRatingUpdateWithWhereUniqueWithoutMovieInput!]
  updateMany: [MovieRatingUpdateManyWithWhereWithoutMovieInput!]
  upsert: [MovieRatingUpsertWithWhereUniqueWithoutMovieInput!]
}

input MovieRatingUpdateManyWithoutUserNestedInput {
  connect: [MovieRatingWhereUniqueInput!]
  connectOrCreate: [MovieRatingCreateOrConnectWithoutUserInput!]
  create: [MovieRatingCreateWithoutUserInput!]
  createMany: MovieRatingCreateManyUserInputEnvelope
  delete: [MovieRatingWhereUniqueInput!]
  deleteMany: [MovieRatingScalarWhereInput!]
  disconnect: [MovieRatingWhereUniqueInput!]
  set: [MovieRatingWhereUniqueInput!]
  update: [MovieRatingUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MovieRatingUpdateManyWithWhereWithoutUserInput!]
  upsert: [MovieRatingUpsertWithWhereUniqueWithoutUserInput!]
}

input MovieRatingUpdateOneRequiredWithoutReviewNestedInput {
  connect: MovieRatingWhereUniqueInput
  connectOrCreate: MovieRatingCreateOrConnectWithoutReviewInput
  create: MovieRatingCreateWithoutReviewInput
  update: MovieRatingUpdateToOneWithWhereWithoutReviewInput
  upsert: MovieRatingUpsertWithoutReviewInput
}

input MovieRatingUpdateToOneWithWhereWithoutReviewInput {
  data: MovieRatingUpdateWithoutReviewInput!
  where: MovieRatingWhereInput
}

input MovieRatingUpdateWithWhereUniqueWithoutMovieInput {
  data: MovieRatingUpdateWithoutMovieInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingUpdateWithWhereUniqueWithoutUserInput {
  data: MovieRatingUpdateWithoutUserInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingUpdateWithoutMovieInput {
  Review: MovieReviewUpdateOneWithoutRatingNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutRatingNestedInput
}

input MovieRatingUpdateWithoutReviewInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutRatingsNestedInput
  rating: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: MovifierAppUserUpdateOneRequiredWithoutRatingNestedInput
}

input MovieRatingUpdateWithoutUserInput {
  Review: MovieReviewUpdateOneWithoutRatingNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutRatingsNestedInput
  rating: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieRatingUpsertWithWhereUniqueWithoutMovieInput {
  create: MovieRatingCreateWithoutMovieInput!
  update: MovieRatingUpdateWithoutMovieInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingUpsertWithWhereUniqueWithoutUserInput {
  create: MovieRatingCreateWithoutUserInput!
  update: MovieRatingUpdateWithoutUserInput!
  where: MovieRatingWhereUniqueInput!
}

input MovieRatingUpsertWithoutReviewInput {
  create: MovieRatingCreateWithoutReviewInput!
  update: MovieRatingUpdateWithoutReviewInput!
  where: MovieRatingWhereInput
}

input MovieRatingWhereInput {
  AND: [MovieRatingWhereInput!]
  NOT: [MovieRatingWhereInput!]
  OR: [MovieRatingWhereInput!]
  Review: MovieReviewNullableRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  rating: IntFilter
  updatedAt: DateTimeFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

input MovieRatingWhereUniqueInput {
  AND: [MovieRatingWhereInput!]
  NOT: [MovieRatingWhereInput!]
  OR: [MovieRatingWhereInput!]
  Review: MovieReviewNullableRelationFilter
  createdAt: DateTimeFilter
  id: String
  movie: MovieRelationFilter
  movieId: String
  rating: IntFilter
  updatedAt: DateTimeFilter
  user: MovifierAppUserRelationFilter
  userId: StringFilter
}

input MovieRelationFilter {
  is: MovieWhereInput
  isNot: MovieWhereInput
}

type MovieReview {
  content: String!
  createdAt: DateTimeISO!
  id: String!
  rating: MovieRating!
  ratingId: String!
  updatedAt: DateTimeISO!
}

type MovieReviewCountAggregate {
  _all: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  ratingId: Int!
  updatedAt: Int!
}

input MovieReviewCountOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ratingId: SortOrder
  updatedAt: SortOrder
}

input MovieReviewCreateInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  rating: MovieRatingCreateNestedOneWithoutReviewInput!
  updatedAt: DateTimeISO
}

input MovieReviewCreateManyInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  ratingId: String!
  updatedAt: DateTimeISO
}

input MovieReviewCreateNestedOneWithoutRatingInput {
  connect: MovieReviewWhereUniqueInput
  connectOrCreate: MovieReviewCreateOrConnectWithoutRatingInput
  create: MovieReviewCreateWithoutRatingInput
}

input MovieReviewCreateOrConnectWithoutRatingInput {
  create: MovieReviewCreateWithoutRatingInput!
  where: MovieReviewWhereUniqueInput!
}

input MovieReviewCreateWithoutRatingInput {
  content: String!
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

type MovieReviewGroupBy {
  _count: MovieReviewCountAggregate
  _max: MovieReviewMaxAggregate
  _min: MovieReviewMinAggregate
  content: String!
  createdAt: DateTimeISO!
  id: String!
  ratingId: String!
  updatedAt: DateTimeISO!
}

type MovieReviewMaxAggregate {
  content: String
  createdAt: DateTimeISO
  id: String
  ratingId: String
  updatedAt: DateTimeISO
}

input MovieReviewMaxOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ratingId: SortOrder
  updatedAt: SortOrder
}

type MovieReviewMinAggregate {
  content: String
  createdAt: DateTimeISO
  id: String
  ratingId: String
  updatedAt: DateTimeISO
}

input MovieReviewMinOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ratingId: SortOrder
  updatedAt: SortOrder
}

input MovieReviewNullableRelationFilter {
  is: MovieReviewWhereInput
  isNot: MovieReviewWhereInput
}

input MovieReviewOrderByWithAggregationInput {
  _count: MovieReviewCountOrderByAggregateInput
  _max: MovieReviewMaxOrderByAggregateInput
  _min: MovieReviewMinOrderByAggregateInput
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ratingId: SortOrder
  updatedAt: SortOrder
}

input MovieReviewOrderByWithRelationInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  rating: MovieRatingOrderByWithRelationInput
  ratingId: SortOrder
  updatedAt: SortOrder
}

enum MovieReviewScalarFieldEnum {
  content
  createdAt
  id
  ratingId
  updatedAt
}

input MovieReviewScalarWhereWithAggregatesInput {
  AND: [MovieReviewScalarWhereWithAggregatesInput!]
  NOT: [MovieReviewScalarWhereWithAggregatesInput!]
  OR: [MovieReviewScalarWhereWithAggregatesInput!]
  content: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  ratingId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input MovieReviewUpdateInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rating: MovieRatingUpdateOneRequiredWithoutReviewNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieReviewUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieReviewUpdateOneWithoutRatingNestedInput {
  connect: MovieReviewWhereUniqueInput
  connectOrCreate: MovieReviewCreateOrConnectWithoutRatingInput
  create: MovieReviewCreateWithoutRatingInput
  delete: MovieReviewWhereInput
  disconnect: MovieReviewWhereInput
  update: MovieReviewUpdateToOneWithWhereWithoutRatingInput
  upsert: MovieReviewUpsertWithoutRatingInput
}

input MovieReviewUpdateToOneWithWhereWithoutRatingInput {
  data: MovieReviewUpdateWithoutRatingInput!
  where: MovieReviewWhereInput
}

input MovieReviewUpdateWithoutRatingInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieReviewUpsertWithoutRatingInput {
  create: MovieReviewCreateWithoutRatingInput!
  update: MovieReviewUpdateWithoutRatingInput!
  where: MovieReviewWhereInput
}

input MovieReviewWhereInput {
  AND: [MovieReviewWhereInput!]
  NOT: [MovieReviewWhereInput!]
  OR: [MovieReviewWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  rating: MovieRatingRelationFilter
  ratingId: StringFilter
  updatedAt: DateTimeFilter
}

input MovieReviewWhereUniqueInput {
  AND: [MovieReviewWhereInput!]
  NOT: [MovieReviewWhereInput!]
  OR: [MovieReviewWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: String
  rating: MovieRatingRelationFilter
  ratingId: String
  updatedAt: DateTimeFilter
}

enum MovieScalarFieldEnum {
  createdAt
  genreName
  id
  updatedAt
}

input MovieScalarWhereInput {
  AND: [MovieScalarWhereInput!]
  NOT: [MovieScalarWhereInput!]
  OR: [MovieScalarWhereInput!]
  createdAt: DateTimeFilter
  genreName: StringNullableFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input MovieScalarWhereWithAggregatesInput {
  AND: [MovieScalarWhereWithAggregatesInput!]
  NOT: [MovieScalarWhereWithAggregatesInput!]
  OR: [MovieScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  genreName: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type MovieSpokenLanguage {
  _count: MovieSpokenLanguageCount
  createdAt: DateTimeISO!
  id: String!
  language: String!
  movies(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationInput!], skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
  updatedAt: DateTimeISO!
}

type MovieSpokenLanguageCount {
  movies(where: MovieWhereInput): Int!
}

type MovieSpokenLanguageCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  language: Int!
  updatedAt: Int!
}

input MovieSpokenLanguageCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  language: SortOrder
  updatedAt: SortOrder
}

input MovieSpokenLanguageCreateInput {
  createdAt: DateTimeISO
  id: String
  language: String!
  movies: MovieCreateNestedManyWithoutSpokenLanguagesInput
  updatedAt: DateTimeISO
}

input MovieSpokenLanguageCreateManyInput {
  createdAt: DateTimeISO
  id: String
  language: String!
  updatedAt: DateTimeISO
}

input MovieSpokenLanguageCreateNestedManyWithoutMoviesInput {
  connect: [MovieSpokenLanguageWhereUniqueInput!]
  connectOrCreate: [MovieSpokenLanguageCreateOrConnectWithoutMoviesInput!]
  create: [MovieSpokenLanguageCreateWithoutMoviesInput!]
}

input MovieSpokenLanguageCreateOrConnectWithoutMoviesInput {
  create: MovieSpokenLanguageCreateWithoutMoviesInput!
  where: MovieSpokenLanguageWhereUniqueInput!
}

input MovieSpokenLanguageCreateWithoutMoviesInput {
  createdAt: DateTimeISO
  id: String
  language: String!
  updatedAt: DateTimeISO
}

type MovieSpokenLanguageGroupBy {
  _count: MovieSpokenLanguageCountAggregate
  _max: MovieSpokenLanguageMaxAggregate
  _min: MovieSpokenLanguageMinAggregate
  createdAt: DateTimeISO!
  id: String!
  language: String!
  updatedAt: DateTimeISO!
}

input MovieSpokenLanguageListRelationFilter {
  every: MovieSpokenLanguageWhereInput
  none: MovieSpokenLanguageWhereInput
  some: MovieSpokenLanguageWhereInput
}

type MovieSpokenLanguageMaxAggregate {
  createdAt: DateTimeISO
  id: String
  language: String
  updatedAt: DateTimeISO
}

input MovieSpokenLanguageMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  language: SortOrder
  updatedAt: SortOrder
}

type MovieSpokenLanguageMinAggregate {
  createdAt: DateTimeISO
  id: String
  language: String
  updatedAt: DateTimeISO
}

input MovieSpokenLanguageMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  language: SortOrder
  updatedAt: SortOrder
}

input MovieSpokenLanguageOrderByRelationAggregateInput {
  _count: SortOrder
}

input MovieSpokenLanguageOrderByWithAggregationInput {
  _count: MovieSpokenLanguageCountOrderByAggregateInput
  _max: MovieSpokenLanguageMaxOrderByAggregateInput
  _min: MovieSpokenLanguageMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  language: SortOrder
  updatedAt: SortOrder
}

input MovieSpokenLanguageOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  language: SortOrder
  movies: MovieOrderByRelationAggregateInput
  updatedAt: SortOrder
}

enum MovieSpokenLanguageScalarFieldEnum {
  createdAt
  id
  language
  updatedAt
}

input MovieSpokenLanguageScalarWhereInput {
  AND: [MovieSpokenLanguageScalarWhereInput!]
  NOT: [MovieSpokenLanguageScalarWhereInput!]
  OR: [MovieSpokenLanguageScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  language: StringFilter
  updatedAt: DateTimeFilter
}

input MovieSpokenLanguageScalarWhereWithAggregatesInput {
  AND: [MovieSpokenLanguageScalarWhereWithAggregatesInput!]
  NOT: [MovieSpokenLanguageScalarWhereWithAggregatesInput!]
  OR: [MovieSpokenLanguageScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  language: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input MovieSpokenLanguageUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  movies: MovieUpdateManyWithoutSpokenLanguagesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieSpokenLanguageUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieSpokenLanguageUpdateManyWithWhereWithoutMoviesInput {
  data: MovieSpokenLanguageUpdateManyMutationInput!
  where: MovieSpokenLanguageScalarWhereInput!
}

input MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput {
  connect: [MovieSpokenLanguageWhereUniqueInput!]
  connectOrCreate: [MovieSpokenLanguageCreateOrConnectWithoutMoviesInput!]
  create: [MovieSpokenLanguageCreateWithoutMoviesInput!]
  delete: [MovieSpokenLanguageWhereUniqueInput!]
  deleteMany: [MovieSpokenLanguageScalarWhereInput!]
  disconnect: [MovieSpokenLanguageWhereUniqueInput!]
  set: [MovieSpokenLanguageWhereUniqueInput!]
  update: [MovieSpokenLanguageUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [MovieSpokenLanguageUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [MovieSpokenLanguageUpsertWithWhereUniqueWithoutMoviesInput!]
}

input MovieSpokenLanguageUpdateWithWhereUniqueWithoutMoviesInput {
  data: MovieSpokenLanguageUpdateWithoutMoviesInput!
  where: MovieSpokenLanguageWhereUniqueInput!
}

input MovieSpokenLanguageUpdateWithoutMoviesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  language: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieSpokenLanguageUpsertWithWhereUniqueWithoutMoviesInput {
  create: MovieSpokenLanguageCreateWithoutMoviesInput!
  update: MovieSpokenLanguageUpdateWithoutMoviesInput!
  where: MovieSpokenLanguageWhereUniqueInput!
}

input MovieSpokenLanguageWhereInput {
  AND: [MovieSpokenLanguageWhereInput!]
  NOT: [MovieSpokenLanguageWhereInput!]
  OR: [MovieSpokenLanguageWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  language: StringFilter
  movies: MovieListRelationFilter
  updatedAt: DateTimeFilter
}

input MovieSpokenLanguageWhereUniqueInput {
  AND: [MovieSpokenLanguageWhereInput!]
  NOT: [MovieSpokenLanguageWhereInput!]
  OR: [MovieSpokenLanguageWhereInput!]
  createdAt: DateTimeFilter
  id: String
  language: StringFilter
  movies: MovieListRelationFilter
  updatedAt: DateTimeFilter
}

type MovieStats {
  avgRating: Float!
  id: String!
  movie: Movie!
  movieId: String!
  overallPlaceINTop: Int!
  timesWatchedCount: Int!
  totalLikesCount: Int!
  totalRatingsCount: Int!
}

type MovieStatsAvgAggregate {
  avgRating: Float
  overallPlaceINTop: Float
  timesWatchedCount: Float
  totalLikesCount: Float
  totalRatingsCount: Float
}

input MovieStatsAvgOrderByAggregateInput {
  avgRating: SortOrder
  overallPlaceINTop: SortOrder
  timesWatchedCount: SortOrder
  totalLikesCount: SortOrder
  totalRatingsCount: SortOrder
}

type MovieStatsCountAggregate {
  _all: Int!
  avgRating: Int!
  id: Int!
  movieId: Int!
  overallPlaceINTop: Int!
  timesWatchedCount: Int!
  totalLikesCount: Int!
  totalRatingsCount: Int!
}

input MovieStatsCountOrderByAggregateInput {
  avgRating: SortOrder
  id: SortOrder
  movieId: SortOrder
  overallPlaceINTop: SortOrder
  timesWatchedCount: SortOrder
  totalLikesCount: SortOrder
  totalRatingsCount: SortOrder
}

input MovieStatsCreateInput {
  avgRating: Float!
  id: String
  movie: MovieCreateNestedOneWithoutMovieStatsInput!
  overallPlaceINTop: Int!
  timesWatchedCount: Int!
  totalLikesCount: Int!
  totalRatingsCount: Int!
}

input MovieStatsCreateManyInput {
  avgRating: Float!
  id: String
  movieId: String!
  overallPlaceINTop: Int!
  timesWatchedCount: Int!
  totalLikesCount: Int!
  totalRatingsCount: Int!
}

input MovieStatsCreateNestedOneWithoutMovieInput {
  connect: MovieStatsWhereUniqueInput
  connectOrCreate: MovieStatsCreateOrConnectWithoutMovieInput
  create: MovieStatsCreateWithoutMovieInput
}

input MovieStatsCreateOrConnectWithoutMovieInput {
  create: MovieStatsCreateWithoutMovieInput!
  where: MovieStatsWhereUniqueInput!
}

input MovieStatsCreateWithoutMovieInput {
  avgRating: Float!
  id: String
  overallPlaceINTop: Int!
  timesWatchedCount: Int!
  totalLikesCount: Int!
  totalRatingsCount: Int!
}

type MovieStatsGroupBy {
  _avg: MovieStatsAvgAggregate
  _count: MovieStatsCountAggregate
  _max: MovieStatsMaxAggregate
  _min: MovieStatsMinAggregate
  _sum: MovieStatsSumAggregate
  avgRating: Float!
  id: String!
  movieId: String!
  overallPlaceINTop: Int!
  timesWatchedCount: Int!
  totalLikesCount: Int!
  totalRatingsCount: Int!
}

type MovieStatsMaxAggregate {
  avgRating: Float
  id: String
  movieId: String
  overallPlaceINTop: Int
  timesWatchedCount: Int
  totalLikesCount: Int
  totalRatingsCount: Int
}

input MovieStatsMaxOrderByAggregateInput {
  avgRating: SortOrder
  id: SortOrder
  movieId: SortOrder
  overallPlaceINTop: SortOrder
  timesWatchedCount: SortOrder
  totalLikesCount: SortOrder
  totalRatingsCount: SortOrder
}

type MovieStatsMinAggregate {
  avgRating: Float
  id: String
  movieId: String
  overallPlaceINTop: Int
  timesWatchedCount: Int
  totalLikesCount: Int
  totalRatingsCount: Int
}

input MovieStatsMinOrderByAggregateInput {
  avgRating: SortOrder
  id: SortOrder
  movieId: SortOrder
  overallPlaceINTop: SortOrder
  timesWatchedCount: SortOrder
  totalLikesCount: SortOrder
  totalRatingsCount: SortOrder
}

input MovieStatsNullableRelationFilter {
  is: MovieStatsWhereInput
  isNot: MovieStatsWhereInput
}

input MovieStatsOrderByWithAggregationInput {
  _avg: MovieStatsAvgOrderByAggregateInput
  _count: MovieStatsCountOrderByAggregateInput
  _max: MovieStatsMaxOrderByAggregateInput
  _min: MovieStatsMinOrderByAggregateInput
  _sum: MovieStatsSumOrderByAggregateInput
  avgRating: SortOrder
  id: SortOrder
  movieId: SortOrder
  overallPlaceINTop: SortOrder
  timesWatchedCount: SortOrder
  totalLikesCount: SortOrder
  totalRatingsCount: SortOrder
}

input MovieStatsOrderByWithRelationInput {
  avgRating: SortOrder
  id: SortOrder
  movie: MovieOrderByWithRelationInput
  movieId: SortOrder
  overallPlaceINTop: SortOrder
  timesWatchedCount: SortOrder
  totalLikesCount: SortOrder
  totalRatingsCount: SortOrder
}

enum MovieStatsScalarFieldEnum {
  avgRating
  id
  movieId
  overallPlaceINTop
  timesWatchedCount
  totalLikesCount
  totalRatingsCount
}

input MovieStatsScalarWhereWithAggregatesInput {
  AND: [MovieStatsScalarWhereWithAggregatesInput!]
  NOT: [MovieStatsScalarWhereWithAggregatesInput!]
  OR: [MovieStatsScalarWhereWithAggregatesInput!]
  avgRating: FloatWithAggregatesFilter
  id: StringWithAggregatesFilter
  movieId: StringWithAggregatesFilter
  overallPlaceINTop: IntWithAggregatesFilter
  timesWatchedCount: IntWithAggregatesFilter
  totalLikesCount: IntWithAggregatesFilter
  totalRatingsCount: IntWithAggregatesFilter
}

type MovieStatsSumAggregate {
  avgRating: Float
  overallPlaceINTop: Int
  timesWatchedCount: Int
  totalLikesCount: Int
  totalRatingsCount: Int
}

input MovieStatsSumOrderByAggregateInput {
  avgRating: SortOrder
  overallPlaceINTop: SortOrder
  timesWatchedCount: SortOrder
  totalLikesCount: SortOrder
  totalRatingsCount: SortOrder
}

input MovieStatsUpdateInput {
  avgRating: FloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movie: MovieUpdateOneRequiredWithoutMovieStatsNestedInput
  overallPlaceINTop: IntFieldUpdateOperationsInput
  timesWatchedCount: IntFieldUpdateOperationsInput
  totalLikesCount: IntFieldUpdateOperationsInput
  totalRatingsCount: IntFieldUpdateOperationsInput
}

input MovieStatsUpdateManyMutationInput {
  avgRating: FloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  overallPlaceINTop: IntFieldUpdateOperationsInput
  timesWatchedCount: IntFieldUpdateOperationsInput
  totalLikesCount: IntFieldUpdateOperationsInput
  totalRatingsCount: IntFieldUpdateOperationsInput
}

input MovieStatsUpdateOneWithoutMovieNestedInput {
  connect: MovieStatsWhereUniqueInput
  connectOrCreate: MovieStatsCreateOrConnectWithoutMovieInput
  create: MovieStatsCreateWithoutMovieInput
  delete: MovieStatsWhereInput
  disconnect: MovieStatsWhereInput
  update: MovieStatsUpdateToOneWithWhereWithoutMovieInput
  upsert: MovieStatsUpsertWithoutMovieInput
}

input MovieStatsUpdateToOneWithWhereWithoutMovieInput {
  data: MovieStatsUpdateWithoutMovieInput!
  where: MovieStatsWhereInput
}

input MovieStatsUpdateWithoutMovieInput {
  avgRating: FloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  overallPlaceINTop: IntFieldUpdateOperationsInput
  timesWatchedCount: IntFieldUpdateOperationsInput
  totalLikesCount: IntFieldUpdateOperationsInput
  totalRatingsCount: IntFieldUpdateOperationsInput
}

input MovieStatsUpsertWithoutMovieInput {
  create: MovieStatsCreateWithoutMovieInput!
  update: MovieStatsUpdateWithoutMovieInput!
  where: MovieStatsWhereInput
}

input MovieStatsWhereInput {
  AND: [MovieStatsWhereInput!]
  NOT: [MovieStatsWhereInput!]
  OR: [MovieStatsWhereInput!]
  avgRating: FloatFilter
  id: StringFilter
  movie: MovieRelationFilter
  movieId: StringFilter
  overallPlaceINTop: IntFilter
  timesWatchedCount: IntFilter
  totalLikesCount: IntFilter
  totalRatingsCount: IntFilter
}

input MovieStatsWhereUniqueInput {
  AND: [MovieStatsWhereInput!]
  NOT: [MovieStatsWhereInput!]
  OR: [MovieStatsWhereInput!]
  avgRating: FloatFilter
  id: String
  movie: MovieRelationFilter
  movieId: String
  overallPlaceINTop: IntFilter
  timesWatchedCount: IntFilter
  totalLikesCount: IntFilter
  totalRatingsCount: IntFilter
}

type MovieStudio {
  _count: MovieStudioCount
  createdAt: DateTimeISO!
  id: String!
  movies(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationInput!], skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
  name: String!
  updatedAt: DateTimeISO!
}

type MovieStudioCount {
  movies(where: MovieWhereInput): Int!
}

type MovieStudioCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input MovieStudioCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input MovieStudioCreateInput {
  createdAt: DateTimeISO
  id: String
  movies: MovieCreateNestedManyWithoutStudiosInput
  name: String!
  updatedAt: DateTimeISO
}

input MovieStudioCreateManyInput {
  createdAt: DateTimeISO
  id: String
  name: String!
  updatedAt: DateTimeISO
}

input MovieStudioCreateNestedManyWithoutMoviesInput {
  connect: [MovieStudioWhereUniqueInput!]
  connectOrCreate: [MovieStudioCreateOrConnectWithoutMoviesInput!]
  create: [MovieStudioCreateWithoutMoviesInput!]
}

input MovieStudioCreateOrConnectWithoutMoviesInput {
  create: MovieStudioCreateWithoutMoviesInput!
  where: MovieStudioWhereUniqueInput!
}

input MovieStudioCreateWithoutMoviesInput {
  createdAt: DateTimeISO
  id: String
  name: String!
  updatedAt: DateTimeISO
}

type MovieStudioGroupBy {
  _count: MovieStudioCountAggregate
  _max: MovieStudioMaxAggregate
  _min: MovieStudioMinAggregate
  createdAt: DateTimeISO!
  id: String!
  name: String!
  updatedAt: DateTimeISO!
}

input MovieStudioListRelationFilter {
  every: MovieStudioWhereInput
  none: MovieStudioWhereInput
  some: MovieStudioWhereInput
}

type MovieStudioMaxAggregate {
  createdAt: DateTimeISO
  id: String
  name: String
  updatedAt: DateTimeISO
}

input MovieStudioMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type MovieStudioMinAggregate {
  createdAt: DateTimeISO
  id: String
  name: String
  updatedAt: DateTimeISO
}

input MovieStudioMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input MovieStudioOrderByRelationAggregateInput {
  _count: SortOrder
}

input MovieStudioOrderByWithAggregationInput {
  _count: MovieStudioCountOrderByAggregateInput
  _max: MovieStudioMaxOrderByAggregateInput
  _min: MovieStudioMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input MovieStudioOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  movies: MovieOrderByRelationAggregateInput
  name: SortOrder
  updatedAt: SortOrder
}

enum MovieStudioScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input MovieStudioScalarWhereInput {
  AND: [MovieStudioScalarWhereInput!]
  NOT: [MovieStudioScalarWhereInput!]
  OR: [MovieStudioScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input MovieStudioScalarWhereWithAggregatesInput {
  AND: [MovieStudioScalarWhereWithAggregatesInput!]
  NOT: [MovieStudioScalarWhereWithAggregatesInput!]
  OR: [MovieStudioScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input MovieStudioUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movies: MovieUpdateManyWithoutStudiosNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieStudioUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieStudioUpdateManyWithWhereWithoutMoviesInput {
  data: MovieStudioUpdateManyMutationInput!
  where: MovieStudioScalarWhereInput!
}

input MovieStudioUpdateManyWithoutMoviesNestedInput {
  connect: [MovieStudioWhereUniqueInput!]
  connectOrCreate: [MovieStudioCreateOrConnectWithoutMoviesInput!]
  create: [MovieStudioCreateWithoutMoviesInput!]
  delete: [MovieStudioWhereUniqueInput!]
  deleteMany: [MovieStudioScalarWhereInput!]
  disconnect: [MovieStudioWhereUniqueInput!]
  set: [MovieStudioWhereUniqueInput!]
  update: [MovieStudioUpdateWithWhereUniqueWithoutMoviesInput!]
  updateMany: [MovieStudioUpdateManyWithWhereWithoutMoviesInput!]
  upsert: [MovieStudioUpsertWithWhereUniqueWithoutMoviesInput!]
}

input MovieStudioUpdateWithWhereUniqueWithoutMoviesInput {
  data: MovieStudioUpdateWithoutMoviesInput!
  where: MovieStudioWhereUniqueInput!
}

input MovieStudioUpdateWithoutMoviesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieStudioUpsertWithWhereUniqueWithoutMoviesInput {
  create: MovieStudioCreateWithoutMoviesInput!
  update: MovieStudioUpdateWithoutMoviesInput!
  where: MovieStudioWhereUniqueInput!
}

input MovieStudioWhereInput {
  AND: [MovieStudioWhereInput!]
  NOT: [MovieStudioWhereInput!]
  OR: [MovieStudioWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  movies: MovieListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input MovieStudioWhereUniqueInput {
  AND: [MovieStudioWhereInput!]
  NOT: [MovieStudioWhereInput!]
  OR: [MovieStudioWhereInput!]
  createdAt: DateTimeFilter
  id: String
  movies: MovieListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input MovieUpdateInput {
  MovieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberUpdateManyWithoutMoviesNestedInput
  genreName: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: MovifierAppUserUpdateManyWithoutWatchlistNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  ratings: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  genreName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateManyWithWhereWithoutCrewMembersInput {
  data: MovieUpdateManyMutationInput!
  where: MovieScalarWhereInput!
}

input MovieUpdateManyWithWhereWithoutGenresInput {
  data: MovieUpdateManyMutationInput!
  where: MovieScalarWhereInput!
}

input MovieUpdateManyWithWhereWithoutInWatchlistByUsersInput {
  data: MovieUpdateManyMutationInput!
  where: MovieScalarWhereInput!
}

input MovieUpdateManyWithWhereWithoutKeywordCategoriesInput {
  data: MovieUpdateManyMutationInput!
  where: MovieScalarWhereInput!
}

input MovieUpdateManyWithWhereWithoutMovieListsInput {
  data: MovieUpdateManyMutationInput!
  where: MovieScalarWhereInput!
}

input MovieUpdateManyWithWhereWithoutSpokenLanguagesInput {
  data: MovieUpdateManyMutationInput!
  where: MovieScalarWhereInput!
}

input MovieUpdateManyWithWhereWithoutStudiosInput {
  data: MovieUpdateManyMutationInput!
  where: MovieScalarWhereInput!
}

input MovieUpdateManyWithoutCrewMembersNestedInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutCrewMembersInput!]
  create: [MovieCreateWithoutCrewMembersInput!]
  delete: [MovieWhereUniqueInput!]
  deleteMany: [MovieScalarWhereInput!]
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutCrewMembersInput!]
  updateMany: [MovieUpdateManyWithWhereWithoutCrewMembersInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutCrewMembersInput!]
}

input MovieUpdateManyWithoutGenresNestedInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutGenresInput!]
  create: [MovieCreateWithoutGenresInput!]
  delete: [MovieWhereUniqueInput!]
  deleteMany: [MovieScalarWhereInput!]
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutGenresInput!]
  updateMany: [MovieUpdateManyWithWhereWithoutGenresInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutGenresInput!]
}

input MovieUpdateManyWithoutInWatchlistByUsersNestedInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutInWatchlistByUsersInput!]
  create: [MovieCreateWithoutInWatchlistByUsersInput!]
  delete: [MovieWhereUniqueInput!]
  deleteMany: [MovieScalarWhereInput!]
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutInWatchlistByUsersInput!]
  updateMany: [MovieUpdateManyWithWhereWithoutInWatchlistByUsersInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutInWatchlistByUsersInput!]
}

input MovieUpdateManyWithoutKeywordCategoriesNestedInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutKeywordCategoriesInput!]
  create: [MovieCreateWithoutKeywordCategoriesInput!]
  delete: [MovieWhereUniqueInput!]
  deleteMany: [MovieScalarWhereInput!]
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutKeywordCategoriesInput!]
  updateMany: [MovieUpdateManyWithWhereWithoutKeywordCategoriesInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutKeywordCategoriesInput!]
}

input MovieUpdateManyWithoutMovieListsNestedInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutMovieListsInput!]
  create: [MovieCreateWithoutMovieListsInput!]
  delete: [MovieWhereUniqueInput!]
  deleteMany: [MovieScalarWhereInput!]
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutMovieListsInput!]
  updateMany: [MovieUpdateManyWithWhereWithoutMovieListsInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutMovieListsInput!]
}

input MovieUpdateManyWithoutSpokenLanguagesNestedInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutSpokenLanguagesInput!]
  create: [MovieCreateWithoutSpokenLanguagesInput!]
  delete: [MovieWhereUniqueInput!]
  deleteMany: [MovieScalarWhereInput!]
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutSpokenLanguagesInput!]
  updateMany: [MovieUpdateManyWithWhereWithoutSpokenLanguagesInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutSpokenLanguagesInput!]
}

input MovieUpdateManyWithoutStudiosNestedInput {
  connect: [MovieWhereUniqueInput!]
  connectOrCreate: [MovieCreateOrConnectWithoutStudiosInput!]
  create: [MovieCreateWithoutStudiosInput!]
  delete: [MovieWhereUniqueInput!]
  deleteMany: [MovieScalarWhereInput!]
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutStudiosInput!]
  updateMany: [MovieUpdateManyWithWhereWithoutStudiosInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutStudiosInput!]
}

input MovieUpdateOneRequiredWithoutMovieInfoNestedInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutMovieInfoInput
  create: MovieCreateWithoutMovieInfoInput
  update: MovieUpdateToOneWithWhereWithoutMovieInfoInput
  upsert: MovieUpsertWithoutMovieInfoInput
}

input MovieUpdateOneRequiredWithoutMovieStatsNestedInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutMovieStatsInput
  create: MovieCreateWithoutMovieStatsInput
  update: MovieUpdateToOneWithWhereWithoutMovieStatsInput
  upsert: MovieUpsertWithoutMovieStatsInput
}

input MovieUpdateOneRequiredWithoutRatingsNestedInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutRatingsInput
  create: MovieCreateWithoutRatingsInput
  update: MovieUpdateToOneWithWhereWithoutRatingsInput
  upsert: MovieUpsertWithoutRatingsInput
}

input MovieUpdateToOneWithWhereWithoutMovieInfoInput {
  data: MovieUpdateWithoutMovieInfoInput!
  where: MovieWhereInput
}

input MovieUpdateToOneWithWhereWithoutMovieStatsInput {
  data: MovieUpdateWithoutMovieStatsInput!
  where: MovieWhereInput
}

input MovieUpdateToOneWithWhereWithoutRatingsInput {
  data: MovieUpdateWithoutRatingsInput!
  where: MovieWhereInput
}

input MovieUpdateWithWhereUniqueWithoutCrewMembersInput {
  data: MovieUpdateWithoutCrewMembersInput!
  where: MovieWhereUniqueInput!
}

input MovieUpdateWithWhereUniqueWithoutGenresInput {
  data: MovieUpdateWithoutGenresInput!
  where: MovieWhereUniqueInput!
}

input MovieUpdateWithWhereUniqueWithoutInWatchlistByUsersInput {
  data: MovieUpdateWithoutInWatchlistByUsersInput!
  where: MovieWhereUniqueInput!
}

input MovieUpdateWithWhereUniqueWithoutKeywordCategoriesInput {
  data: MovieUpdateWithoutKeywordCategoriesInput!
  where: MovieWhereUniqueInput!
}

input MovieUpdateWithWhereUniqueWithoutMovieListsInput {
  data: MovieUpdateWithoutMovieListsInput!
  where: MovieWhereUniqueInput!
}

input MovieUpdateWithWhereUniqueWithoutSpokenLanguagesInput {
  data: MovieUpdateWithoutSpokenLanguagesInput!
  where: MovieWhereUniqueInput!
}

input MovieUpdateWithWhereUniqueWithoutStudiosInput {
  data: MovieUpdateWithoutStudiosInput!
  where: MovieWhereUniqueInput!
}

input MovieUpdateWithoutCrewMembersInput {
  MovieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  genreName: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: MovifierAppUserUpdateManyWithoutWatchlistNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  ratings: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateWithoutGenresInput {
  MovieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberUpdateManyWithoutMoviesNestedInput
  genreName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: MovifierAppUserUpdateManyWithoutWatchlistNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  ratings: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateWithoutInWatchlistByUsersInput {
  MovieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberUpdateManyWithoutMoviesNestedInput
  genreName: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  ratings: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateWithoutKeywordCategoriesInput {
  MovieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberUpdateManyWithoutMoviesNestedInput
  genreName: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: MovifierAppUserUpdateManyWithoutWatchlistNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  ratings: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateWithoutMovieInfoInput {
  MovieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberUpdateManyWithoutMoviesNestedInput
  genreName: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: MovifierAppUserUpdateManyWithoutWatchlistNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  ratings: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateWithoutMovieListsInput {
  MovieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberUpdateManyWithoutMoviesNestedInput
  genreName: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: MovifierAppUserUpdateManyWithoutWatchlistNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  ratings: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateWithoutMovieStatsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberUpdateManyWithoutMoviesNestedInput
  genreName: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: MovifierAppUserUpdateManyWithoutWatchlistNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  ratings: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateWithoutRatingsInput {
  MovieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberUpdateManyWithoutMoviesNestedInput
  genreName: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: MovifierAppUserUpdateManyWithoutWatchlistNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateWithoutSpokenLanguagesInput {
  MovieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberUpdateManyWithoutMoviesNestedInput
  genreName: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: MovifierAppUserUpdateManyWithoutWatchlistNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  ratings: MovieRatingUpdateManyWithoutMovieNestedInput
  studios: MovieStudioUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpdateWithoutStudiosInput {
  MovieStats: MovieStatsUpdateOneWithoutMovieNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crewMembers: MovieCrewMemberUpdateManyWithoutMoviesNestedInput
  genreName: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutMoviesNestedInput
  id: StringFieldUpdateOperationsInput
  inWatchlistByUsers: MovifierAppUserUpdateManyWithoutWatchlistNestedInput
  keywordCategories: MovieKeywordCategoryUpdateManyWithoutMoviesNestedInput
  movieInfo: MovieInfoUpdateOneWithoutMovieNestedInput
  movieLists: MovieListUpdateManyWithoutMoviesNestedInput
  ratings: MovieRatingUpdateManyWithoutMovieNestedInput
  spokenLanguages: MovieSpokenLanguageUpdateManyWithoutMoviesNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MovieUpsertWithWhereUniqueWithoutCrewMembersInput {
  create: MovieCreateWithoutCrewMembersInput!
  update: MovieUpdateWithoutCrewMembersInput!
  where: MovieWhereUniqueInput!
}

input MovieUpsertWithWhereUniqueWithoutGenresInput {
  create: MovieCreateWithoutGenresInput!
  update: MovieUpdateWithoutGenresInput!
  where: MovieWhereUniqueInput!
}

input MovieUpsertWithWhereUniqueWithoutInWatchlistByUsersInput {
  create: MovieCreateWithoutInWatchlistByUsersInput!
  update: MovieUpdateWithoutInWatchlistByUsersInput!
  where: MovieWhereUniqueInput!
}

input MovieUpsertWithWhereUniqueWithoutKeywordCategoriesInput {
  create: MovieCreateWithoutKeywordCategoriesInput!
  update: MovieUpdateWithoutKeywordCategoriesInput!
  where: MovieWhereUniqueInput!
}

input MovieUpsertWithWhereUniqueWithoutMovieListsInput {
  create: MovieCreateWithoutMovieListsInput!
  update: MovieUpdateWithoutMovieListsInput!
  where: MovieWhereUniqueInput!
}

input MovieUpsertWithWhereUniqueWithoutSpokenLanguagesInput {
  create: MovieCreateWithoutSpokenLanguagesInput!
  update: MovieUpdateWithoutSpokenLanguagesInput!
  where: MovieWhereUniqueInput!
}

input MovieUpsertWithWhereUniqueWithoutStudiosInput {
  create: MovieCreateWithoutStudiosInput!
  update: MovieUpdateWithoutStudiosInput!
  where: MovieWhereUniqueInput!
}

input MovieUpsertWithoutMovieInfoInput {
  create: MovieCreateWithoutMovieInfoInput!
  update: MovieUpdateWithoutMovieInfoInput!
  where: MovieWhereInput
}

input MovieUpsertWithoutMovieStatsInput {
  create: MovieCreateWithoutMovieStatsInput!
  update: MovieUpdateWithoutMovieStatsInput!
  where: MovieWhereInput
}

input MovieUpsertWithoutRatingsInput {
  create: MovieCreateWithoutRatingsInput!
  update: MovieUpdateWithoutRatingsInput!
  where: MovieWhereInput
}

input MovieWhereInput {
  AND: [MovieWhereInput!]
  MovieStats: MovieStatsNullableRelationFilter
  NOT: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  createdAt: DateTimeFilter
  crewMembers: MovieCrewMemberListRelationFilter
  genreName: StringNullableFilter
  genres: GenreListRelationFilter
  id: StringFilter
  inWatchlistByUsers: MovifierAppUserListRelationFilter
  keywordCategories: MovieKeywordCategoryListRelationFilter
  movieInfo: MovieInfoNullableRelationFilter
  movieLists: MovieListListRelationFilter
  ratings: MovieRatingListRelationFilter
  spokenLanguages: MovieSpokenLanguageListRelationFilter
  studios: MovieStudioListRelationFilter
  updatedAt: DateTimeFilter
}

input MovieWhereUniqueInput {
  AND: [MovieWhereInput!]
  MovieStats: MovieStatsNullableRelationFilter
  NOT: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  createdAt: DateTimeFilter
  crewMembers: MovieCrewMemberListRelationFilter
  genreName: StringNullableFilter
  genres: GenreListRelationFilter
  id: String
  inWatchlistByUsers: MovifierAppUserListRelationFilter
  keywordCategories: MovieKeywordCategoryListRelationFilter
  movieInfo: MovieInfoNullableRelationFilter
  movieLists: MovieListListRelationFilter
  ratings: MovieRatingListRelationFilter
  spokenLanguages: MovieSpokenLanguageListRelationFilter
  studios: MovieStudioListRelationFilter
  updatedAt: DateTimeFilter
}

type MovifierAppUser {
  _count: MovifierAppUserCount
  createdAt: DateTimeISO!
  email: String!
  id: String!
  movieLists(cursor: MovieListWhereUniqueInput, distinct: [MovieListScalarFieldEnum!], orderBy: [MovieListOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListWhereInput): [MovieList!]!
  movieListsComments(cursor: MovieListCommentWhereUniqueInput, distinct: [MovieListCommentScalarFieldEnum!], orderBy: [MovieListCommentOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListCommentWhereInput): [MovieListComment!]!
  name: String!
  password_hash: String!
  rating(cursor: MovieRatingWhereUniqueInput, distinct: [MovieRatingScalarFieldEnum!], orderBy: [MovieRatingOrderByWithRelationInput!], skip: Int, take: Int, where: MovieRatingWhereInput): [MovieRating!]!
  updatedAt: DateTimeISO!
  username: String!
  watchlist(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationInput!], skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
}

type MovifierAppUserCount {
  movieLists(where: MovieListWhereInput): Int!
  movieListsComments(where: MovieListCommentWhereInput): Int!
  rating(where: MovieRatingWhereInput): Int!
  watchlist(where: MovieWhereInput): Int!
}

type MovifierAppUserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  name: Int!
  password_hash: Int!
  updatedAt: Int!
  username: Int!
}

input MovifierAppUserCountOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password_hash: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input MovifierAppUserCreateInput {
  createdAt: DateTimeISO
  email: String!
  id: String
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password_hash: String!
  rating: MovieRatingCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
  username: String!
  watchlist: MovieCreateNestedManyWithoutInWatchlistByUsersInput
}

input MovifierAppUserCreateManyInput {
  createdAt: DateTimeISO
  email: String!
  id: String
  name: String!
  password_hash: String!
  updatedAt: DateTimeISO
  username: String!
}

input MovifierAppUserCreateNestedManyWithoutWatchlistInput {
  connect: [MovifierAppUserWhereUniqueInput!]
  connectOrCreate: [MovifierAppUserCreateOrConnectWithoutWatchlistInput!]
  create: [MovifierAppUserCreateWithoutWatchlistInput!]
}

input MovifierAppUserCreateNestedOneWithoutMovieListsCommentsInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutMovieListsCommentsInput
  create: MovifierAppUserCreateWithoutMovieListsCommentsInput
}

input MovifierAppUserCreateNestedOneWithoutMovieListsInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutMovieListsInput
  create: MovifierAppUserCreateWithoutMovieListsInput
}

input MovifierAppUserCreateNestedOneWithoutRatingInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutRatingInput
  create: MovifierAppUserCreateWithoutRatingInput
}

input MovifierAppUserCreateOrConnectWithoutMovieListsCommentsInput {
  create: MovifierAppUserCreateWithoutMovieListsCommentsInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateOrConnectWithoutMovieListsInput {
  create: MovifierAppUserCreateWithoutMovieListsInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateOrConnectWithoutRatingInput {
  create: MovifierAppUserCreateWithoutRatingInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateOrConnectWithoutWatchlistInput {
  create: MovifierAppUserCreateWithoutWatchlistInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserCreateWithoutMovieListsCommentsInput {
  createdAt: DateTimeISO
  email: String!
  id: String
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  name: String!
  password_hash: String!
  rating: MovieRatingCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
  username: String!
  watchlist: MovieCreateNestedManyWithoutInWatchlistByUsersInput
}

input MovifierAppUserCreateWithoutMovieListsInput {
  createdAt: DateTimeISO
  email: String!
  id: String
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password_hash: String!
  rating: MovieRatingCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
  username: String!
  watchlist: MovieCreateNestedManyWithoutInWatchlistByUsersInput
}

input MovifierAppUserCreateWithoutRatingInput {
  createdAt: DateTimeISO
  email: String!
  id: String
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password_hash: String!
  updatedAt: DateTimeISO
  username: String!
  watchlist: MovieCreateNestedManyWithoutInWatchlistByUsersInput
}

input MovifierAppUserCreateWithoutWatchlistInput {
  createdAt: DateTimeISO
  email: String!
  id: String
  movieLists: MovieListCreateNestedManyWithoutMovieListAuthorInput
  movieListsComments: MovieListCommentCreateNestedManyWithoutUserInput
  name: String!
  password_hash: String!
  rating: MovieRatingCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
  username: String!
}

type MovifierAppUserGroupBy {
  _count: MovifierAppUserCountAggregate
  _max: MovifierAppUserMaxAggregate
  _min: MovifierAppUserMinAggregate
  createdAt: DateTimeISO!
  email: String!
  id: String!
  name: String!
  password_hash: String!
  updatedAt: DateTimeISO!
  username: String!
}

input MovifierAppUserListRelationFilter {
  every: MovifierAppUserWhereInput
  none: MovifierAppUserWhereInput
  some: MovifierAppUserWhereInput
}

type MovifierAppUserMaxAggregate {
  createdAt: DateTimeISO
  email: String
  id: String
  name: String
  password_hash: String
  updatedAt: DateTimeISO
  username: String
}

input MovifierAppUserMaxOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password_hash: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

type MovifierAppUserMinAggregate {
  createdAt: DateTimeISO
  email: String
  id: String
  name: String
  password_hash: String
  updatedAt: DateTimeISO
  username: String
}

input MovifierAppUserMinOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password_hash: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input MovifierAppUserOrderByRelationAggregateInput {
  _count: SortOrder
}

input MovifierAppUserOrderByWithAggregationInput {
  _count: MovifierAppUserCountOrderByAggregateInput
  _max: MovifierAppUserMaxOrderByAggregateInput
  _min: MovifierAppUserMinOrderByAggregateInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password_hash: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input MovifierAppUserOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  movieLists: MovieListOrderByRelationAggregateInput
  movieListsComments: MovieListCommentOrderByRelationAggregateInput
  name: SortOrder
  password_hash: SortOrder
  rating: MovieRatingOrderByRelationAggregateInput
  updatedAt: SortOrder
  username: SortOrder
  watchlist: MovieOrderByRelationAggregateInput
}

input MovifierAppUserRelationFilter {
  is: MovifierAppUserWhereInput
  isNot: MovifierAppUserWhereInput
}

enum MovifierAppUserScalarFieldEnum {
  createdAt
  email
  id
  name
  password_hash
  updatedAt
  username
}

input MovifierAppUserScalarWhereInput {
  AND: [MovifierAppUserScalarWhereInput!]
  NOT: [MovifierAppUserScalarWhereInput!]
  OR: [MovifierAppUserScalarWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  password_hash: StringFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input MovifierAppUserScalarWhereWithAggregatesInput {
  AND: [MovifierAppUserScalarWhereWithAggregatesInput!]
  NOT: [MovifierAppUserScalarWhereWithAggregatesInput!]
  OR: [MovifierAppUserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  password_hash: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  username: StringWithAggregatesFilter
}

input MovifierAppUserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieLists: MovieListUpdateManyWithoutMovieListAuthorNestedInput
  movieListsComments: MovieListCommentUpdateManyWithoutUserNestedInput
  name: StringFieldUpdateOperationsInput
  password_hash: StringFieldUpdateOperationsInput
  rating: MovieRatingUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchlist: MovieUpdateManyWithoutInWatchlistByUsersNestedInput
}

input MovifierAppUserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password_hash: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input MovifierAppUserUpdateManyWithWhereWithoutWatchlistInput {
  data: MovifierAppUserUpdateManyMutationInput!
  where: MovifierAppUserScalarWhereInput!
}

input MovifierAppUserUpdateManyWithoutWatchlistNestedInput {
  connect: [MovifierAppUserWhereUniqueInput!]
  connectOrCreate: [MovifierAppUserCreateOrConnectWithoutWatchlistInput!]
  create: [MovifierAppUserCreateWithoutWatchlistInput!]
  delete: [MovifierAppUserWhereUniqueInput!]
  deleteMany: [MovifierAppUserScalarWhereInput!]
  disconnect: [MovifierAppUserWhereUniqueInput!]
  set: [MovifierAppUserWhereUniqueInput!]
  update: [MovifierAppUserUpdateWithWhereUniqueWithoutWatchlistInput!]
  updateMany: [MovifierAppUserUpdateManyWithWhereWithoutWatchlistInput!]
  upsert: [MovifierAppUserUpsertWithWhereUniqueWithoutWatchlistInput!]
}

input MovifierAppUserUpdateOneRequiredWithoutMovieListsCommentsNestedInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutMovieListsCommentsInput
  create: MovifierAppUserCreateWithoutMovieListsCommentsInput
  update: MovifierAppUserUpdateToOneWithWhereWithoutMovieListsCommentsInput
  upsert: MovifierAppUserUpsertWithoutMovieListsCommentsInput
}

input MovifierAppUserUpdateOneRequiredWithoutMovieListsNestedInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutMovieListsInput
  create: MovifierAppUserCreateWithoutMovieListsInput
  update: MovifierAppUserUpdateToOneWithWhereWithoutMovieListsInput
  upsert: MovifierAppUserUpsertWithoutMovieListsInput
}

input MovifierAppUserUpdateOneRequiredWithoutRatingNestedInput {
  connect: MovifierAppUserWhereUniqueInput
  connectOrCreate: MovifierAppUserCreateOrConnectWithoutRatingInput
  create: MovifierAppUserCreateWithoutRatingInput
  update: MovifierAppUserUpdateToOneWithWhereWithoutRatingInput
  upsert: MovifierAppUserUpsertWithoutRatingInput
}

input MovifierAppUserUpdateToOneWithWhereWithoutMovieListsCommentsInput {
  data: MovifierAppUserUpdateWithoutMovieListsCommentsInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpdateToOneWithWhereWithoutMovieListsInput {
  data: MovifierAppUserUpdateWithoutMovieListsInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpdateToOneWithWhereWithoutRatingInput {
  data: MovifierAppUserUpdateWithoutRatingInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpdateWithWhereUniqueWithoutWatchlistInput {
  data: MovifierAppUserUpdateWithoutWatchlistInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserUpdateWithoutMovieListsCommentsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieLists: MovieListUpdateManyWithoutMovieListAuthorNestedInput
  name: StringFieldUpdateOperationsInput
  password_hash: StringFieldUpdateOperationsInput
  rating: MovieRatingUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchlist: MovieUpdateManyWithoutInWatchlistByUsersNestedInput
}

input MovifierAppUserUpdateWithoutMovieListsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieListsComments: MovieListCommentUpdateManyWithoutUserNestedInput
  name: StringFieldUpdateOperationsInput
  password_hash: StringFieldUpdateOperationsInput
  rating: MovieRatingUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchlist: MovieUpdateManyWithoutInWatchlistByUsersNestedInput
}

input MovifierAppUserUpdateWithoutRatingInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieLists: MovieListUpdateManyWithoutMovieListAuthorNestedInput
  movieListsComments: MovieListCommentUpdateManyWithoutUserNestedInput
  name: StringFieldUpdateOperationsInput
  password_hash: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  watchlist: MovieUpdateManyWithoutInWatchlistByUsersNestedInput
}

input MovifierAppUserUpdateWithoutWatchlistInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  movieLists: MovieListUpdateManyWithoutMovieListAuthorNestedInput
  movieListsComments: MovieListCommentUpdateManyWithoutUserNestedInput
  name: StringFieldUpdateOperationsInput
  password_hash: StringFieldUpdateOperationsInput
  rating: MovieRatingUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input MovifierAppUserUpsertWithWhereUniqueWithoutWatchlistInput {
  create: MovifierAppUserCreateWithoutWatchlistInput!
  update: MovifierAppUserUpdateWithoutWatchlistInput!
  where: MovifierAppUserWhereUniqueInput!
}

input MovifierAppUserUpsertWithoutMovieListsCommentsInput {
  create: MovifierAppUserCreateWithoutMovieListsCommentsInput!
  update: MovifierAppUserUpdateWithoutMovieListsCommentsInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpsertWithoutMovieListsInput {
  create: MovifierAppUserCreateWithoutMovieListsInput!
  update: MovifierAppUserUpdateWithoutMovieListsInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserUpsertWithoutRatingInput {
  create: MovifierAppUserCreateWithoutRatingInput!
  update: MovifierAppUserUpdateWithoutRatingInput!
  where: MovifierAppUserWhereInput
}

input MovifierAppUserWhereInput {
  AND: [MovifierAppUserWhereInput!]
  NOT: [MovifierAppUserWhereInput!]
  OR: [MovifierAppUserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  movieLists: MovieListListRelationFilter
  movieListsComments: MovieListCommentListRelationFilter
  name: StringFilter
  password_hash: StringFilter
  rating: MovieRatingListRelationFilter
  updatedAt: DateTimeFilter
  username: StringFilter
  watchlist: MovieListRelationFilter
}

input MovifierAppUserWhereUniqueInput {
  AND: [MovifierAppUserWhereInput!]
  NOT: [MovifierAppUserWhereInput!]
  OR: [MovifierAppUserWhereInput!]
  createdAt: DateTimeFilter
  email: String
  id: String
  movieLists: MovieListListRelationFilter
  movieListsComments: MovieListCommentListRelationFilter
  name: StringFilter
  password_hash: StringFilter
  rating: MovieRatingListRelationFilter
  updatedAt: DateTimeFilter
  username: String
  watchlist: MovieListRelationFilter
}

type Mutation {
  createManyGenre(data: [GenreCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovie(data: [MovieCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieCrewMember(data: [MovieCrewMemberCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieCrewMemberType(data: [MovieCrewMemberTypeCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieInfo(data: [MovieInfoCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieKeywordCategory(data: [MovieKeywordCategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieList(data: [MovieListCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieListComment(data: [MovieListCommentCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieListStats(data: [MovieListStatsCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieRating(data: [MovieRatingCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieReview(data: [MovieReviewCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieSpokenLanguage(data: [MovieSpokenLanguageCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieStats(data: [MovieStatsCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovieStudio(data: [MovieStudioCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMovifierAppUser(data: [MovifierAppUserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneGenre(data: GenreCreateInput!): Genre!
  createOneMovie(data: MovieCreateInput!): Movie!
  createOneMovieCrewMember(data: MovieCrewMemberCreateInput!): MovieCrewMember!
  createOneMovieCrewMemberType(data: MovieCrewMemberTypeCreateInput!): MovieCrewMemberType!
  createOneMovieInfo(data: MovieInfoCreateInput!): MovieInfo!
  createOneMovieKeywordCategory(data: MovieKeywordCategoryCreateInput!): MovieKeywordCategory!
  createOneMovieList(data: MovieListCreateInput!): MovieList!
  createOneMovieListComment(data: MovieListCommentCreateInput!): MovieListComment!
  createOneMovieListStats(data: MovieListStatsCreateInput!): MovieListStats!
  createOneMovieRating(data: MovieRatingCreateInput!): MovieRating!
  createOneMovieReview(data: MovieReviewCreateInput!): MovieReview!
  createOneMovieSpokenLanguage(data: MovieSpokenLanguageCreateInput!): MovieSpokenLanguage!
  createOneMovieStats(data: MovieStatsCreateInput!): MovieStats!
  createOneMovieStudio(data: MovieStudioCreateInput!): MovieStudio!
  createOneMovifierAppUser(data: MovifierAppUserCreateInput!): MovifierAppUser!
  deleteManyGenre(where: GenreWhereInput): AffectedRowsOutput!
  deleteManyMovie(where: MovieWhereInput): AffectedRowsOutput!
  deleteManyMovieCrewMember(where: MovieCrewMemberWhereInput): AffectedRowsOutput!
  deleteManyMovieCrewMemberType(where: MovieCrewMemberTypeWhereInput): AffectedRowsOutput!
  deleteManyMovieInfo(where: MovieInfoWhereInput): AffectedRowsOutput!
  deleteManyMovieKeywordCategory(where: MovieKeywordCategoryWhereInput): AffectedRowsOutput!
  deleteManyMovieList(where: MovieListWhereInput): AffectedRowsOutput!
  deleteManyMovieListComment(where: MovieListCommentWhereInput): AffectedRowsOutput!
  deleteManyMovieListStats(where: MovieListStatsWhereInput): AffectedRowsOutput!
  deleteManyMovieRating(where: MovieRatingWhereInput): AffectedRowsOutput!
  deleteManyMovieReview(where: MovieReviewWhereInput): AffectedRowsOutput!
  deleteManyMovieSpokenLanguage(where: MovieSpokenLanguageWhereInput): AffectedRowsOutput!
  deleteManyMovieStats(where: MovieStatsWhereInput): AffectedRowsOutput!
  deleteManyMovieStudio(where: MovieStudioWhereInput): AffectedRowsOutput!
  deleteManyMovifierAppUser(where: MovifierAppUserWhereInput): AffectedRowsOutput!
  deleteOneGenre(where: GenreWhereUniqueInput!): Genre
  deleteOneMovie(where: MovieWhereUniqueInput!): Movie
  deleteOneMovieCrewMember(where: MovieCrewMemberWhereUniqueInput!): MovieCrewMember
  deleteOneMovieCrewMemberType(where: MovieCrewMemberTypeWhereUniqueInput!): MovieCrewMemberType
  deleteOneMovieInfo(where: MovieInfoWhereUniqueInput!): MovieInfo
  deleteOneMovieKeywordCategory(where: MovieKeywordCategoryWhereUniqueInput!): MovieKeywordCategory
  deleteOneMovieList(where: MovieListWhereUniqueInput!): MovieList
  deleteOneMovieListComment(where: MovieListCommentWhereUniqueInput!): MovieListComment
  deleteOneMovieListStats(where: MovieListStatsWhereUniqueInput!): MovieListStats
  deleteOneMovieRating(where: MovieRatingWhereUniqueInput!): MovieRating
  deleteOneMovieReview(where: MovieReviewWhereUniqueInput!): MovieReview
  deleteOneMovieSpokenLanguage(where: MovieSpokenLanguageWhereUniqueInput!): MovieSpokenLanguage
  deleteOneMovieStats(where: MovieStatsWhereUniqueInput!): MovieStats
  deleteOneMovieStudio(where: MovieStudioWhereUniqueInput!): MovieStudio
  deleteOneMovifierAppUser(where: MovifierAppUserWhereUniqueInput!): MovifierAppUser
  updateManyGenre(data: GenreUpdateManyMutationInput!, where: GenreWhereInput): AffectedRowsOutput!
  updateManyMovie(data: MovieUpdateManyMutationInput!, where: MovieWhereInput): AffectedRowsOutput!
  updateManyMovieCrewMember(data: MovieCrewMemberUpdateManyMutationInput!, where: MovieCrewMemberWhereInput): AffectedRowsOutput!
  updateManyMovieCrewMemberType(data: MovieCrewMemberTypeUpdateManyMutationInput!, where: MovieCrewMemberTypeWhereInput): AffectedRowsOutput!
  updateManyMovieInfo(data: MovieInfoUpdateManyMutationInput!, where: MovieInfoWhereInput): AffectedRowsOutput!
  updateManyMovieKeywordCategory(data: MovieKeywordCategoryUpdateManyMutationInput!, where: MovieKeywordCategoryWhereInput): AffectedRowsOutput!
  updateManyMovieList(data: MovieListUpdateManyMutationInput!, where: MovieListWhereInput): AffectedRowsOutput!
  updateManyMovieListComment(data: MovieListCommentUpdateManyMutationInput!, where: MovieListCommentWhereInput): AffectedRowsOutput!
  updateManyMovieListStats(data: MovieListStatsUpdateManyMutationInput!, where: MovieListStatsWhereInput): AffectedRowsOutput!
  updateManyMovieRating(data: MovieRatingUpdateManyMutationInput!, where: MovieRatingWhereInput): AffectedRowsOutput!
  updateManyMovieReview(data: MovieReviewUpdateManyMutationInput!, where: MovieReviewWhereInput): AffectedRowsOutput!
  updateManyMovieSpokenLanguage(data: MovieSpokenLanguageUpdateManyMutationInput!, where: MovieSpokenLanguageWhereInput): AffectedRowsOutput!
  updateManyMovieStats(data: MovieStatsUpdateManyMutationInput!, where: MovieStatsWhereInput): AffectedRowsOutput!
  updateManyMovieStudio(data: MovieStudioUpdateManyMutationInput!, where: MovieStudioWhereInput): AffectedRowsOutput!
  updateManyMovifierAppUser(data: MovifierAppUserUpdateManyMutationInput!, where: MovifierAppUserWhereInput): AffectedRowsOutput!
  updateOneGenre(data: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre
  updateOneMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie
  updateOneMovieCrewMember(data: MovieCrewMemberUpdateInput!, where: MovieCrewMemberWhereUniqueInput!): MovieCrewMember
  updateOneMovieCrewMemberType(data: MovieCrewMemberTypeUpdateInput!, where: MovieCrewMemberTypeWhereUniqueInput!): MovieCrewMemberType
  updateOneMovieInfo(data: MovieInfoUpdateInput!, where: MovieInfoWhereUniqueInput!): MovieInfo
  updateOneMovieKeywordCategory(data: MovieKeywordCategoryUpdateInput!, where: MovieKeywordCategoryWhereUniqueInput!): MovieKeywordCategory
  updateOneMovieList(data: MovieListUpdateInput!, where: MovieListWhereUniqueInput!): MovieList
  updateOneMovieListComment(data: MovieListCommentUpdateInput!, where: MovieListCommentWhereUniqueInput!): MovieListComment
  updateOneMovieListStats(data: MovieListStatsUpdateInput!, where: MovieListStatsWhereUniqueInput!): MovieListStats
  updateOneMovieRating(data: MovieRatingUpdateInput!, where: MovieRatingWhereUniqueInput!): MovieRating
  updateOneMovieReview(data: MovieReviewUpdateInput!, where: MovieReviewWhereUniqueInput!): MovieReview
  updateOneMovieSpokenLanguage(data: MovieSpokenLanguageUpdateInput!, where: MovieSpokenLanguageWhereUniqueInput!): MovieSpokenLanguage
  updateOneMovieStats(data: MovieStatsUpdateInput!, where: MovieStatsWhereUniqueInput!): MovieStats
  updateOneMovieStudio(data: MovieStudioUpdateInput!, where: MovieStudioWhereUniqueInput!): MovieStudio
  updateOneMovifierAppUser(data: MovifierAppUserUpdateInput!, where: MovifierAppUserWhereUniqueInput!): MovifierAppUser
  upsertOneGenre(create: GenreCreateInput!, update: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre!
  upsertOneMovie(create: MovieCreateInput!, update: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie!
  upsertOneMovieCrewMember(create: MovieCrewMemberCreateInput!, update: MovieCrewMemberUpdateInput!, where: MovieCrewMemberWhereUniqueInput!): MovieCrewMember!
  upsertOneMovieCrewMemberType(create: MovieCrewMemberTypeCreateInput!, update: MovieCrewMemberTypeUpdateInput!, where: MovieCrewMemberTypeWhereUniqueInput!): MovieCrewMemberType!
  upsertOneMovieInfo(create: MovieInfoCreateInput!, update: MovieInfoUpdateInput!, where: MovieInfoWhereUniqueInput!): MovieInfo!
  upsertOneMovieKeywordCategory(create: MovieKeywordCategoryCreateInput!, update: MovieKeywordCategoryUpdateInput!, where: MovieKeywordCategoryWhereUniqueInput!): MovieKeywordCategory!
  upsertOneMovieList(create: MovieListCreateInput!, update: MovieListUpdateInput!, where: MovieListWhereUniqueInput!): MovieList!
  upsertOneMovieListComment(create: MovieListCommentCreateInput!, update: MovieListCommentUpdateInput!, where: MovieListCommentWhereUniqueInput!): MovieListComment!
  upsertOneMovieListStats(create: MovieListStatsCreateInput!, update: MovieListStatsUpdateInput!, where: MovieListStatsWhereUniqueInput!): MovieListStats!
  upsertOneMovieRating(create: MovieRatingCreateInput!, update: MovieRatingUpdateInput!, where: MovieRatingWhereUniqueInput!): MovieRating!
  upsertOneMovieReview(create: MovieReviewCreateInput!, update: MovieReviewUpdateInput!, where: MovieReviewWhereUniqueInput!): MovieReview!
  upsertOneMovieSpokenLanguage(create: MovieSpokenLanguageCreateInput!, update: MovieSpokenLanguageUpdateInput!, where: MovieSpokenLanguageWhereUniqueInput!): MovieSpokenLanguage!
  upsertOneMovieStats(create: MovieStatsCreateInput!, update: MovieStatsUpdateInput!, where: MovieStatsWhereUniqueInput!): MovieStats!
  upsertOneMovieStudio(create: MovieStudioCreateInput!, update: MovieStudioUpdateInput!, where: MovieStudioWhereUniqueInput!): MovieStudio!
  upsertOneMovifierAppUser(create: MovifierAppUserCreateInput!, update: MovifierAppUserUpdateInput!, where: MovifierAppUserWhereUniqueInput!): MovifierAppUser!
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Query {
  aggregateGenre(cursor: GenreWhereUniqueInput, orderBy: [GenreOrderByWithRelationInput!], skip: Int, take: Int, where: GenreWhereInput): AggregateGenre!
  aggregateMovie(cursor: MovieWhereUniqueInput, orderBy: [MovieOrderByWithRelationInput!], skip: Int, take: Int, where: MovieWhereInput): AggregateMovie!
  aggregateMovieCrewMember(cursor: MovieCrewMemberWhereUniqueInput, orderBy: [MovieCrewMemberOrderByWithRelationInput!], skip: Int, take: Int, where: MovieCrewMemberWhereInput): AggregateMovieCrewMember!
  aggregateMovieCrewMemberType(cursor: MovieCrewMemberTypeWhereUniqueInput, orderBy: [MovieCrewMemberTypeOrderByWithRelationInput!], skip: Int, take: Int, where: MovieCrewMemberTypeWhereInput): AggregateMovieCrewMemberType!
  aggregateMovieInfo(cursor: MovieInfoWhereUniqueInput, orderBy: [MovieInfoOrderByWithRelationInput!], skip: Int, take: Int, where: MovieInfoWhereInput): AggregateMovieInfo!
  aggregateMovieKeywordCategory(cursor: MovieKeywordCategoryWhereUniqueInput, orderBy: [MovieKeywordCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: MovieKeywordCategoryWhereInput): AggregateMovieKeywordCategory!
  aggregateMovieList(cursor: MovieListWhereUniqueInput, orderBy: [MovieListOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListWhereInput): AggregateMovieList!
  aggregateMovieListComment(cursor: MovieListCommentWhereUniqueInput, orderBy: [MovieListCommentOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListCommentWhereInput): AggregateMovieListComment!
  aggregateMovieListStats(cursor: MovieListStatsWhereUniqueInput, orderBy: [MovieListStatsOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListStatsWhereInput): AggregateMovieListStats!
  aggregateMovieRating(cursor: MovieRatingWhereUniqueInput, orderBy: [MovieRatingOrderByWithRelationInput!], skip: Int, take: Int, where: MovieRatingWhereInput): AggregateMovieRating!
  aggregateMovieReview(cursor: MovieReviewWhereUniqueInput, orderBy: [MovieReviewOrderByWithRelationInput!], skip: Int, take: Int, where: MovieReviewWhereInput): AggregateMovieReview!
  aggregateMovieSpokenLanguage(cursor: MovieSpokenLanguageWhereUniqueInput, orderBy: [MovieSpokenLanguageOrderByWithRelationInput!], skip: Int, take: Int, where: MovieSpokenLanguageWhereInput): AggregateMovieSpokenLanguage!
  aggregateMovieStats(cursor: MovieStatsWhereUniqueInput, orderBy: [MovieStatsOrderByWithRelationInput!], skip: Int, take: Int, where: MovieStatsWhereInput): AggregateMovieStats!
  aggregateMovieStudio(cursor: MovieStudioWhereUniqueInput, orderBy: [MovieStudioOrderByWithRelationInput!], skip: Int, take: Int, where: MovieStudioWhereInput): AggregateMovieStudio!
  aggregateMovifierAppUser(cursor: MovifierAppUserWhereUniqueInput, orderBy: [MovifierAppUserOrderByWithRelationInput!], skip: Int, take: Int, where: MovifierAppUserWhereInput): AggregateMovifierAppUser!
  findFirstGenre(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum!], orderBy: [GenreOrderByWithRelationInput!], skip: Int, take: Int, where: GenreWhereInput): Genre
  findFirstGenreOrThrow(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum!], orderBy: [GenreOrderByWithRelationInput!], skip: Int, take: Int, where: GenreWhereInput): Genre
  findFirstMovie(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationInput!], skip: Int, take: Int, where: MovieWhereInput): Movie
  findFirstMovieCrewMember(cursor: MovieCrewMemberWhereUniqueInput, distinct: [MovieCrewMemberScalarFieldEnum!], orderBy: [MovieCrewMemberOrderByWithRelationInput!], skip: Int, take: Int, where: MovieCrewMemberWhereInput): MovieCrewMember
  findFirstMovieCrewMemberOrThrow(cursor: MovieCrewMemberWhereUniqueInput, distinct: [MovieCrewMemberScalarFieldEnum!], orderBy: [MovieCrewMemberOrderByWithRelationInput!], skip: Int, take: Int, where: MovieCrewMemberWhereInput): MovieCrewMember
  findFirstMovieCrewMemberType(cursor: MovieCrewMemberTypeWhereUniqueInput, distinct: [MovieCrewMemberTypeScalarFieldEnum!], orderBy: [MovieCrewMemberTypeOrderByWithRelationInput!], skip: Int, take: Int, where: MovieCrewMemberTypeWhereInput): MovieCrewMemberType
  findFirstMovieCrewMemberTypeOrThrow(cursor: MovieCrewMemberTypeWhereUniqueInput, distinct: [MovieCrewMemberTypeScalarFieldEnum!], orderBy: [MovieCrewMemberTypeOrderByWithRelationInput!], skip: Int, take: Int, where: MovieCrewMemberTypeWhereInput): MovieCrewMemberType
  findFirstMovieInfo(cursor: MovieInfoWhereUniqueInput, distinct: [MovieInfoScalarFieldEnum!], orderBy: [MovieInfoOrderByWithRelationInput!], skip: Int, take: Int, where: MovieInfoWhereInput): MovieInfo
  findFirstMovieInfoOrThrow(cursor: MovieInfoWhereUniqueInput, distinct: [MovieInfoScalarFieldEnum!], orderBy: [MovieInfoOrderByWithRelationInput!], skip: Int, take: Int, where: MovieInfoWhereInput): MovieInfo
  findFirstMovieKeywordCategory(cursor: MovieKeywordCategoryWhereUniqueInput, distinct: [MovieKeywordCategoryScalarFieldEnum!], orderBy: [MovieKeywordCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: MovieKeywordCategoryWhereInput): MovieKeywordCategory
  findFirstMovieKeywordCategoryOrThrow(cursor: MovieKeywordCategoryWhereUniqueInput, distinct: [MovieKeywordCategoryScalarFieldEnum!], orderBy: [MovieKeywordCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: MovieKeywordCategoryWhereInput): MovieKeywordCategory
  findFirstMovieList(cursor: MovieListWhereUniqueInput, distinct: [MovieListScalarFieldEnum!], orderBy: [MovieListOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListWhereInput): MovieList
  findFirstMovieListComment(cursor: MovieListCommentWhereUniqueInput, distinct: [MovieListCommentScalarFieldEnum!], orderBy: [MovieListCommentOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListCommentWhereInput): MovieListComment
  findFirstMovieListCommentOrThrow(cursor: MovieListCommentWhereUniqueInput, distinct: [MovieListCommentScalarFieldEnum!], orderBy: [MovieListCommentOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListCommentWhereInput): MovieListComment
  findFirstMovieListOrThrow(cursor: MovieListWhereUniqueInput, distinct: [MovieListScalarFieldEnum!], orderBy: [MovieListOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListWhereInput): MovieList
  findFirstMovieListStats(cursor: MovieListStatsWhereUniqueInput, distinct: [MovieListStatsScalarFieldEnum!], orderBy: [MovieListStatsOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListStatsWhereInput): MovieListStats
  findFirstMovieListStatsOrThrow(cursor: MovieListStatsWhereUniqueInput, distinct: [MovieListStatsScalarFieldEnum!], orderBy: [MovieListStatsOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListStatsWhereInput): MovieListStats
  findFirstMovieOrThrow(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationInput!], skip: Int, take: Int, where: MovieWhereInput): Movie
  findFirstMovieRating(cursor: MovieRatingWhereUniqueInput, distinct: [MovieRatingScalarFieldEnum!], orderBy: [MovieRatingOrderByWithRelationInput!], skip: Int, take: Int, where: MovieRatingWhereInput): MovieRating
  findFirstMovieRatingOrThrow(cursor: MovieRatingWhereUniqueInput, distinct: [MovieRatingScalarFieldEnum!], orderBy: [MovieRatingOrderByWithRelationInput!], skip: Int, take: Int, where: MovieRatingWhereInput): MovieRating
  findFirstMovieReview(cursor: MovieReviewWhereUniqueInput, distinct: [MovieReviewScalarFieldEnum!], orderBy: [MovieReviewOrderByWithRelationInput!], skip: Int, take: Int, where: MovieReviewWhereInput): MovieReview
  findFirstMovieReviewOrThrow(cursor: MovieReviewWhereUniqueInput, distinct: [MovieReviewScalarFieldEnum!], orderBy: [MovieReviewOrderByWithRelationInput!], skip: Int, take: Int, where: MovieReviewWhereInput): MovieReview
  findFirstMovieSpokenLanguage(cursor: MovieSpokenLanguageWhereUniqueInput, distinct: [MovieSpokenLanguageScalarFieldEnum!], orderBy: [MovieSpokenLanguageOrderByWithRelationInput!], skip: Int, take: Int, where: MovieSpokenLanguageWhereInput): MovieSpokenLanguage
  findFirstMovieSpokenLanguageOrThrow(cursor: MovieSpokenLanguageWhereUniqueInput, distinct: [MovieSpokenLanguageScalarFieldEnum!], orderBy: [MovieSpokenLanguageOrderByWithRelationInput!], skip: Int, take: Int, where: MovieSpokenLanguageWhereInput): MovieSpokenLanguage
  findFirstMovieStats(cursor: MovieStatsWhereUniqueInput, distinct: [MovieStatsScalarFieldEnum!], orderBy: [MovieStatsOrderByWithRelationInput!], skip: Int, take: Int, where: MovieStatsWhereInput): MovieStats
  findFirstMovieStatsOrThrow(cursor: MovieStatsWhereUniqueInput, distinct: [MovieStatsScalarFieldEnum!], orderBy: [MovieStatsOrderByWithRelationInput!], skip: Int, take: Int, where: MovieStatsWhereInput): MovieStats
  findFirstMovieStudio(cursor: MovieStudioWhereUniqueInput, distinct: [MovieStudioScalarFieldEnum!], orderBy: [MovieStudioOrderByWithRelationInput!], skip: Int, take: Int, where: MovieStudioWhereInput): MovieStudio
  findFirstMovieStudioOrThrow(cursor: MovieStudioWhereUniqueInput, distinct: [MovieStudioScalarFieldEnum!], orderBy: [MovieStudioOrderByWithRelationInput!], skip: Int, take: Int, where: MovieStudioWhereInput): MovieStudio
  findFirstMovifierAppUser(cursor: MovifierAppUserWhereUniqueInput, distinct: [MovifierAppUserScalarFieldEnum!], orderBy: [MovifierAppUserOrderByWithRelationInput!], skip: Int, take: Int, where: MovifierAppUserWhereInput): MovifierAppUser
  findFirstMovifierAppUserOrThrow(cursor: MovifierAppUserWhereUniqueInput, distinct: [MovifierAppUserScalarFieldEnum!], orderBy: [MovifierAppUserOrderByWithRelationInput!], skip: Int, take: Int, where: MovifierAppUserWhereInput): MovifierAppUser
  findManyMovieListStats(cursor: MovieListStatsWhereUniqueInput, distinct: [MovieListStatsScalarFieldEnum!], orderBy: [MovieListStatsOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListStatsWhereInput): [MovieListStats!]!
  findManyMovieStats(cursor: MovieStatsWhereUniqueInput, distinct: [MovieStatsScalarFieldEnum!], orderBy: [MovieStatsOrderByWithRelationInput!], skip: Int, take: Int, where: MovieStatsWhereInput): [MovieStats!]!
  findUniqueMovieListStats(where: MovieListStatsWhereUniqueInput!): MovieListStats
  findUniqueMovieListStatsOrThrow(where: MovieListStatsWhereUniqueInput!): MovieListStats
  findUniqueMovieStats(where: MovieStatsWhereUniqueInput!): MovieStats
  findUniqueMovieStatsOrThrow(where: MovieStatsWhereUniqueInput!): MovieStats
  genre(where: GenreWhereUniqueInput!): Genre
  genres(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum!], orderBy: [GenreOrderByWithRelationInput!], skip: Int, take: Int, where: GenreWhereInput): [Genre!]!
  getGenre(where: GenreWhereUniqueInput!): Genre
  getMovie(where: MovieWhereUniqueInput!): Movie
  getMovieCrewMember(where: MovieCrewMemberWhereUniqueInput!): MovieCrewMember
  getMovieCrewMemberType(where: MovieCrewMemberTypeWhereUniqueInput!): MovieCrewMemberType
  getMovieInfo(where: MovieInfoWhereUniqueInput!): MovieInfo
  getMovieKeywordCategory(where: MovieKeywordCategoryWhereUniqueInput!): MovieKeywordCategory
  getMovieList(where: MovieListWhereUniqueInput!): MovieList
  getMovieListComment(where: MovieListCommentWhereUniqueInput!): MovieListComment
  getMovieRating(where: MovieRatingWhereUniqueInput!): MovieRating
  getMovieReview(where: MovieReviewWhereUniqueInput!): MovieReview
  getMovieSpokenLanguage(where: MovieSpokenLanguageWhereUniqueInput!): MovieSpokenLanguage
  getMovieStudio(where: MovieStudioWhereUniqueInput!): MovieStudio
  getMovifierAppUser(where: MovifierAppUserWhereUniqueInput!): MovifierAppUser
  groupByGenre(by: [GenreScalarFieldEnum!]!, having: GenreScalarWhereWithAggregatesInput, orderBy: [GenreOrderByWithAggregationInput!], skip: Int, take: Int, where: GenreWhereInput): [GenreGroupBy!]!
  groupByMovie(by: [MovieScalarFieldEnum!]!, having: MovieScalarWhereWithAggregatesInput, orderBy: [MovieOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieWhereInput): [MovieGroupBy!]!
  groupByMovieCrewMember(by: [MovieCrewMemberScalarFieldEnum!]!, having: MovieCrewMemberScalarWhereWithAggregatesInput, orderBy: [MovieCrewMemberOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieCrewMemberWhereInput): [MovieCrewMemberGroupBy!]!
  groupByMovieCrewMemberType(by: [MovieCrewMemberTypeScalarFieldEnum!]!, having: MovieCrewMemberTypeScalarWhereWithAggregatesInput, orderBy: [MovieCrewMemberTypeOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieCrewMemberTypeWhereInput): [MovieCrewMemberTypeGroupBy!]!
  groupByMovieInfo(by: [MovieInfoScalarFieldEnum!]!, having: MovieInfoScalarWhereWithAggregatesInput, orderBy: [MovieInfoOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieInfoWhereInput): [MovieInfoGroupBy!]!
  groupByMovieKeywordCategory(by: [MovieKeywordCategoryScalarFieldEnum!]!, having: MovieKeywordCategoryScalarWhereWithAggregatesInput, orderBy: [MovieKeywordCategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieKeywordCategoryWhereInput): [MovieKeywordCategoryGroupBy!]!
  groupByMovieList(by: [MovieListScalarFieldEnum!]!, having: MovieListScalarWhereWithAggregatesInput, orderBy: [MovieListOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieListWhereInput): [MovieListGroupBy!]!
  groupByMovieListComment(by: [MovieListCommentScalarFieldEnum!]!, having: MovieListCommentScalarWhereWithAggregatesInput, orderBy: [MovieListCommentOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieListCommentWhereInput): [MovieListCommentGroupBy!]!
  groupByMovieListStats(by: [MovieListStatsScalarFieldEnum!]!, having: MovieListStatsScalarWhereWithAggregatesInput, orderBy: [MovieListStatsOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieListStatsWhereInput): [MovieListStatsGroupBy!]!
  groupByMovieRating(by: [MovieRatingScalarFieldEnum!]!, having: MovieRatingScalarWhereWithAggregatesInput, orderBy: [MovieRatingOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieRatingWhereInput): [MovieRatingGroupBy!]!
  groupByMovieReview(by: [MovieReviewScalarFieldEnum!]!, having: MovieReviewScalarWhereWithAggregatesInput, orderBy: [MovieReviewOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieReviewWhereInput): [MovieReviewGroupBy!]!
  groupByMovieSpokenLanguage(by: [MovieSpokenLanguageScalarFieldEnum!]!, having: MovieSpokenLanguageScalarWhereWithAggregatesInput, orderBy: [MovieSpokenLanguageOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieSpokenLanguageWhereInput): [MovieSpokenLanguageGroupBy!]!
  groupByMovieStats(by: [MovieStatsScalarFieldEnum!]!, having: MovieStatsScalarWhereWithAggregatesInput, orderBy: [MovieStatsOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieStatsWhereInput): [MovieStatsGroupBy!]!
  groupByMovieStudio(by: [MovieStudioScalarFieldEnum!]!, having: MovieStudioScalarWhereWithAggregatesInput, orderBy: [MovieStudioOrderByWithAggregationInput!], skip: Int, take: Int, where: MovieStudioWhereInput): [MovieStudioGroupBy!]!
  groupByMovifierAppUser(by: [MovifierAppUserScalarFieldEnum!]!, having: MovifierAppUserScalarWhereWithAggregatesInput, orderBy: [MovifierAppUserOrderByWithAggregationInput!], skip: Int, take: Int, where: MovifierAppUserWhereInput): [MovifierAppUserGroupBy!]!
  movie(where: MovieWhereUniqueInput!): Movie
  movieCrewMember(where: MovieCrewMemberWhereUniqueInput!): MovieCrewMember
  movieCrewMemberType(where: MovieCrewMemberTypeWhereUniqueInput!): MovieCrewMemberType
  movieCrewMemberTypes(cursor: MovieCrewMemberTypeWhereUniqueInput, distinct: [MovieCrewMemberTypeScalarFieldEnum!], orderBy: [MovieCrewMemberTypeOrderByWithRelationInput!], skip: Int, take: Int, where: MovieCrewMemberTypeWhereInput): [MovieCrewMemberType!]!
  movieCrewMembers(cursor: MovieCrewMemberWhereUniqueInput, distinct: [MovieCrewMemberScalarFieldEnum!], orderBy: [MovieCrewMemberOrderByWithRelationInput!], skip: Int, take: Int, where: MovieCrewMemberWhereInput): [MovieCrewMember!]!
  movieInfo(where: MovieInfoWhereUniqueInput!): MovieInfo
  movieInfos(cursor: MovieInfoWhereUniqueInput, distinct: [MovieInfoScalarFieldEnum!], orderBy: [MovieInfoOrderByWithRelationInput!], skip: Int, take: Int, where: MovieInfoWhereInput): [MovieInfo!]!
  movieKeywordCategories(cursor: MovieKeywordCategoryWhereUniqueInput, distinct: [MovieKeywordCategoryScalarFieldEnum!], orderBy: [MovieKeywordCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: MovieKeywordCategoryWhereInput): [MovieKeywordCategory!]!
  movieKeywordCategory(where: MovieKeywordCategoryWhereUniqueInput!): MovieKeywordCategory
  movieList(where: MovieListWhereUniqueInput!): MovieList
  movieListComment(where: MovieListCommentWhereUniqueInput!): MovieListComment
  movieListComments(cursor: MovieListCommentWhereUniqueInput, distinct: [MovieListCommentScalarFieldEnum!], orderBy: [MovieListCommentOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListCommentWhereInput): [MovieListComment!]!
  movieLists(cursor: MovieListWhereUniqueInput, distinct: [MovieListScalarFieldEnum!], orderBy: [MovieListOrderByWithRelationInput!], skip: Int, take: Int, where: MovieListWhereInput): [MovieList!]!
  movieRating(where: MovieRatingWhereUniqueInput!): MovieRating
  movieRatings(cursor: MovieRatingWhereUniqueInput, distinct: [MovieRatingScalarFieldEnum!], orderBy: [MovieRatingOrderByWithRelationInput!], skip: Int, take: Int, where: MovieRatingWhereInput): [MovieRating!]!
  movieReview(where: MovieReviewWhereUniqueInput!): MovieReview
  movieReviews(cursor: MovieReviewWhereUniqueInput, distinct: [MovieReviewScalarFieldEnum!], orderBy: [MovieReviewOrderByWithRelationInput!], skip: Int, take: Int, where: MovieReviewWhereInput): [MovieReview!]!
  movieSpokenLanguage(where: MovieSpokenLanguageWhereUniqueInput!): MovieSpokenLanguage
  movieSpokenLanguages(cursor: MovieSpokenLanguageWhereUniqueInput, distinct: [MovieSpokenLanguageScalarFieldEnum!], orderBy: [MovieSpokenLanguageOrderByWithRelationInput!], skip: Int, take: Int, where: MovieSpokenLanguageWhereInput): [MovieSpokenLanguage!]!
  movieStudio(where: MovieStudioWhereUniqueInput!): MovieStudio
  movieStudios(cursor: MovieStudioWhereUniqueInput, distinct: [MovieStudioScalarFieldEnum!], orderBy: [MovieStudioOrderByWithRelationInput!], skip: Int, take: Int, where: MovieStudioWhereInput): [MovieStudio!]!
  movies(cursor: MovieWhereUniqueInput, distinct: [MovieScalarFieldEnum!], orderBy: [MovieOrderByWithRelationInput!], skip: Int, take: Int, where: MovieWhereInput): [Movie!]!
  movifierAppUser(where: MovifierAppUserWhereUniqueInput!): MovifierAppUser
  movifierAppUsers(cursor: MovifierAppUserWhereUniqueInput, distinct: [MovifierAppUserScalarFieldEnum!], orderBy: [MovifierAppUserOrderByWithRelationInput!], skip: Int, take: Int, where: MovifierAppUserWhereInput): [MovifierAppUser!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}